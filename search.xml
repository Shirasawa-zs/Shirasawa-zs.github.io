<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL日期函数</title>
      <link href="/2023/05/22/sql-ri-qi-han-shu/"/>
      <url>/2023/05/22/sql-ri-qi-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-获取日期时间函数"><a href="#1-获取日期时间函数" class="headerlink" title="1.获取日期时间函数"></a>1.获取日期时间函数</h1><h2 id="1-1-获取当前日期时间"><a href="#1-1-获取当前日期时间" class="headerlink" title="1.1 获取当前日期时间"></a>1.1 获取当前日期时间</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 2022-01-06 22:37:45</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-2-获取当前日期"><a href="#1-2-获取当前日期" class="headerlink" title="1.2 获取当前日期"></a>1.2 获取当前日期</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 2022-01-06</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-3-获取当前时间"><a href="#1-3-获取当前时间" class="headerlink" title="1.3 获取当前时间"></a>1.3 获取当前时间</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">CURRENT_TIME</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 22:39:04</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-日期格式化★★★"><a href="#2-日期格式化★★★" class="headerlink" title="2.日期格式化★★★"></a>2.日期格式化★★★</h1><h2 id="2-1-日期转指定格式字符串"><a href="#2-1-日期转指定格式字符串" class="headerlink" title="2.1 日期转指定格式字符串"></a>2.1 日期转指定格式字符串</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DATE_FORMAT<span class="token punctuation">(</span><span class="token string">'2022-01-08 22:23:01'</span><span class="token punctuation">,</span> <span class="token string">'%Y%m%d%H%i%s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 20220108222301</span>说明：<span class="token operator">%</span>W 星期名字<span class="token punctuation">(</span>Sunday……Saturday<span class="token punctuation">)</span><span class="token operator">%</span>D 有英语前缀的月份的日期<span class="token punctuation">(</span><span class="token number">1</span>st<span class="token punctuation">,</span> <span class="token number">2</span>nd<span class="token punctuation">,</span> <span class="token number">3</span>rd<span class="token punctuation">,</span> 等等。<span class="token punctuation">)</span><span class="token operator">%</span>Y 年<span class="token punctuation">,</span> 数字<span class="token punctuation">,</span> <span class="token number">4</span> 位 ★★★<span class="token operator">%</span>y 年<span class="token punctuation">,</span> 数字<span class="token punctuation">,</span> <span class="token number">2</span> 位<span class="token operator">%</span>a 缩写的星期名字<span class="token punctuation">(</span>Sun……Sat<span class="token punctuation">)</span><span class="token operator">%</span>d 月份中的天数<span class="token punctuation">,</span> 数字<span class="token punctuation">(</span><span class="token number">00</span>……<span class="token number">31</span><span class="token punctuation">)</span> ★★★<span class="token operator">%</span>e 月份中的天数<span class="token punctuation">,</span> 数字<span class="token punctuation">(</span><span class="token number">0</span>……<span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">%</span>m 月<span class="token punctuation">,</span> 数字<span class="token punctuation">(</span><span class="token number">01</span>……<span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">%</span>c 月<span class="token punctuation">,</span> 数字<span class="token punctuation">(</span><span class="token number">1</span>……<span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">%</span>b 缩写的月份名字<span class="token punctuation">(</span>Jan……<span class="token keyword">Dec</span><span class="token punctuation">)</span><span class="token operator">%</span>j 一年中的天数<span class="token punctuation">(</span><span class="token number">001</span>……<span class="token number">366</span><span class="token punctuation">)</span><span class="token operator">%</span>H 小时<span class="token punctuation">(</span><span class="token number">00</span>……<span class="token number">23</span><span class="token punctuation">)</span><span class="token operator">%</span>k 小时<span class="token punctuation">(</span><span class="token number">0</span>……<span class="token number">23</span><span class="token punctuation">)</span><span class="token operator">%</span>h 小时<span class="token punctuation">(</span><span class="token number">01</span>……<span class="token number">12</span><span class="token punctuation">)</span> ★★★<span class="token operator">%</span>I 小时<span class="token punctuation">(</span><span class="token number">01</span>……<span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">%</span>l 小时<span class="token punctuation">(</span><span class="token number">1</span>……<span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">%</span>i 分钟<span class="token punctuation">,</span> 数字<span class="token punctuation">(</span><span class="token number">00</span>……<span class="token number">59</span><span class="token punctuation">)</span> ★★★<span class="token operator">%</span>r 时间<span class="token punctuation">,</span><span class="token number">12</span> 小时<span class="token punctuation">(</span>hh:mm:ss <span class="token punctuation">[</span>AP<span class="token punctuation">]</span>M<span class="token punctuation">)</span><span class="token operator">%</span>T 时间<span class="token punctuation">,</span><span class="token number">24</span> 小时<span class="token punctuation">(</span>hh:mm:ss<span class="token punctuation">)</span><span class="token operator">%</span>S 秒<span class="token punctuation">(</span><span class="token number">00</span>……<span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">%</span>s 秒<span class="token punctuation">(</span><span class="token number">00</span>……<span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">%</span>p AM或PM<span class="token operator">%</span>w 一个星期中的天数<span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">=</span>Sunday ……<span class="token number">6</span><span class="token operator">=</span>Saturday <span class="token punctuation">)</span><span class="token operator">%</span>U 星期<span class="token punctuation">(</span><span class="token number">0</span>……<span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 这里星期天是星期的第一天<span class="token punctuation">,</span>查询指定日期属于当前年份的第几个周 ★★★<span class="token operator">%</span>u 星期<span class="token punctuation">(</span><span class="token number">0</span>……<span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 这里星期一是星期的第一天<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例代码：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 日期格式化</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d%H%i%s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 获取当前是星期几</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%m%W'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 查看当前属于一年中的第几个周 以周末作为一个循环</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%U'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span><span class="token string">'20220108090109'</span><span class="token punctuation">,</span><span class="token string">'%Y%U'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-字符串转日期"><a href="#2-2-字符串转日期" class="headerlink" title="2.2 字符串转日期"></a>2.2 字符串转日期</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 日期格式与表达式格式一致即可</span><span class="token keyword">SELECT</span> STR_TO_DATE<span class="token punctuation">(</span><span class="token string">'06/01/2022'</span><span class="token punctuation">,</span> <span class="token string">'%m/%d/%Y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 2022-06-01</span><span class="token keyword">SELECT</span> STR_TO_DATE<span class="token punctuation">(</span><span class="token string">'20220108090109'</span><span class="token punctuation">,</span> <span class="token string">'%Y%m%d%H%i%s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 2022-01-08 09:01:09</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="3-日期间隔"><a href="#3-日期间隔" class="headerlink" title="3.日期间隔"></a>3.日期间隔</h1><h2 id="3-1-增加日期间隔-★★★"><a href="#3-1-增加日期间隔-★★★" class="headerlink" title="3.1 增加日期间隔 ★★★"></a>3.1 增加日期间隔 ★★★</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 间隔单位可以是DAY MONTH MINUTE WEEK YEAR SECOND HOUR</span><span class="token keyword">SELECT</span> DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">INTERVAL</span> <span class="token number">2</span> <span class="token keyword">DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 2022-01-07 22:46:39</span><span class="token keyword">SELECT</span> DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">INTERVAL</span> <span class="token number">2</span> <span class="token keyword">MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 2022-02-06 22:47:17</span><span class="token keyword">SELECT</span> DATE_ADD<span class="token punctuation">(</span><span class="token string">'2022-02-06 22:47:17'</span><span class="token punctuation">,</span><span class="token keyword">INTERVAL</span> <span class="token number">2</span> <span class="token keyword">MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 2022-04-06 22:47:17</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-减去一个时间间隔★★★"><a href="#3-2-减去一个时间间隔★★★" class="headerlink" title="3.2 减去一个时间间隔★★★"></a>3.2 减去一个时间间隔★★★</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DATE_SUB<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">INTERVAL</span> <span class="token number">3</span> <span class="token keyword">DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 2022-01-03 22:49:24</span><span class="token keyword">SELECT</span> DATE_SUB<span class="token punctuation">(</span><span class="token string">'2022-02-06 22:47:17'</span><span class="token punctuation">,</span><span class="token keyword">INTERVAL</span> <span class="token number">2</span> <span class="token keyword">MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 2021-12-06 22:47:17</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-3-日期相差天数（天）"><a href="#3-3-日期相差天数（天）" class="headerlink" title="3.3 日期相差天数（天）"></a>3.3 日期相差天数（天）</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> datediff<span class="token punctuation">(</span><span class="token string">'2022-01-06'</span><span class="token punctuation">,</span><span class="token string">'2021-12-28'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-4-相差时间（小时）"><a href="#3-4-相差时间（小时）" class="headerlink" title="3.4 相差时间（小时）"></a>3.4 相差时间（小时）</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> timediff<span class="token punctuation">(</span><span class="token string">'2022-01-06 08:08:08'</span><span class="token punctuation">,</span> <span class="token string">'2021-12-28 09:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 08:08:08</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="4-星期操作"><a href="#4-星期操作" class="headerlink" title="4.星期操作"></a>4.星期操作</h1><h2 id="4-1-返回日期date的星期索引"><a href="#4-1-返回日期date的星期索引" class="headerlink" title="4.1 返回日期date的星期索引"></a>4.1 返回日期date的星期索引</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 返回日期date的星期索引(1=星期天，2=星期一, ……7=星期六)。这些索引值对应于ODBC标准。</span><span class="token keyword">SELECT</span> DAYOFWEEK<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment"># 返回date的星期索引(0=星期一，1=星期二, ……6= 星期天)</span><span class="token keyword">SELECT</span> WEEKDAY<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-其它操作"><a href="#5-其它操作" class="headerlink" title="5.其它操作"></a>5.其它操作</h1><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 获取日</span><span class="token keyword">SELECT</span> DAYOFMONTH<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 6</span><span class="token comment"># 获取月份</span><span class="token keyword">SELECT</span> <span class="token keyword">MONTH</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 1</span><span class="token comment"># 获取星期几</span><span class="token keyword">SELECT</span> DAYNAME<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># Thursday</span><span class="token comment"># 获取第几季度</span><span class="token keyword">SELECT</span> QUARTER<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 2022/1/6 --> 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyExcel的使用</title>
      <link href="/2023/05/21/easyexcel-shi-yong/"/>
      <url>/2023/05/21/easyexcel-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-EasyExcel快速入门"><a href="#1-EasyExcel快速入门" class="headerlink" title="1.EasyExcel快速入门"></a>1.EasyExcel快速入门</h2><p>网址：<a href="https://easyexcel.opensource.alibaba.com/">EasyExcel官方文档 - 基于Java的Excel处理工具 | Easy Excel (alibaba.com)</a></p><h3 id="1-1EasyExcel官网介绍"><a href="#1-1EasyExcel官网介绍" class="headerlink" title="1.1EasyExcel官网介绍"></a>1.1EasyExcel官网介绍</h3><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">传统操作Excel大多都是利用Apach POI进行操作的，但是POI框架并不完善，使用过程非常繁琐且有较多的缺陷：    动态操作Excel非常繁琐,对于新手来说，很难在短时间内上手;    读写时需要占用较大的内存，当数据量大时容易发生内存溢出问题（OOM）;基于上述原因，阿里开源出一款易上手，且比较节省内存的Excel操作框架：EasyExcel注意：easyExcel底层使用POI实现的；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入依赖</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">&lt;!--引入easyexcel--&gt;&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;easyexcel&lt;&#x2F;artifactId&gt;    &lt;version&gt;3.0.4&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2本地导出"><a href="#1-2本地导出" class="headerlink" title="1.2本地导出"></a>1.2本地导出</h3><p>定义表头</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Data@NoArgsConstructor@AllArgsConstructor@Builderpublic class User implements Serializable &#123;    @ExcelProperty(value &#x3D; &#123;&quot;用户名&quot;&#125;,index &#x3D; 1)    private String userName;    @ExcelProperty(value &#x3D; &#123;&quot;年龄&quot;&#125;,index &#x3D; 2)    private Integer age;    @ExcelProperty(value &#x3D; &#123;&quot;地址&quot;&#125; ,index &#x3D; 4)    private String address;    @ExcelProperty(value &#x3D; &#123;&quot;生日&quot;&#125;,index &#x3D; 3)    &#x2F;&#x2F;注意：日期格式注解由alibaba.excel提供    @DateTimeFormat(&quot;yyyy&#x2F;MM&#x2F;dd HH:mm&quot;)    private Date birthday;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导出数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEasyExcel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//组装数据</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 直接导出后，表头名称默认是实体类中的属性名称     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//不做任何注解处理时，表头名称与实体类属性名称一致</span>        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\46035\\Desktop\\ex\\用户.xls"</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"用户信息"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3本地导入"><a href="#1-3本地导入" class="headerlink" title="1.3本地导入"></a>1.3本地导入</h3><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Test   public void readExcel()&#123;       ArrayList&lt;User&gt; users &#x3D; new ArrayList&lt;&gt;();       &#x2F;&#x2F;读取数据       EasyExcel.read(&quot;C:\\Users\\46035\\Desktop\\ex\\用户.xls&quot;, User.class, new AnalysisEventListener&lt;User&gt;() &#123;           @Override           public void invoke(User o, AnalysisContext analysisContext) &#123;               System.out.println(o);               users.add(o);           &#125;           @Override           public void doAfterAllAnalysed(AnalysisContext analysisContext) &#123;               System.out.println(&quot;完成。。。。&quot;);           &#125;       &#125;).sheet().doRead();       System.out.println(users);   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4Web测试"><a href="#1-4Web测试" class="headerlink" title="1.4Web测试"></a>1.4Web测试</h3><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">功能说明：将指定页数据导出到excel表下请求地址：&#x2F;api&#x2F;quot&#x2F;stock&#x2F;export请求方式：GET入参：&#123;        page:2 &#x2F;&#x2F; 当前页        pageSize:20 &#x2F;&#x2F;每页大小    &#125;响应：excel文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-定义数据格式StockExcelDomain-java"><a href="#1-定义数据格式StockExcelDomain-java" class="headerlink" title="1.定义数据格式StockExcelDomain.java"></a>1.定义数据格式StockExcelDomain.java</h4><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Data@NoArgsConstructor@AllArgsConstructor@Builderpublic class StockExcelDomain &#123;    @ExcelProperty(value &#x3D; &#123;&quot;股票涨幅信息统计表&quot;,&quot;股票编码&quot;&#125;,index &#x3D; 0)    private String code;    @ExcelProperty(value &#x3D; &#123;&quot;股票涨幅信息统计表&quot;,&quot;股票名称&quot;&#125;,index &#x3D; 1)    private String name;    @ExcelProperty(value &#x3D; &#123;&quot;股票涨幅信息统计表&quot;,&quot;前收盘价格&quot;&#125;,index &#x3D; 2)    private BigDecimal preClosePrice;    @ExcelProperty(value &#x3D; &#123;&quot;股票涨幅信息统计表&quot;,&quot;当前价格&quot;&#125;,index&#x3D; 3)    private BigDecimal tradePrice;    @ExcelProperty(value &#x3D; &#123;&quot;股票涨幅信息统计表&quot;,&quot;涨跌&quot;&#125;,index&#x3D; 4)    private BigDecimal increase;    @ExcelProperty(value &#x3D; &#123;&quot;股票涨幅信息统计表&quot;,&quot;涨幅&quot;&#125;,index&#x3D; 5)    private BigDecimal upDown;    @ExcelProperty(value &#x3D; &#123;&quot;股票涨幅信息统计表&quot;,&quot;振幅&quot;&#125;,index&#x3D; 6)    private BigDecimal amplitude;    @ExcelProperty(value &#x3D; &#123;&quot;股票涨幅信息统计表&quot;,&quot;交易总量&quot;&#125;,index &#x3D; 7)    private BigDecimal tradeAmt;    @ExcelProperty(value &#x3D; &#123;&quot;股票涨幅信息统计表&quot;,&quot;交易总金额&quot;&#125;,index &#x3D; 8)    private BigDecimal tradeVol;    @ExcelProperty(value &#x3D; &#123;&quot;股票涨幅信息统计表&quot;,&quot;日期&quot;&#125;,index &#x3D; 9)    private String curDate;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-web接口"><a href="#2-web接口" class="headerlink" title="2.web接口"></a>2.web接口</h4><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">&#x2F;**  * 将指定页的股票数据导出到excel表下  * @param response  * @param page  当前页  * @param pageSize 每页大小  *&#x2F; void stockExport(HttpServletResponse response, Integer page, Integer pageSize);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-接口实现"><a href="#3-接口实现" class="headerlink" title="3.接口实现"></a>3.接口实现</h4><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">&#x2F;**    * 将指定页的股票数据导出到excel表下    * @param response    * @param page  当前页    * @param pageSize 每页大小    *&#x2F;   @Override   public void stockExport(HttpServletResponse response, Integer page, Integer pageSize) &#123;       try &#123;           &#x2F;&#x2F;1.设置响应数据的类型:excel           response.setContentType(&quot;application&#x2F;vnd.ms-excel&quot;);           &#x2F;&#x2F;2.设置响应数据的编码格式           response.setCharacterEncoding(&quot;utf-8&quot;);           &#x2F;&#x2F;3.设置默认的文件名称           &#x2F;&#x2F; 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系           String fileName &#x3D; URLEncoder.encode(&quot;stockRt&quot;, &quot;UTF-8&quot;);           &#x2F;&#x2F;设置默认文件名称           response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename&#x3D;&quot; + fileName + &quot;.xlsx&quot;);           &#x2F;&#x2F;4.分页查询股票数据           PageHelper.startPage(page,pageSize);           List&lt;StockUpdownDomain&gt; infos &#x3D; this.stockRtInfoMapper.stockAll();           Gson gson &#x3D; new Gson();           List&lt;StockExcelDomain&gt; excelDomains &#x3D; infos.stream().map(info -&gt; &#123;               StockExcelDomain domain&#x3D;new StockExcelDomain();               BeanUtils.copyProperties(info,domain);               return domain;           &#125;).collect(Collectors.toList());           &#x2F;&#x2F;5.导出           EasyExcel.write(response.getOutputStream(),StockExcelDomain.class).sheet(&quot;股票数据&quot;).doWrite(excelDomains);       &#125; catch (IOException e) &#123;          log.info(&quot;股票excel数据导出异常，当前页：&#123;&#125;，每页大小：&#123;&#125;，异常信息：&#123;&#125;&quot;,page,pageSize,e.getMessage());       &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadLocal</title>
      <link href="/2023/05/11/threadlocal/"/>
      <url>/2023/05/11/threadlocal/</url>
      
        <content type="html"><![CDATA[<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>来源：<a href="https://blog.csdn.net/u010445301/article/details/111322569">(114条消息) 史上最全ThreadLocal 详解（一）_倔强的不服的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/u010445301/article/details/124935802?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22124935802%22,%22source%22:%22u010445301%22%7D&ctrtid=ZiTxt">(114条消息) 史上最全ThreadLocal 详解（二）_threadlocal可以存多个值吗_倔强的不服的博客-CSDN博客</a></p><p>对大牛的总结精简部分</p><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>ThreadLocal叫做<em><strong>线程变量</strong></em>，意思是ThreadLocal中填充的变量属于<strong>当前线程</strong>，该变量对其他线程而言是隔离的,ThreadLocal为变量在每个线程中都创建了一个副本</p><ul><li>因为每个 Thread 内有自己的实例副本，<em>且该副本只能由当前 Thread 使用</em>。这是也是 ThreadLocal 命名的由来。</li><li>既然每个 Thread 有自己的实例副本，且其它 Thread 不可访问，那就<em>不存在多线程间共享的问题</em>。</li></ul><p><img src="https://img-blog.csdnimg.cn/20201217201331591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA0NDUzMDE=,size_16,color_FFFFFF,t_70" alt="img"></p><p>ThreadLocal<T>其实是与线程绑定的一个变量。ThreadLocal和Synchonized都用于解决多线程并发访问。</T></p><p>但是ThreadLocal与synchronized有本质的区别：</p><p>1、Synchronized用于线程间的数据共享，而ThreadLocal则用于线程间的数据隔离。</p><p>2、Synchronized是利用锁的机制，使变量或代码块在某一时该只能被一个线程访问。而ThreadLocal为每一个线程都提供了变量的副本，使得每个线程在某一时间访问到的并不是同一个对象，这样就隔离了多个线程对数据的数据共享。</p><p>而Synchronized却正好相反，它用于在多个线程间通信时能够获得数据共享。</p><p><strong>一句话理解ThreadLocal，threadlocl是作为当前线程中属性ThreadLocalMap集合中的某一个Entry的key值Entry（threadlocl,value），虽然不同的线程之间threadlocal这个key值是一样，但是不同的线程所拥有的ThreadLocalMap是独一无二的，也就是不同的线程间同一个ThreadLocal（key）对应存储的值(value)不一样，从而到达了线程间变量隔离的目的，但是在同一个线程中这个value变量地址是一样的。</strong></p><h3 id="2-具体方法"><a href="#2-具体方法" class="headerlink" title="2.具体方法"></a>2.具体方法</h3><h4 id="2-1-ThreadLocal的set方法："><a href="#2-1-ThreadLocal的set方法：" class="headerlink" title="2.1 ThreadLocal的set方法："></a>2.1 ThreadLocal的set方法：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//1、获取当前线程</span>       <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//2、获取线程中的属性 threadLocalMap ,如果threadLocalMap 不为空，</span>       <span class="token comment">//则直接更新要保存的变量值，否则创建threadLocalMap，并赋值</span>       <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>           map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">else</span>           <span class="token comment">// 初始化thradLocalMap 并赋值</span>           <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2ThreadLocalMap"><a href="#2-2ThreadLocalMap" class="headerlink" title="2.2ThreadLocalMap"></a>2.2ThreadLocalMap</h4><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">static class ThreadLocalMap &#123;       &#x2F;**       * The entries in this hash map extend WeakReference, using       * its main ref field as the key (which is always a       * ThreadLocal object).  Note that null keys (i.e. entry.get()       * &#x3D;&#x3D; null) mean that the key is no longer referenced, so the       * entry can be expunged from table.  Such entries are referred to       * as &quot;stale entries&quot; in the code that follows.       *&#x2F;      static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; &#123;          &#x2F;** The value associated with this ThreadLocal. *&#x2F;          Object value;           Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;              super(k);              value &#x3D; v;          &#125;      &#125;         &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">&#x2F;&#x2F;这个是threadlocal 的内部方法void createMap(Thread t, T firstValue) &#123;        t.threadLocals &#x3D; new ThreadLocalMap(this, firstValue);    &#125;      &#x2F;&#x2F;ThreadLocalMap 构造方法ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;            table &#x3D; new Entry[INITIAL_CAPACITY];            int i &#x3D; firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - 1);            table[i] &#x3D; new Entry(firstKey, firstValue);            size &#x3D; 1;            setThreshold(INITIAL_CAPACITY);        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-ThreadLocal的get方法"><a href="#2-3-ThreadLocal的get方法" class="headerlink" title="2.3 ThreadLocal的get方法"></a>2.3 ThreadLocal的get方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1、获取当前线程</span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2、获取当前线程的ThreadLocalMap</span>        <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、如果map数据不为空，</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//3.1、获取threalLocalMap中存储的值</span>            <span class="token class-name">ThreadLocalMap<span class="token punctuation">.</span>Entry</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果是数据为null，则初始化，初始化的结果，TheralLocalMap中存放key值为threadLocal，值为null</span>        <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token class-name">T</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">T</span> value <span class="token operator">=</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4ThreadLocal的remove方法"><a href="#2-4ThreadLocal的remove方法" class="headerlink" title="2.4ThreadLocal的remove方法"></a>2.4ThreadLocal的remove方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadLocalMap</span> m <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            m<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> remove方法，直接将ThrealLocal 对应的值从当前相差Thread中的ThreadLocalMap中删除。为什么要删除，这涉及到内存泄露的问题。</p><p>实际上 ThreadLocalMap 中使用的 key 为 ThreadLocal 的弱引用，弱引用的特点是，如果这个对象只存在弱引用，那么在下一次垃圾回收的时候必然会被清理掉。</p><p>所以如果 ThreadLocal 没有被外部强引用的情况下，在垃圾回收的时候会被清理掉的，这样一来 ThreadLocalMap中使用这个 ThreadLocal 的 key 也会被清理掉。但是，value 是强引用，不会被清理，这样一来就会出现 key 为 null 的 value。</p><p>ThreadLocal其实是与线程绑定的一个变量，如此就会出现一个问题：如果没有将ThreadLocal内的变量删除（remove）或替换，它的生命周期将会与线程共存。通常线程池中对线程管理都是采用线程复用的方法，在线程池中线程很难结束甚至于永远不会结束，这将意味着线程持续的时间将不可预测，甚至与JVM的生命周期一致。举个例字，如果ThreadLocal中直接或间接包装了集合类或复杂对象，每次在同一个ThreadLocal中取出对象后，再对内容做操作，那么内部的集合类和复杂对象所占用的空间可能会开始持续膨胀。<br><img src="https://img-blog.csdnimg.cn/202012181111507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA0NDUzMDE=,size_16,color_FFFFFF,t_70" alt="img"></p><p>从这个图中我们可以非常直观的看出，ThreadLocalMap其实是Thread线程的一个属性值，而ThreadLocal是维护ThreadLocalMap</p><p>这个属性指的一个工具类。Thread线程可以拥有多个ThreadLocal维护的自己线程独享的共享变量（这个共享变量只是针对自己线程里面共享）</p><h3 id="3-应用"><a href="#3-应用" class="headerlink" title="3.应用"></a>3.应用</h3><p>场景一 存储用户Session</p><p>场景二 数据库连接，处理数据库事务</p><p>场景三 数据跨层传递（controller,service, dao）</p><p>场景四 Spring使用ThreadLocal解决线程安全问题 </p><h3 id="4-ThreadLocal-使用原理"><a href="#4-ThreadLocal-使用原理" class="headerlink" title="4.ThreadLocal 使用原理"></a>4.ThreadLocal 使用原理</h3><p><img src="https://img-blog.csdnimg.cn/e82f2120a5d34632bad3ca46ad7f1eb8.png" alt="img"></p><p>从图中我们可以当线程使用threadlocal 时，<strong>是将threadlocal当做当前线程thread的属性ThreadLocalMap 中的一个Entry的key值，实际上存放的变量是Entry的value值，我们实际要使用的值是value值。</strong>value值为什么不存在并发问题呢，因为它只有一个线程能访问。threadlocal我们可以当做一个索引看待，可以有多个threadlocal 变量，不同的threadlocal对应于不同的value值，他们之间互不影响。ThreadLocal为每一个线程都提供了变量的副本，使得每个线程在某一时间访问到的并不是同一个对象，这样就隔离了多个线程对数据的数据共享。</p><h3 id="5-内存泄漏问题"><a href="#5-内存泄漏问题" class="headerlink" title="5.内存泄漏问题"></a>5.内存泄漏问题</h3><p> Entry将ThreadLocal作为Key，值作为value保存，它继承自WeakReference，注意构造函数里的第一行代码super(k)，这意味着ThreadLocal对象是一个「弱引用」。可以看图1.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** The value associated with this ThreadLocal. */</span>    <span class="token class-name">Object</span> value<span class="token punctuation">;</span>    <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> k<span class="token punctuation">,</span> <span class="token class-name">Object</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要两个原因<br>1 . 没有手动删除这个 Entry<br>2 . CurrentThread 当前线程依然运行第一点很好理解，只要在使用完下 ThreadLocal ，调用其 remove 方法删除对应的 Entry ，就能避免内存泄漏。<br>        第二点稍微复杂一点，由于ThreadLocalMap 是 Thread 的一个属性，被当前线程所引用，所以ThreadLocalMap的生命周期跟 Thread 一样长。如果threadlocal变量被回收，那么当前线程的threadlocal 变量副本指向的就是key&#x3D;null, 也即entry(null,value),那这个entry对应的value永远无法访问到。实际私用ThreadLocal场景都是采用线程池，而线程池中的线程都是复用的，这样就可能导致非常多的entry(null,value)出现，从而导致内存泄露。<br>综上， ThreadLocal 内存泄漏的根源是：<br>    <strong>由于ThreadLocalMap 的生命周期跟 Thread 一样长，对于重复利用的线程来说，如果没有手动删除（remove()方法）对应 key 就会导致entry(null，value)的对象越来越多，从而导致内存泄漏．</strong></p><p>理解下就是，实际情况下，线程是复用的，如果没有手动remove的话，就会被GC垃圾回收机制回收成一个空键Entry对象，这样的对象太多会导致内存泄露</p><h3 id="6-其他"><a href="#6-其他" class="headerlink" title="6.其他"></a>6.其他</h3><h4 id="3-1-key-如果是强引用"><a href="#3-1-key-如果是强引用" class="headerlink" title="3.1 key 如果是强引用"></a>3.1 key 如果是强引用</h4><p>​     那么为什么ThreadLocalMap的key要设计成弱引用呢？其实很简单，如果key设计成强引用且没有手动remove()，那么key会和value一样伴随线程的整个生命周期。</p><p>   1、假设在业务代码中使用完ThreadLocal, ThreadLocal ref被回收了，但是因为threadLocalMap的Entry强引用了threadLocal(key就是threadLocal), 造成ThreadLocal无法被回收。在没有手动删除Entry以及CurrentThread(当前线程)依然运行的前提下, 始终有强引用链CurrentThread Ref → CurrentThread →Map(ThreadLocalMap)-&gt; entry, Entry就不会被回收( Entry中包括了ThreadLocal实例和value), 导致Entry内存泄漏也就是说: ThreadLocalMap中的key使用了强引用, 是无法完全避免内存泄漏的。请结合图1看。</p><h4 id="3-2-那么为什么-key-要用弱引用"><a href="#3-2-那么为什么-key-要用弱引用" class="headerlink" title="3.2  那么为什么 key 要用弱引用"></a>3.2  那么为什么 key 要用弱引用</h4><p>​     事实上，在 ThreadLocalMap 中的set&#x2F;getEntry 方法中，会对 key 为 null（也即是 ThreadLocal 为 null ）进行判断，如果为 null 的话，那么会把 value 置为 null 的．这就意味着使用threadLocal , CurrentThread 依然运行的前提下．就算忘记调用 remove 方法，弱引用比强引用可以多一层保障：弱引用的 ThreadLocal 会被回收．对应value在下一次 ThreadLocaI 调用 get()&#x2F;set()&#x2F;remove() 中的任一方法的时候会被清除，从而避免内存泄漏．</p><h4 id="3-3如何正确的使用ThreadLocal"><a href="#3-3如何正确的使用ThreadLocal" class="headerlink" title="3.3如何正确的使用ThreadLocal"></a>3.3如何正确的使用ThreadLocal</h4><p> 1、将ThreadLocal变量定义成private static的，这样的话ThreadLocal的生命周期就更长，由于一直存在ThreadLocal的强引用，所以ThreadLocal也就不会被回收，也就能保证任何时候都能根据ThreadLocal的弱引用访问到Entry的value值，然后remove它，防止内存泄露</p><p> 2、每次使用完ThreadLocal，都调用它的remove()方法，清除数据。</p>]]></content>
      
      
      <categories>
          
          <category> 后端开发应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基本指令</title>
      <link href="/2023/05/06/linux/"/>
      <url>/2023/05/06/linux/</url>
      
        <content type="html"><![CDATA[<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p>Vim 文件名字(一般模式) -&gt; i(进入编辑模式) -&gt; esc(退出编辑模式) -&gt; :(命令模式) -&gt; wq保存退出</p><p><strong>一般模式</strong></p><p>1.拷贝当前行 yy,拷贝当前行向下的5行 5yy,</p><p>2.删除当前行 dd，删除当前行向下的5行 5dd</p><p>3.使用 p 粘贴</p><p>4.编辑&#x2F;etc&#x2F;profile 文件，使用快捷键到该文档的最末行[G]和最首行[gg]&#x3D;&#x3D;</p><p>5.在一个文件中输入“hello”，然后又撤销这个动作 [u]</p><p>6.编辑&#x2F;etc&#x2F;profile文件，并将光标移动到20行 [shift+g]</p><p><strong>命令模式</strong></p><p>1.在文件中查找某单词【&#x2F;关键字，回车 查找，输入n就是查找下一个】</p><p>2.设置文本的行号，取消文件的行号.【:set nu 和 :set nonu】</p><h2 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h2><p><strong>开关机指令</strong></p><p><strong>sync命令，把内存中的数据写到磁盘中</strong></p><table><thead><tr><th>shutdown -h now</th><th>立刻进行关机</th></tr></thead><tbody><tr><td>shutdown -h 1</td><td>一分钟后（默认）关机（会发送信息到每个用户终端）</td></tr><tr><td>shutdown -r now</td><td>现在重新启动计算机</td></tr><tr><td>halt</td><td>关机（与上述类似）</td></tr><tr><td>reboot</td><td>现在重新启动计算机</td></tr><tr><td>sync</td><td>把内存的数据同步到磁盘</td></tr></tbody></table><p><strong>用户组管理</strong></p><p>1.su 用户名”命令来切换程系统管理员身份。</p><p>2.在提示符下输入logout退出登录</p><p>1.1创建用户(cd &#x2F;home路径下)</p><p>useradd 用户名</p><p>1.当创建用户成功后，会自动的创建和用户同名的家目录。如:&#x2F;home&#x2F;zhangsan</p><p>2.也可以通过useradd -d指定目录 新的用户名，给新创建的用户指定家目录。如：useradd -d &#x2F;home&#x2F;test king</p><p>1.2修改密码</p><p>passwd 用户名</p><p>1,3删除用户</p><p>userdel 用户名</p><p>保留家目录，语法：userdel 用户名</p><p>不保留家目录，语法：userdel -r 用户名</p><p>1.4查询用户</p><p>Id 用户名</p><p>1.5切换用户</p><p>以通过su 用户名，切换到高权限用户，比如root</p><p>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要</p><p>当需要返回到原来用户时，使用exit&#x2F;logout指令</p><p>1.6查看当前用户</p><p>Who am i</p><p>1.7用户组管理</p><p>新增组：指令：groupadd 组名</p><p>删除组：指令：groupdel 组名</p><p>增加用户时并加上组：指令：useradd -g 用户组 用户名</p><p>修改组：指令：usermod -g 用户组 用户名</p><p>相关文件夹</p><p><strong>&#x2F;etc&#x2F;passwd****文件</strong></p><p><strong>相关用户信息</strong></p><p><strong>每行的含义：用户名：口令：用户标识号：组标识号：注释性描述：主目录：登录****shell</strong></p><p><img src="/Shirasawa-zs/Shirasawa-zs.github.io/2023/05/06/linux/酸菜鱼\MyBlog\source_posts\自动装配原理\clip_image002.png" alt="img"></p><p><strong>&#x2F;etc&#x2F;shadow****文件</strong></p><p><strong>登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</strong></p><p><img src="/Shirasawa-zs/Shirasawa-zs.github.io/2023/05/06/linux/酸菜鱼\MyBlog\source_posts\自动装配原理\clip_image004.jpg" alt="img"></p><p><strong>&#x2F;etc&#x2F;group****文件</strong></p><p><strong>组名：口令：组标识号：组内用户列表</strong></p><p><img src="/Shirasawa-zs/Shirasawa-zs.github.io/2023/05/06/linux/酸菜鱼\MyBlog\source_posts\自动装配原理\clip_image006.jpg" alt="img"></p><p><strong>补充组的分类：所有者，所在组，其他组</strong></p><p><strong>1.8**<strong>文件</strong></strong>&#x2F;**<strong>目录的所有者</strong></p><p><strong>所有者</strong></p><p><strong>查看文件的所有者指令</strong><strong>:</strong> <strong>ls-ahl</strong></p><p><strong>修改文件的所有者指令</strong><strong>:</strong> <strong>chown</strong> <strong>用户名</strong> <strong>文件名</strong></p><p><strong>所在组</strong></p><p><strong>查看文件</strong>**&#x2F;<strong><strong>目录所在组：</strong></strong>ls -ahl**</p><p>修改文件&#x2F;目录所在的组：<strong>chgrp</strong> <strong>组名</strong> <strong>文件名</strong></p><p><strong>其他组改变组的操作</strong></p><p><strong>usermod -g</strong> <strong>组名</strong> <strong>用户名</strong></p><p>usermod -d 目录名 用户名 改变该用户登陆的初始目录</p><h2 id="运行指定和目录指令"><a href="#运行指定和目录指令" class="headerlink" title="运行指定和目录指令"></a><strong>运行指定和目录指令</strong></h2><p>运行指令</p><table><thead><tr><th>0</th><th>关机</th></tr></thead><tbody><tr><td>1</td><td>单用户【找回丢失密码】</td></tr><tr><td>2</td><td>多用户状态没有网络服务【不常用：Linux应用为服务器需要网络】</td></tr><tr><td>3</td><td>多用户状态有网络服务【常用：不带图片节省资源且有网络】</td></tr><tr><td>4</td><td>系统未使用保留给用户</td></tr><tr><td>5</td><td>图形界面</td></tr><tr><td>6</td><td>系统重启</td></tr></tbody></table><p>multi-user.target:analogous to runlevel 3：【多用户】</p><p>graphical.target:analogous to runlevel 5：【图形化】</p><p>查看当前运行级别指令：systemctl get-default</p><p>设置想要的默认级别：systemctl set-default TARGET.target【后面的TARGET为上诉的红色字体multi-user.target或graphical.target】</p><p>目录指令</p><p>隐藏文件是以<code>&quot;.&quot;</code>开头的</p><p>man[命令或配置文件]（功能描述：获得帮助信息）</p><p><code>help``命令</code>（功能描述：获得shell内置命令的帮助信息）</p><p><strong>1.pwd</strong></p><p>基本语法：pwd</p><p>功能：显示当前工作目录的绝对路径</p><p><strong>2.ls指令</strong></p><p>基本语法：ls [选项][目录或文件]</p><p>常见选项为</p><p>-a：显示当前目录所有的文件和目录，包括隐藏的</p><p>-l：以列表的方式显示信息</p><p><strong>3.cd指令</strong></p><p>基本语法：cd[参数]</p><p>功能：切换到指定目录</p><p>cd ~或者cd: 表示回到自己的家目录</p><p>cd..表示回到当前目录的上一级目录</p><p><strong>4.mkdir指令</strong></p><p>基本语法：mkdir[选项]要创建的目录</p><p>选项包括p,主要功能为创建多级目录</p><p>功能：创建文件夹</p><p><strong>5.rmdir指令</strong></p><p>基本语法：rmdir[选项] 要删除的空目录</p><p>功能：删除空目录</p><p>注意细节：删除的是空目录，如果目录下由内容是无法删除的</p><p>想要删除非空目录，需要使用指令:rm -rf指令 要输出的目录(改行为较危险)</p><p><strong>6.touch指令</strong></p><p>基本语法：touch 文件名称</p><p>功能：创建空文件</p><p><strong>7.cp指令</strong></p><p>基本语法：cp[选项]source dest</p><p>常见选项：-r:递归复制整个文件夹</p><p>功能：拷贝文件到指定目录</p><p>问题：如果出现一个文件夹复制到另外一个目录中后，文件存在覆盖问题。但是Liunx会提示用户是否需要进行覆盖。</p><p>使用：\cp[选项]source dest</p><p><strong>8.rm指令</strong></p><p>基本语法：rm[选项] 要删除的文件或目录</p><p>常用选项：-r:递归删除整个文件夹；-f：强制删除且不提示</p><p>如果不想要提示，则使用<code>rm -rf</code>【谨慎使用】</p><p><strong>9.mv指令</strong></p><p>基本语法：</p><p>重命名：mv oldNameFile newNameFile</p><p>移动文件：mv &#x2F;temp&#x2F;movefile &#x2F;targetFolder</p><p>注意细节：重命名表示移动到相同目录下，移动文件表示移动到别的目录下</p><p>我们同样也可以移动并重命名</p><p><strong>10.cat指令</strong></p><p>基本语法：cat [选项][要查看的文件]</p><p>常用选项：-n表示显示行号</p><p>功能描述：用于查看文件内容</p><p>注意细节：</p><p>1.vim同样也可以查看文件，但是vim可以修改，cat不能进行修改，相对一些重要文件配置只进行cat查看即可</p><p>2.为了浏览方便一般会带上管道指令| more</p><p><strong>11.more指令</strong></p><p>基本语法：more 要查看的文件</p><p>功能描述：基于VI编辑器的文本过滤器。它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键</p><table><thead><tr><th><strong>操作</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>空格键</td><td>代表向下翻一页</td></tr><tr><td>Enter</td><td>代表向下翻一行</td></tr><tr><td>q</td><td>代表立刻离开more不再显示改文件内容</td></tr><tr><td>Ctrl+F</td><td>向下滚动一屏</td></tr><tr><td>Ctrl+B</td><td>返回上一屏</td></tr><tr><td>-</td><td>输出当前行的行号</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr></tbody></table><p>More test.txt</p><p><strong>12.less指令【查看大文件】</strong></p><p>基本语法：less 要查看的文件</p><p>功能描述：用来分屏查看文件内容，与more指令类似，但是比more指令更加强大，支持各种显示重点。less指令在显示文件内容是，并不是一次将整个文件加载后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率</p><table><thead><tr><th><strong>操作</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>空格键</td><td>往下翻动一页</td></tr><tr><td>【pagedown】</td><td>向下翻动一页</td></tr><tr><td>【pageup】</td><td>向上翻动一页</td></tr><tr><td>&#x2F;字串</td><td>向下搜寻【字串】的功能；n：向下查找；N：向上查找</td></tr><tr><td>?字串</td><td>向上搜寻【字串】的功能；n：向上查找；N：向下查找</td></tr><tr><td>q</td><td>离开less这个程序</td></tr></tbody></table><p><strong>13.echo指令</strong></p><p>基本语法：echo[选项] [输出内容]</p><p>功能描述：echo输出内容到控制台</p><p><strong>14.head指令</strong></p><p>基本语法：</p><p>查看文件头10行内容：head 文件</p><p>查看文件头5行内容：head -n 5 文件</p><p>功能描述：用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容</p><p><strong>15.tail指令</strong></p><p>基本语法：</p><p>查看文件尾10行内容：tail 文件</p><p>查看文件尾5行内容：tail -n 5 文件</p><p>实时追踪该文档的所有更新：tail -f</p><p>功能描述：用于输出文件尾部内容，默认情况下tail指令显示文件的前10行内容</p><p><strong>16.&gt;指令和&gt;&gt;指令</strong></p><p>基本语法：</p><p>列表的内容写入当某文件中（覆盖写）：ls -l &gt;文件</p><p>列表的内容追加到某文件的末尾：ls -al &gt;&gt; 文件</p><p>将文件1的内容覆盖到文件2：cat 文件1&gt;文件2</p><p>控制台内容追加到文件中:echo “内容” &gt;&gt; 文件</p><p>注意细节：&gt;表示重定向（覆盖）,&gt;&gt;表示追加；注意上面ls -l和ls -al是上面ls指令里面的内容</p><p><strong>17.ln指令</strong></p><p>基本语法：</p><p>给原文件创建一个软链接：ln -s[原文件或目录][软连接名]</p><p>功能描述：软链接也成为符号链接，类似于windows中的快捷方式，主要存放了链接其他文件的路径</p><p><strong>18.history指令</strong></p><p>基本语法：</p><p>查询所有历史命令：history</p><p>显示最近十条历史命令：history 10</p><p>执行编号为5的指令：!5</p><p>功能描述：</p><p>查看已经执行过历史命令，也可以执行历史命令</p><h2 id="日期和搜索定位指令"><a href="#日期和搜索定位指令" class="headerlink" title="日期和搜索定位指令"></a>日期和搜索定位指令</h2><p>日期指令</p><p><strong>1.Date指令</strong></p><p><strong>date：显示当前时间</strong></p><p><strong>date+%Y：显示当前年份</strong></p><p><strong>date+%m：显示当前月份</strong></p><p><strong>date+%d：显示当前哪一天</strong></p><p><strong>date”+%Y-%m-%d %H:%M:%S”：显示年月日时分秒</strong></p><p><strong>2.date指令——设置日期</strong></p><p>基本语法;date -s 字符串时间</p><p>如：设置系统当前时间为，date -s “2021-1-1 12:22:22”</p><p><strong>3.cal指令——查看日历</strong></p><p>基本语法：cal [选项]</p><p>功能描述：</p><p>不加选项，显示本月日历</p><p>若显示2020年日历：cal 2021</p><p>搜索定位指令</p><p><strong>1.find递归查询</strong></p><p>find [搜索范围][选项]</p><table><thead><tr><th><strong>选项</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>-name&lt;查询方式&gt;</td><td>按照指定的文件名查找模式查找文件</td></tr><tr><td>-user&lt;用户名&gt;</td><td>查找属于指定用户名所有文件</td></tr><tr><td>-size&lt;文件大小&gt;</td><td>按照指定的文件大小查找文件</td></tr></tbody></table><p>其中size的文件大小中</p><p>+200m：大于200m的文件。。。-200m：小于200m的文件。。。200m：等于200m文件</p><p><strong>2. locate指令</strong></p><p>由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locate数据库</p><p>Locate 指令</p><p><strong>3.which指令</strong></p><p>基本语法：which 某指令</p><p>功能描述：可以查看某个指令在哪个目录下，比如查看ls指令，可以使用which ls</p><p><strong>4.grep指令</strong></p><p>\1. 概述</p><p>grep指令过滤查找，管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理</p><p>\2. 基本语法</p><p>grep[选项]查找内容 源文件</p><table><thead><tr><th><strong>选项</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>-n</td><td>显示匹配行及行号</td></tr><tr><td>-i</td><td>忽略字母大小写</td></tr></tbody></table><p><strong>解压指令</strong></p><p>gzip 文件：压缩文件，只能将文件压缩为*.gz文件</p><p>gunzip文件.gz：解压缩文件命令</p><p>zip [选项]XXX.zip 将要压缩的内容：压缩和目录的命令</p><p>unzip[选项]XXX.zip：解压缩文件</p><p>zip常见选项</p><p>-r：递归压缩，即压缩目录</p><p>unzip常见选项</p><p>-d&lt;目录&gt;： 指定解压后文件的存放目录</p><p>tar[选项] XXX.tar.gz 打包的内容</p><table><thead><tr><th><strong>选项</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的我呢见名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr></tbody></table><h2 id="权限介绍"><a href="#权限介绍" class="headerlink" title="权限介绍"></a>权限介绍</h2><p>其中第0行中一共有9位，对这9位进行分析</p><p><strong>第0位：确定文件类型（d,-,l,c,b）</strong></p><p>l：表示链接，相当于window中的快捷方式；</p><p>-：表示普通文件，如txt文件等</p><p>d：表示目录，相当于windows中的文件夹；</p><p>c：表示字符设备文件，鼠标，键盘等；</p><p>b：表示是块设备，如硬盘等</p><p><strong>第1-3位：确定所有者（该文件的所有者） 拥有该文件的权限——User</strong></p><p><strong>第4-6位：确定所属组（同用户组的）拥有该文件的权限——Group</strong></p><p><strong>第7-9位：确定其他用户拥有该文件的权限——Other</strong></p><p><strong>rwx作用到文件</strong></p><p>【r】代表可读（read）：可以读取，查看</p><p>【w】代表可写（write）：可以修改，但是不代表可以删除文件，删除一个文件的前提条件是对该文件所在目录有写权限，才能删除该文件</p><p>【x】代表可执行（execute）：可以被执行</p><p><strong>rwx作用到目录</strong></p><p>【r】代表可读（read）：可以读取，ls查看目录内容</p><p>【w】代表可读（write）：可以修改，对目录内创建+删除+重命名目录</p><p>【x】代表可读（execute）：可以进入该目录</p><p><strong>修改权限</strong></p><p><strong>Chmod改变文件或目录权限</strong></p><p><strong>例1</strong></p><p>u：所有者 g：所在组 o：其他人 a：所有人（ugo的总和）</p><p>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x 文件&#x2F;目录名（表示直接给权限）</p><p>chmod o+w 文件&#x2F;目录名(表示单独添加w权限)</p><p>chmod a-x 文件&#x2F;目录名（表示去掉x权限）</p><p>上诉的中&#x3D;：赋予权限；+：单独赋予权限；-：去掉某一权限</p><p><strong>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;rx abc.txt</strong></p><p><strong>chmod u-x,o+w abc.txt</strong></p><p><strong>例2</strong></p><p>r &#x3D;4 w&#x3D;2 x&#x3D;1</p><p>rwx&#x3D;r+w+x&#x3D;7</p><p>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x 文件目录名相当于 chmod 751 文件目录名</p><p><strong>chmod 755 &#x2F;home&#x2F;abc.txt</strong></p><p><strong>2.修改文件&#x2F;目录所有者-chown</strong></p><p>chown newowner 文件&#x2F;目录名：改变所有者</p><p>chown newowner:newgroup 文件&#x2F;目录：改变所有者和所在组</p><p>-R：如果是目录 则使其下所有子文件或目录递归生效</p><p><strong>3.修改文件&#x2F;目录所在组-chgrp</strong></p><p>chgrp newgroup 文件&#x2F;目录：改变所在组</p><p>该类问题有个特征</p><p>同组的用户，用户一创建一个文件，给予用户二一个w的操作，</p><p>用户二并没有进入该文件目录的权限。</p><p>因为在用户一的目录下，并没有给所在组进行权限的设置。</p><p>用户一设置的仅仅是对该文件的权限并没有给予进入该文件的目录权限</p><p>如果对一个目录夺取r（读）的权限，就不能使用ls展示该目录下的东西，但是对该文件有e（执行）的权限，依然可以执行，如执行cd指令</p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>ps命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加任何参数</p><p>ps-a：显示当前终端的所有进程信息</p><p>ps-u：以用户的格式显示进程信息</p><p>ps-x：显示后台进程运行参数</p><p>ps-aux|grey xxx。表示是否有xxx服务</p><p><img src="/Shirasawa-zs/Shirasawa-zs.github.io/2023/05/06/linux/酸菜鱼\MyBlog\source_posts\自动装配原理\clip_image008.png" alt="在这里插入图片描述"></p><p>ps -ef：以全格式显示当前所有的进程</p><p>kill [选项] 进程号：通过进程号杀死进程</p><p>killall 进程名称：通过进程名杀死进程，也支持通配符，这里系统因负载过大而变得很慢时有用</p><p>-9:表示强迫进程立即停止</p><h2 id="服务器监控"><a href="#服务器监控" class="headerlink" title="服务器监控"></a>服务器监控</h2><p>指令：systemctl[start|stop|restart|status]服务名</p><p>systemctl指令管理的服务在 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system 查看</p><p>systemctl list-unit-files[| grep 服务名]：查看服务开机启动状态，grep可以进行过滤</p><p>systemctl enable 服务名：设置服务开机启动</p><p>systemctl disable 服务名：关闭服务开机启动</p><p>systemctl is-enabled 服务名：查询某个服务是否是自启动的</p><p>&#x2F;&#x2F;查看状态</p><p>systemctl status firewalld</p><p>&#x2F;&#x2F;关闭防火墙</p><p>systemctl stop firewalld</p><p>&#x2F;&#x2F;启动防火墙</p><p>systemctl start firewalld</p><p>打开端口：firewall-cmd–permanent–add-port &#x3D; 端口号&#x2F;协议</p><p>关闭端口：firewall-cmd–pernament–remove-port&#x3D;端口号&#x2F;协议</p><p>重新载入，才能生效：firewall-cmd–reload</p><p>查询端口是否开放：firewall-cmd–query-port&#x3D;端口&#x2F;协议</p><p>top [选项]</p><table><thead><tr><th><strong>选项</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>-d秒数</td><td>指定top命令每隔几秒更新。默认是3秒</td></tr><tr><td>i</td><td>使top不显示任何闲置或者僵死进程</td></tr><tr><td>p</td><td>通过指定监控进程ID来仅仅监控某个进程的状态</td></tr></tbody></table><p>netstat [选项]</p><p>-an：按一定顺序排列输出</p><p>-p：显示那个进程在调用</p><p>netstat -anp | grep sshd</p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb02(黑马笔记版)</title>
      <link href="/2023/04/20/javaweb02/"/>
      <url>/2023/04/20/javaweb02/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>最近复习到了JavaWeb的知识，刷视频的效率实在低的吓人，所以打算以笔记的形式进行复习，复习的笔记选择了黑马培训班的笔记，学习方式是通过看笔记 + 做测试来实现，所以这是一篇偏转载的博客。里面大部分文字性知识来自黑马的笔记。</p><p>学习目标</p><blockquote><ul><li>掌握Request对象的概念与使用</li><li>掌握Response对象的概念与使用</li><li>能够完成用户登录注册案例的实现</li><li>能够完成SqlSessionFactory工具类的抽取</li></ul></blockquote><h1 id="3-Request和Response的概述"><a href="#3-Request和Response的概述" class="headerlink" title="3.Request和Response的概述"></a>3.Request和Response的概述</h1><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1. service方法的两个参数request和response是由tomcat创建的void service(ServletRequest var1, ServletResponse var2)2. request 表示请求数据, tomcat将浏览器发送过来的请求数据解析并封装到request对象中servlet开发者可以通过request对象获得请求数据3. response 表示响应数据,服务器发送给浏览器的数据servlet开发者可以通过response对象设置响应数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Request是请求对象，Response是响应对象。这两个对象在我们使用Servlet的时候有看到：</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420164543.png"></p><p>此时，我们就需要思考一个问题request和response这两个参数的作用是什么?</p><ul><li>request:&#x3D;&#x3D;获取&#x3D;&#x3D;请求数据<ul><li>浏览器会发送HTTP请求到后台服务器[Tomcat]</li><li>HTTP的请求中会包含很多请求数据[请求行+请求头+请求体]</li><li>后台服务器[Tomcat]会对HTTP请求中的数据进行解析并把解析结果存入到一个对象中</li><li>所存入的对象即为request对象，所以我们可以从request对象中获取请求的相关参数</li><li>获取到数据后就可以继续后续的业务，比如获取用户名和密码就可以实现登录操作的相关业务</li></ul></li><li>response:&#x3D;&#x3D;设置&#x3D;&#x3D;响应数据<ul><li>业务处理完后，后台就需要给前端返回业务处理的结果即响应数据</li><li>把响应数据封装到response对象中</li><li>后台服务器[Tomcat]会解析response对象,按照[响应行+响应头+响应体]格式拼接结果</li><li>浏览器最终解析结果，把内容展示在浏览器给用户浏览</li></ul></li></ul><p>对于上述所讲的内容，我们通过一个案例来初步体验下request和response对象的使用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"helloServlet"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"/hello-servlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用request对象 获取请求数据</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//url?name=zhangsan</span>        <span class="token comment">//使用response对象 设置响应数据</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",欢迎您！&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Post..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><p>在这节中，我们主要认识了下request对象和reponse对象:</p><ul><li>request对象是用来封装浏览器请求tomcat服务器数据的对象</li><li>response对象是用来封装tomcat服务器响应给浏览器的数据的对象</li></ul><p>目前我们只知道这两个对象是用来干什么的，那么它们具体是如何实现的，就需要我们继续深入的学习。接下来，就先从Request对象来学习,主要学习下面这些内容:</p><ul><li><p>request继承体系</p></li><li><p>request获取请求参数</p></li><li><p>request请求转发</p></li></ul><h1 id="4-Request"><a href="#4-Request" class="headerlink" title="4.Request"></a>4.Request</h1><h3 id="4-1-Request继承体系"><a href="#4-1-Request继承体系" class="headerlink" title="4.1 Request继承体系"></a>4.1 Request继承体系</h3><p>在学习这节内容之前，我们先思考一个问题，前面在介绍Request和Reponse对象的时候，比较细心的同学可能已经发现：</p><ul><li>当我们的Servlet类实现的是Servlet接口的时候，service方法中的参数是ServletRequest和ServletResponse</li><li>当我们的Servlet类继承的是HttpServlet类的时候，doGet和doPost方法中的参数就变成HttpServletRequest和HttpServletReponse</li></ul><p>那么，</p><ul><li>ServletRequest和HttpServletRequest的关系是什么?</li><li>request对象是有谁来创建的?</li><li>request提供了哪些API,这些API从哪里查?</li></ul><p>首先，我们先来看下Request的继承体系:</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420165850.png"></p><p>上图中可以看出，ServletRequest和HttpServletRequest都是Java提供的</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420170052.png"></p><p>所以ServletRequest和HttpServletRequest是继承关系，并且两个都是接口，接口是无法创建对象，这个时候就引发了下面这个问题:</p><p><strong>这些参数中的对象由谁创建</strong></p><p>这个时候，我们就需要用到Request继承体系中的<code>RequestFacade</code>:</p><ul><li>该类实现了HttpServletRequest接口，也间接实现了ServletRequest接口。</li><li>Servlet类中的service方法、doGet方法或者是doPost方法最终都是由Web服务器[Tomcat]来调用的，所以Tomcat提供了方法参数接口的具体实现类，并完成了对象的创建</li><li>要想了解RequestFacade中都提供了哪些方法，我们可以直接查看JavaEE的API文档中关于ServletRequest和HttpServletRequest的接口文档，因为RequestFacade实现了其接口就需要重写接口中的方法</li></ul><p>对于上述结论，要想验证，可以编写一个Servlet，在方法中把request对象打印下，就能看到最终的对象是不是RequestFacade,代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><ul><li>Request的继承体系为ServletRequest(最大父接口)–&gt;HttpServletRequest(可以处理http协议的请求接口)–&gt;RequestFacade(tomcat定义的实现类)</li><li>Tomcat需要解析请求数据，封装为request对象,并且创建request对象传递到service方法</li><li>使用request对象，可以查阅JavaEE API文档的HttpServletRequest接口中方法说明</li></ul><h3 id="4-2-Request获取请求数据"><a href="#4-2-Request获取请求数据" class="headerlink" title="4.2 Request获取请求数据"></a>4.2 Request获取请求数据</h3><p>HTTP请求数据总共分为三部分内容，分别是&#x3D;&#x3D;请求行、请求头、请求体&#x3D;&#x3D;，对于这三部分内容的数据，分别该如何获取，首先我们先来学习请求行数据如何获取?</p><h4 id="4-2-1-获取请求行数据"><a href="#4-2-1-获取请求行数据" class="headerlink" title="4.2.1 获取请求行数据"></a>4.2.1 获取请求行数据</h4><p>请求行包含三块内容，分别是<code>请求方式</code>、<code>请求资源路径</code>、<code>HTTP协议及版本</code></p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420170455.png"></p><p>对于这三部分内容，request对象都提供了对应的API方法来获取，具体如下:</p><ul><li>获取请求方式: <code>GET</code></li></ul><pre class="line-numbers language-none"><code class="language-none">String getMethod()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>获取虚拟目录(项目访问路径): <code>/request-demo</code></li></ul><pre class="line-numbers language-none"><code class="language-none">String getContextPath()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>获取URL(统一资源定位符): <code>http://localhost:8080/request-demo/req1</code></li></ul><pre class="line-numbers language-none"><code class="language-none">StringBuffer getRequestURL()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>获取URI(统一资源标识符): <code>/request-demo/req1</code></li></ul><pre class="line-numbers language-none"><code class="language-none">String getRequestURI()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>获取请求参数(GET方式): <code>username=zhangsan&amp;password=123</code></li></ul><pre class="line-numbers language-none"><code class="language-none">String getQueryString()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>介绍完上述方法后，咱们通过代码把上述方法都使用下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// String getMethod()：获取请求方式： GET</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//GET</span>        <span class="token comment">// String getContextPath()：获取虚拟目录(项目访问路径)：/request-demo</span>        <span class="token class-name">String</span> contextPath <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>contextPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// StringBuffer getRequestURL(): 获取URL(统一资源定位符)：http://localhost:8080/request-demo/req1</span>        <span class="token class-name">StringBuffer</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// String getRequestURI()：获取URI(统一资源标识符)： /request-demo/req1</span>        <span class="token class-name">String</span> uri <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// String getQueryString()：获取请求参数（GET方式）： username=zhangsan</span>        <span class="token class-name">String</span> queryString <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动服务器，访问<code>http://localhost:8080/request-demo/req1?username=zhangsan&amp;passwrod=123</code></p><p>输出结果</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">GET/demo_war_explodedhttp://localhost:8080/demo_war_exploded/req1/demo_war_exploded/req1username=zhangsan&amp;passwrod=123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-获取请求头数据"><a href="#4-2-2-获取请求头数据" class="headerlink" title="4.2.2 获取请求头数据"></a>4.2.2 获取请求头数据</h4><p>对于请求头的数据，格式为<code>key: value</code>如下:</p><p>所以根据请求头名称获取对应值的方法为:</p><pre class="line-numbers language-none"><code class="language-none">String getHeader(String name) 参数name书写的是请求头冒号左边的内容例如：User-AgentUser-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;96.0.4664.110 Safari&#x2F;537.36<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来，在代码中如果想要获取客户端浏览器的版本信息，则可以使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * request 获取请求数据 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取请求头: user-agent: 浏览器的版本信息</span>        <span class="token class-name">String</span> agent <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>agent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新启动服务器后，<code>http://localhost:8080/request-demo/req1?username=zhangsan&amp;passwrod=123</code>，获取的结果如下:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1722.48<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-2-3-获取请求体数据"><a href="#4-2-3-获取请求体数据" class="headerlink" title="4.2.3 获取请求体数据"></a>4.2.3 获取请求体数据</h4><p><strong>浏览器在发送GET请求的时候是没有请求体的，所以需要把请求方式变更为POST</strong>，请求体中的数据格式如下:</p><p>对于请求体中的数据，Request对象提供了如下两种方式来获取其中的数据，分别是:</p><ul><li>获取字节输入流，如果前端发送的是字节数据，比如传递的是文件数据，则使用该方法</li></ul><pre class="line-numbers language-none"><code class="language-none">ServletInputStream getInputStream()该方法可以获取字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>获取字符输入流，如果前端发送的是纯文本数据，则使用该方法</li></ul><pre class="line-numbers language-none"><code class="language-none">BufferedReader getReader()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来，大家需要思考，要想获取到请求体的内容该如何实现?</p><p>具体实现的步骤如下:</p><blockquote><p>1.准备一个页面，在页面中添加form表单,用来发送post请求</p><p>2.在Servlet的doPost方法中获取请求体数据</p><p>3.在doPost方法中使用request的getReader()或者getInputStream()来获取</p><p>4.访问测试</p></blockquote><ol><li>在项目的webapp目录下添加一个html页面，名称为：<code>req.html</code></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--     action:form表单提交的请求地址    method:请求方式，指定为post--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/request-demo/req1<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在Servlet的doPost方法中获取数据</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * request 获取请求数据 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//在此处获取请求体中的数据</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>调用getReader()或者getInputStream()方法，因为目前前端传递的是纯文本数据，所以我们采用getReader()方法来获取</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * request 获取请求数据 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>         <span class="token comment">//获取post 请求体：请求参数</span>        <span class="token comment">//1. 获取字符输入流</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 读取数据</span>        <span class="token class-name">String</span> line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&#x3D;&#x3D;注意&#x3D;&#x3D;</p><p>BufferedReader流是通过request对象来获取的，当请求完成后request对象就会被销毁，request对象被销毁后，BufferedReader流就会自动关闭，所以此处就不需要手动关闭流了。</p><ol start="4"><li>启动服务器，通过浏览器访问<code>http://localhost:8080/request-demo/req.html</code></li></ol><p>点击<code>提交</code>按钮后，就可以在控制台看到前端所发送的请求数据</p><p><strong>小结</strong></p><p>HTTP请求数据中包含了<code>请求行</code>、<code>请求头</code>和<code>请求体</code>，针对这三部分内容，Request对象都提供了对应的API方法来获取对应的值:</p><ul><li>请求行<ul><li>getMethod()获取请求方式 GET POST</li><li>getContextPath()获取项目访问虚拟路径 &#x2F;day06</li><li>getRequestURL()获取请求URL <a href="http://localhost:8080/day06/demo01">http://localhost:8080/day06/demo01</a></li><li>getRequestURI()获取请求URI &#x2F;day06&#x2F;demo01</li><li>getQueryString()获取GET请求方式的请求参数，获取的请求参数放到一个字符串中 了解</li></ul></li><li>请求头<ul><li>getHeader(String name)根据请求头名称获取其对应的值</li></ul></li><li>请求体<ul><li>注意: &#x3D;&#x3D;浏览器发送的POST请求才有请求体&#x3D;&#x3D;</li><li>如果是纯文本数据:getReader()  了解</li><li>如果是字节数据如文件数据:getInputStream()</li></ul></li></ul><h4 id="4-2-4-获取请求参数的通用方式-很重要"><a href="#4-2-4-获取请求参数的通用方式-很重要" class="headerlink" title="4.2.4 获取请求参数的通用方式(很重要)"></a>4.2.4 获取请求参数的通用方式(很重要)</h4><p>在学习下面内容之前，我们先提出两个问题:</p><ul><li>什么是请求参数?</li><li>请求参数和请求数据的关系是什么?</li></ul><p>1.什么是请求参数?</p><p>为了能更好的回答上述两个问题，我们拿用户登录的例子来说明</p><p>1.1 想要登录网址，需要进入登录页面</p><p>1.2 在登录页面输入用户名和密码</p><p>1.3 将用户名和密码提交到后台</p><p>1.4 后台校验用户名和密码是否正确</p><p>1.5 如果正确，则正常登录，如果不正确，则提示用户名或密码错误</p><p>上述例子中，<strong>用户名和密码其实就是我们所说的请求参数。</strong></p><p><strong>get请求：请求参数位于url后面。</strong></p><p><strong>post请求：请求参数位于请求体中。</strong></p><p>2.什么是请求数据?</p><p>请求数据则是包含请求行、请求头和请求体的所有数据</p><p>3.请求参数和请求数据的关系是什么?</p><p>3.1 请求参数是请求数据中的部分内容</p><p>3.2 如果是GET请求，请求参数在请求行中</p><p>3.3 如果是POST请求，请求参数一般在请求体中</p><p>对于请求参数的获取,常用的有以下两种:</p><ul><li>GET方式:</li></ul><pre class="line-numbers language-none"><code class="language-none">String getQueryString()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>POST方式:</li></ul><pre class="line-numbers language-none"><code class="language-none">BufferedReader getReader();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有了上述的知识储备，我们来实现一个案例需求:</p><p>（1）发送一个GET请求并携带用户名，后台接收后打印到控制台</p><p>（2）发送一个POST请求并携带用户名，后台接收后打印到控制台</p><p>此处大家需要注意的是GET请求和POST请求接收参数的方式不一样，具体实现的代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GET请求和POST请求获取请求参数的方式不一样，在获取请求参数这块该如何实现呢?&#x3D;&#x3D;</p><p>要想实现，我们就需要思考:</p><p>GET请求方式和POST请求方式区别主要在于获取请求参数的方式不一样，是否可以提供一种统一获取请求参数的方式，从而统一doGet和doPost方法内的代码?</p><p>解决方案一:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取请求方式</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取请求参数</span>        <span class="token class-name">String</span> params <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            params <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            params <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//将请求参数进行打印控制台</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用request的getMethod()来获取请求方式，根据请求方式的不同分别获取请求参数值，这样就可以解决上述问题，但是以后每个Servlet都需要这样写代码，实现起来比较麻烦，这种方案我们不采用</p><p>解决方案二:</p><p>request对象已经将上述获取请求参数的方法进行了封装，并且request提供的方法实现的功能更强大，以后只需要调用request提供的方法即可，在request的方法中都实现了哪些操作?</p><p>(1)根据不同的请求方式获取请求参数，获取的内容如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420174433.png"></p><p>(2)把获取到的内容进行分割，内容如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420174437.png"></p><p>(3)把分割后端数据，存入到一个Map集合中:</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420174440.png"></p><p><strong>注意</strong>:因为参数的值可能是一个，也可能有多个，所以Map的值的类型为String数组。</p><p>基于上述理论，request对象为我们提供了如下方法:</p><p>基于上述理论，request对象为我们提供了如下方法:</p><ul><li>获取所有参数Map集合</li></ul><pre class="line-numbers language-none"><code class="language-none">Map&lt;String,String[]&gt; getParameterMap()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据名称获取参数值（数组）</li></ul><pre class="line-numbers language-none"><code class="language-none">String[] getParameterValues(String name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据名称获取参数值(单个值)</li></ul><pre class="line-numbers language-none"><code class="language-none">String getParameter(String name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来，我们通过案例来把上述的三个方法进行实例演示:</p><p>1.修改req.html页面，添加爱好选项，爱好可以同时选多个</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/request-demo/req2<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 游泳    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 爬山 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在Servlet代码中获取页面传递GET请求的参数值</p><p> 2.1获取GET方式的所有请求参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * request 通用方式获取请求参数 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//GET请求逻辑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1. 获取所有参数的Map集合</span>        <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> map <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// username:zhangsan lisi</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取值</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取的结果为:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">get....username:fe password:fe hobby:1 2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 2.2获取GET请求参数中的爱好，结果是数组值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * request 通用方式获取请求参数 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//GET请求逻辑</span>        <span class="token comment">//...</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobbies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> hobby <span class="token operator">:</span> hobbies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取的结果为: 1, 2</p><p> 2.3获取GET请求参数中的用户名和密码，结果是单个值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * request 通用方式获取请求参数 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//GET请求逻辑</span>        <span class="token comment">//...</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取的结果为:账户和密码</p><p>3.在Servlet代码中获取页面传递POST请求的参数值</p><p> 3.1将req.html页面form表单的提交方式改成post</p><p> 3.2将doGet方法中的内容复制到doPost方法中即可</p><p><strong>小结</strong></p><ul><li>req.getParameter()和getParameterMap()方法使用的频率会比较高</li></ul><h3 id="4-3-解决post请求乱码问题"><a href="#4-3-解决post请求乱码问题" class="headerlink" title="4.3 解决post请求乱码问题"></a>4.3 解决post请求乱码问题</h3><h4 id="内容讲解"><a href="#内容讲解" class="headerlink" title="内容讲解"></a>内容讲解</h4><p>html页面：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/httpServletRequestDemo04Servlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【1】从tomcat8开始以后，对于get请求乱码，tomcat已经解决。对于post请求中文乱码没有解决，需要我们自己处理。</p><p>【2】post请求乱码产生的原因和解决思路</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420175853.png"></p><p>说明：</p><blockquote><p>1)页面使用的编码表是UTF-8编码，tomcat使用的是默认编码表ISO-8859-1进行解码，编码和解码使用的编码表不一致导致乱码。</p><p>2)解决思路：先按照ISO-8859-1编码，在按照UTF-8进行重新解码</p></blockquote><p>【3】解决方案</p><p>解决方案有三种：</p><blockquote><p>1.方案一</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【<span class="token number">1</span>】方式一          使用<span class="token class-name">URLEncoder</span>类进行编码<span class="token operator">:</span><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> enc<span class="token punctuation">)</span>                          参数：                              s<span class="token operator">:</span>编码的字符串                              enc<span class="token operator">:</span>使用编码表          使用<span class="token class-name">URLDecoder</span>进行解码：<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> enc<span class="token punctuation">)</span>                          参数：                              s<span class="token operator">:</span>解码的字符串                              enc<span class="token operator">:</span>使用编码表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.方案二</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【<span class="token number">2</span>】方式二：          使用<span class="token class-name">String</span>类中的方法进行编码：    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">String</span> charsetName<span class="token punctuation">)</span>                                            参数表示指定的编码表，返回值表示编码后的字节数组          使用<span class="token class-name">String</span>类中的构造方法进行解码：<span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token class-name">String</span> charsetName<span class="token punctuation">)</span>                                          参数：                                              bytes：字节数组                                              charsetName：表示指定的编码表                                          返回值：解码后的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.方案三</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【<span class="token number">3</span>】方式三：          如果是get请求，tomcat8底层已经帮助我们解决完了，我们只需要解决post乱码即可，但是上述          两种方式对于post请求可以解决乱码，对于get请求本身获取到的已经是正确的数据，处理          后又乱码了。          我们的想法是：get请求不用我们自己书写代码处理乱码，只需要我们书写代码处理post乱码。          我们接下来学习第三种解决方案：          只解决来自于请求体数据的乱码。而get请求体没有数据，post请求体含有数据，所以我们可以理解为第三种处理方案只是用来解决post乱码的。使用的api是<span class="token class-name">ServletRequest</span>接口中的：              <span class="token keyword">void</span> <span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token class-name">String</span> env<span class="token punctuation">)</span>                  参数：指定的编码表          注意：该方式的代码必须书写在获取请求数据之前<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>【4】代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserServcie</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLDecoder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLEncoder</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/httpServletRequestDemo04Servlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.获取浏览器的请求数据</span><span class="token comment">//        String username = request.getParameter("username");</span>        <span class="token comment">/*            解决post乱码问题有三种方式：            【1】方式一                使用URLEncoder类进行编码:static String encode(String s, String enc)                                参数：                                    s:编码的字符串                                    enc:使用编码表                使用URLDecoder进行解码：static String decode(String s, String enc)                                参数：                                    s:解码的字符串                                    enc:使用编码表         */</span>        <span class="token comment">//1)编码 ： 使用URLEncoder类进行编码:static String encode(String s, String enc)</span><span class="token comment">//        String encodeUsername = URLEncoder.encode(username, "ISO-8859-1");</span><span class="token comment">//        //2)解码：使用URLDecoder进行解码：static String decode(String s, String enc)</span><span class="token comment">//        username = URLDecoder.decode(encodeUsername, "UTF-8");</span>        <span class="token comment">/*             解决post乱码问题有三种方式：            【2】方式二：                使用String类中的方法进行编码：    byte[] getBytes(String charsetName)                                                  参数表示指定的编码表，返回值表示编码后的字节数组                使用String类中的构造方法进行解码：String(byte[] bytes, String charsetName)                                                参数：                                                    bytes：字节数组                                                    charsetName：表示指定的编码表                                                返回值：解码后的字符串         */</span>        <span class="token comment">//1)编码 ： 使用String类中的方法进行编码：    byte[] getBytes(String charsetName)</span><span class="token comment">//        byte[] bytes = username.getBytes("ISO-8859-1");</span><span class="token comment">//        //2)解码：使用String类中的构造方法进行解码：String(byte[] bytes, String charsetName)</span><span class="token comment">//        username = new String(bytes, "UTF-8");</span>        <span class="token comment">//username = new String(username.getBytes("ISO-8859-1"), "UTF-8");</span>        <span class="token comment">/*            解决post乱码问题有三种方式：            【3】方式三：                如果是get请求，tomcat8底层已经帮助我们解决完了，我们只需要解决post乱码即可，但是上述                两种方式对于post请求可以解决乱码，对于get请求本身获取到的已经是正确的数据，处理                后又乱码了。                我们的想法是：get请求不用我们自己书写代码处理乱码，只需要我们书写代码处理post乱码。                我们接下来学习第三种解决方案：                只解决来自于请求体数据的乱码。而get请求体没有数据，post请求体含有数据，所以我们可以理解为第三种处理方案只是用来解决                post乱码的。使用的api是ServletRequest接口中的：                    void setCharacterEncoding(String env)                        参数：指定的编码表                注意：该方式的代码必须书写在获取请求数据之前         */</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//告知tomcat使用UTF-8解码页面请求数据</span>        <span class="token comment">//  1.获取浏览器的请求数据</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username = "</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-Request请求转发-前后端分离后使用较少，面试考"><a href="#4-4-Request请求转发-前后端分离后使用较少，面试考" class="headerlink" title="4.4 Request请求转发(前后端分离后使用较少，面试考)"></a>4.4 Request请求转发(前后端分离后使用较少，面试考)</h3><ol><li>请求转发(forward):一种在服<strong>务器内部</strong>的资源<strong>跳转</strong>方式。</li></ol><p>(1)浏览器发送请求给服务器，服务器中对应的资源A接收到请求</p><p>(2)资源A处理完请求后将请求发给资源B</p><p>(3)资源B处理完后将结果响应给浏览器</p><p>(4)请求从资源A到资源B的过程就叫请求转发</p><ol start="2"><li>请求转发的实现方式:</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"资源B路径"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>说明：<span class="token number">1</span>）<span class="token class-name">RequestDispatcher</span> dispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"资源B路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RequestDispatcher</span>表示转发器，该接口中有一个方法：<span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>具体如何来使用，我们先来看下需求:</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420182635.png"></p><p>针对上述需求，具体的实现步骤为:</p><blockquote><p>1.创建一个RequestDemo5类，接收&#x2F;req5的请求，在doGet方法中打印<code>demo5</code></p><p>2.创建一个RequestDemo6类，接收&#x2F;req6的请求，在doGet方法中打印<code>demo6</code></p><p>3.在RequestDemo5的方法中使用</p><p>​req.getRequestDispatcher(“&#x2F;req6”).forward(req,resp)进行请求转发</p><p>4.启动测试</p></blockquote><p>(1)创建RequestDemo5类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请求转发 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo5</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo5..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)创建RequestDemo6类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请求转发 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req6"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo6</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo6..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3)在RequestDemo5的doGet方法中进行请求转发</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请求转发 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo5</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo5..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//请求转发</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/req6"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4)启动测试</p><p>访问<code>http://localhost:8080/request-demo/req5</code>,就可以在控制台看到如下内容:</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">demo5...demo6...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>说明请求已经转发到了<code>/req6</code></p><ol start="3"><li>请求转发资源间共享数据:使用Request对象</li></ol><p>此处主要解决的问题是把请求从<code>/req5</code>转发到<code>/req6</code>的时候，如何传递数据给<code>/req6</code>。</p><p>需要使用request对象提供的三个方法:</p><ul><li>存储数据到request域[范围,数据是存储在request对象]中</li></ul><pre class="line-numbers language-none"><code class="language-none">void setAttribute(String name,Object o);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据key获取值</li></ul><pre class="line-numbers language-none"><code class="language-none">Object getAttribute(String name);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据key删除该键值对</li></ul><pre class="line-numbers language-none"><code class="language-none">void removeAttribute(String name);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着上个需求来:</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420182803.png"></p><blockquote><p>1.在RequestDemo5的doGet方法中转发请求之前，将数据存入request域对象中</p><p>2.在RequestDemo6的doGet方法从request域对象中获取数据，并将数据打印到控制台</p><p>3.启动访问测试</p></blockquote><p>(1)修改RequestDemo5中的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req5"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo5</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo5..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存储数据</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//请求转发</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/req6"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)修改RequestDemo6中的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 请求转发 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/req6"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestDemo6</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"demo6..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取数据</span>        <span class="token class-name">Object</span> msg <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3)启动测试</p><p>访问<code>http://localhost:8080/request-demo/req5</code>,就可以在控制台看到如下内容:</p><p>此时就可以实现在转发多个资源之间共享数据。</p><ol start="4"><li>请求转发的特点</li></ol><ul><li><p>浏览器地址栏路径不发生变化</p><p>虽然后台从<code>/req5</code>转发到<code>/req6</code>,但是浏览器的地址一直是<code>/req5</code>,未发生变化</p></li><li><p>只能转发到当前服务器的内部资源</p><p>不能从一个服务器通过转发访问另一台服务器</p></li><li><p>一次请求，可以在转发资源间使用request共享数据</p><p>虽然后台从<code>/req5</code>转发到<code>/req6</code>，但是这个&#x3D;&#x3D;只有一次请求&#x3D;&#x3D;</p></li><li><p>问题：request.getParameter()</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span>和request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>区别    <span class="token number">1.</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token operator">:</span>获取来自于浏览器的数据 <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"锁哥"</span><span class="token operator">/</span><span class="token operator">></span>    request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 获取的是锁哥         <span class="token number">2.</span>request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span>获取的是服务器中的代码：request<span class="token punctuation">.</span><span class="token function">setAttibute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>的数据        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"黑马程序员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5request的生命周期"><a href="#4-5request的生命周期" class="headerlink" title="4.5request的生命周期"></a>4.5request的生命周期</h3><p>1.何时创建?</p><p>浏览器第一次访问tomcat服务器的时候</p><p>2.谁创建?</p><p>tomcat创建</p><p>3.创建对象做什么？</p><p>浏览器第一次访问tomcat服务器的时候，tomcat创建request对象和response对象，传递给servlet中的service方法，然后我们可以在servlet中使用request对象调用方法获取请求数据(请求行 头 体)，然后处理业务逻辑，处理完毕，然后tomcat将响应数据给浏览器，浏览器接收到响应之后，tomcat立刻销毁request和response对象。</p><h2 id="5-HTTP响应详解-理解"><a href="#5-HTTP响应详解-理解" class="headerlink" title="5.HTTP响应详解(理解)"></a>5.HTTP响应详解(理解)</h2><h3 id="1-使用抓包查看响应报文协议内容"><a href="#1-使用抓包查看响应报文协议内容" class="headerlink" title="1.使用抓包查看响应报文协议内容"></a>1.使用抓包查看响应报文协议内容</h3><p>注意：</p><p>http响应报文协议包括：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span>响应行<span class="token number">2.</span>响应头<span class="token number">3.</span>响应体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>响应数据：是服务器响应给浏览器</p><p>【1】步骤</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1.创建html页面2.创建servlet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>【2】实现</p><p>1.创建html页面</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Insert title here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>get请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/getServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suoge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>post请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/postServlet<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suoge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.创建servlet</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>a_http_01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/getServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//响应给浏览器数据</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"get...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>a_http_01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/postServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PostServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//响应给浏览器数据</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"post...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420184309.png"></p><h4 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h4><p>​1.由于浏览器的原因，浏览器会把请求行和响应行信息放在了一起；</p><p>​2.get和post请求的响应没有区别；</p><h3 id="2-HTTP响应报文协议介绍"><a href="#2-HTTP响应报文协议介绍" class="headerlink" title="2.HTTP响应报文协议介绍"></a>2.HTTP响应报文协议介绍</h3><h4 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h4><ul><li>理解响应报文协议的组成部分</li></ul><h4 id="内容讲解-1"><a href="#内容讲解-1" class="headerlink" title="内容讲解"></a>内容讲解</h4><p>【1】响应行</p><p>响应行格式：协议&#x2F;版本  状态码   </p><blockquote><p> 如：HTTP&#x2F;1.1 200 ;</p></blockquote><table><thead><tr><th>状态码</th><th>状态码描述</th><th>说明</th></tr></thead><tbody><tr><td><strong>200</strong></td><td>OK</td><td>请求已成功，请求所希望的响应头或数据体将随此响应返回。出现此状态码是表示正常状态。</td></tr><tr><td><strong>302</strong></td><td>Move temporarily</td><td>重定向，请求的资源临时从不同的 地址响应请求。</td></tr><tr><td><strong>304</strong></td><td>Not Modified</td><td>从<strong>浏览器</strong>缓存中读取数据，不从服务器重新获取数据。例如，用户第一次从浏览器访问服务器端图片资源，以后在访问该图片资源的时候就不会再从服务器上加载而直接到浏览器缓存中加载，这样效率更高。</td></tr><tr><td><strong>404</strong></td><td>Not Found</td><td>请求资源不存在。通常是用户路径编写错误，也可能是服务器资源已删除。</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器已经理解请求，但是拒绝执行它</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>请求行中指定的请求方法不能被用于请求相应的资源</td></tr><tr><td><strong>500</strong></td><td>Internal Server Error</td><td>服务器内部错误。通常程序抛异常</td></tr></tbody></table><p>【2】响应头</p><p>响应头也是用的键值对key:value，服务器基于<strong>响应头</strong>通知浏览器的行为。</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420184819.png"></p><p><strong>常见的响应头</strong> ：</p><table><thead><tr><th align="center">响应头Key</th><th align="center">响应头value</th></tr></thead><tbody><tr><td align="center">location</td><td align="center">指定响应的路径，需要与状态码302配合使用，完成重定向</td></tr><tr><td align="center">content-Type</td><td align="center">响应正文的类型（MIME类型，属于服务器里面的一种类型，例如文件在window系统有自己的类型，.txt  .doc  .jpg。文件在服务器中也有自己的类型），同时还可以解决乱码问题。例如：text&#x2F;html;charset&#x3D;UTF-8</td></tr><tr><td align="center">content-disposition</td><td align="center">通过浏览器以附件形式解析正文，例如：attachment;filename&#x3D;xx.zip</td></tr><tr><td align="center">refresh</td><td align="center">页面刷新，例如：3;url&#x3D;<a href="http://www.itcast.cn/">www.itcast.cn</a>    &#x2F;&#x2F;三秒刷新页面到<a href="http://www.itcast.cn/">www.itcast.cn</a></td></tr></tbody></table><p>常见的MIME类型：就是文件在tomcat服务器中的文件类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">windows    <span class="token function">tomcat</span><span class="token punctuation">(</span><span class="token constant">MIME</span>类型<span class="token punctuation">)</span>超文本标记语言文本 <span class="token punctuation">.</span>html      text<span class="token operator">/</span>html <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>xml文档 <span class="token punctuation">.</span>xml text<span class="token operator">/</span>xml<span class="token constant">XHTML</span>文档 <span class="token punctuation">.</span>xhtml application<span class="token operator">/</span>xhtml<span class="token operator">+</span>xml普通文本         <span class="token punctuation">.</span>txt    text<span class="token operator">/</span>plain <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token constant">PDF</span>文档 <span class="token punctuation">.</span>pdf application<span class="token operator">/</span>pdf<span class="token class-name">Microsoft</span> <span class="token class-name">Word</span>文件 <span class="token punctuation">.</span>word application<span class="token operator">/</span>msword<span class="token constant">PNG</span>图像 <span class="token punctuation">.</span>png  image<span class="token operator">/</span>png <span class="token operator">*</span><span class="token operator">*</span><span class="token constant">GIF</span>图形 <span class="token punctuation">.</span>gif image<span class="token operator">/</span>gif<span class="token constant">JPEG</span>图形 <span class="token punctuation">.</span>jpeg<span class="token punctuation">,</span><span class="token punctuation">.</span>jpg image<span class="token operator">/</span>jpeg <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【3】响应体</p><p>​响应体，就是服务器发送给浏览器的数据。当前浏览器向服务器请求的资源是hello.html，所以服务器给浏览器响应的数据是一个html页面。</p><p>请求资源路径：url</p><p>响应结果：页面或者资源</p><p>如果请求是servlet,那么浏览器的响应体接收到的是servlet响应的数据：</p><h4 id="内容小结-1"><a href="#内容小结-1" class="headerlink" title="内容小结"></a>内容小结</h4><p>1.响应行：</p><p>​协议版本号 状态码 200(一切正常) 404(找不到资源路径) 500(服务器报异常) 302(和location一起使用，实现重定向) 304(从浏览器缓存中读取数据) 405(服务器的servlet没有重写doGet和doPost方法)</p><p>2.响应头：</p><p>​location  指定响应的路径</p><p>​<strong>content-type:告诉浏览器文件格式，告诉浏览器不要解析html文件(text&#x2F;plain)，解决中文乱码问题</strong></p><p>​refresh 定时刷新</p><p>​content-disposition 以附件形式展示图片等资源</p><p>3.响应体：</p><p>​服务器处理的结果响应到浏览器中</p><h2 id="5-Response对象"><a href="#5-Response对象" class="headerlink" title="5.Response对象"></a>5.Response对象</h2><h3 id="1-Response对象介绍"><a href="#1-Response对象介绍" class="headerlink" title="1 Response对象介绍"></a>1 Response对象介绍</h3><p>前面讲解完Request对象，接下来我们回到刚开始的那张图:</p><ul><li>Request:使用request对象来&#x3D;&#x3D;获取&#x3D;&#x3D;请求数据</li><li>Response:使用response对象来&#x3D;&#x3D;设置&#x3D;&#x3D;响应数据</li></ul><p>Reponse的继承体系和Request的继承体系也非常相似:</p><p>HttpServletResponse  response &#x3D; new ResponseFacade();多态</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420185543.png"></p><p> 介绍完Response的相关体系结构后，接下来对于Response我们需要学习如下内容:</p><ul><li>Response设置响应数据的功能介绍</li><li>Response完成重定向</li><li>Response响应字符数据</li><li>Response响应字节数据</li></ul><h3 id="2-Response设置响应数据功能介绍"><a href="#2-Response设置响应数据功能介绍" class="headerlink" title="2 Response设置响应数据功能介绍"></a>2 Response设置响应数据功能介绍</h3><p>HTTP响应数据总共分为三部分内容，分别是&#x3D;&#x3D;响应行、响应头、响应体&#x3D;&#x3D;，对于这三部分内容的数据，respone对象都提供了哪些方法来进行设置?</p><ol><li>响应行</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">HTTP/1.1 200 OK<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于响应行，比较常用的就是设置响应状态码:</p><pre class="line-numbers language-none"><code class="language-none">void setStatus(int sc);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>响应头</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Content-Type: text/html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置响应头键值对：</p><pre class="line-numbers language-none"><code class="language-none">void setHeader(String name,String value);响应头：name的值location  指定响应的路径content-type:告诉浏览器文件格式，告诉浏览器不要解析html文件(text&#x2F;plain)，解决中文乱码问题refresh 定时刷新content-disposition 以附件形式展示图片等资源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>响应体</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">返回的数据静态页面也可以<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于响应体，是通过字符、字节输出流的方式往浏览器写，</p><p>获取字符输出流:</p><pre class="line-numbers language-none"><code class="language-none">PrintWriter getWriter();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取字节输出流</p><pre class="line-numbers language-none"><code class="language-none">ServletOutputStream getOutputStream();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>介绍完这些方法后，后面我们会通过案例把这些方法都用一用，首先先来完成下重定向的功能开发。</p><h3 id="3-Respones请求重定向"><a href="#3-Respones请求重定向" class="headerlink" title="3 Respones请求重定向"></a>3 Respones请求重定向</h3><ol><li>&#x3D;&#x3D;Response重定向(redirect):一种资源跳转方式(服务器外部的)。&#x3D;&#x3D;</li></ol><p>(1)浏览器发送请求给服务器，服务器中对应的资源A接收到请求</p><p>(2)资源A现在无法处理该请求，就会给浏览器响应一个302的状态码+location的一个访问资源B的路径</p><p>(3)浏览器接收到响应状态码为302就会重新发送请求到location对应的访问地址去访问资源B</p><p>(4)资源B接收到请求后进行处理并最终给浏览器响应结果，这整个过程就叫&#x3D;&#x3D;重定向&#x3D;&#x3D;</p><ol start="2"><li>重定向的实现方式:</li></ol><pre class="line-numbers language-none"><code class="language-none">resp.setStatus(302);设置响应状态码是302resp.setHeader(&quot;location&quot;,&quot;资源B的访问路径&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>具体如何来使用，我们先来看下需求:</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420190235.png"></p><p>针对上述需求，具体的实现步骤为:</p><blockquote><p>1.创建一个ResponseDemo1类，接收&#x2F;resp1的请求，在doGet方法中打印<code>resp1....</code></p><p>2.创建一个ResponseDemo2类，接收&#x2F;resp2的请求，在doGet方法中打印<code>resp2....</code></p><p>3.在ResponseDemo1的方法中使用</p><p>​response.setStatus(302);</p><p>​response.setHeader(“Location”,”&#x2F;request-demo&#x2F;resp2”) 来给前端响应结果数据</p><p>4.启动测试</p></blockquote><p>(1)创建ResponseDemo1类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resp1...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)创建ResponseDemo2类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resp2...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3)在ResponseDemo1的doGet方法中给前端响应数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resp1...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重定向</span>        <span class="token comment">//1.设置响应状态码 302</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 设置响应头 Location</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">,</span><span class="token string">"/request-demo/resp2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4)启动测试</p><p>访问<code>http://localhost:8080/request-demo/resp1</code>,就可以在控制台看到如下内容:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">resp1...resp2...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>说明<code>/resp1</code>和<code>/resp2</code>都被访问到了。到这重定向就已经完成了。</p><p>虽然功能已经实现，但是从设置重定向的两行代码来看，会发现除了重定向的地址不一样，其他的内容都是一模一样，所以resposne对象给我们提供了简化的编写方式为:</p><pre class="line-numbers language-none"><code class="language-none">resposne.sendRedirect(&quot;&#x2F;request-demo&#x2F;resp2&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以第3步中的代码就可以简化为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo1</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resp1...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重定向</span>        resposne<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/request-demo/resp2"</span><span class="token punctuation">)</span>；    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>重定向的特点</li></ol><ul><li><p>浏览器地址栏路径发送变化</p><p>当进行重定向访问的时候，由于是由浏览器发送的两次请求，所以地址会发生变化</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">/demo/resp1  --->  /demo/resp2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>可以重定向到任何位置的资源(服务内容、外部均可)</p><p>因为第一次响应结果中包含了浏览器下次要跳转的路径，所以这个路径是可以任意位置资源。</p></li><li><p>两次请求，不能在多个资源使用request共享数据</p><p>因为浏览器发送了两次请求，是两个不同的request对象，就无法通过request对象进行共享数据</p></li></ul><p>介绍完&#x3D;&#x3D;请求重定向&#x3D;&#x3D;和&#x3D;&#x3D;请求转发&#x3D;&#x3D;以后，接下来需要把这两个放在一块对比下:</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230420190612.png"></p><p>以后到底用哪个，还是需要根据具体的业务来决定。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 如果需要在资源之间传递共享request数据,使用请求转发, 否则就用重定向</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-路径问题"><a href="#4-路径问题" class="headerlink" title="4 路径问题"></a>4 路径问题</h3><ol><li>问题1：转发的时候路径上没有加<code>/request-demo</code>而重定向加了，那么到底什么时候需要加，什么时候不需要加呢?</li></ol><p>其实判断的依据很简单，只需要记住下面的规则即可:</p><ul><li>浏览器使用:需要加虚拟目录(项目访问路径)</li><li>服务端使用:不需要加虚拟目录</li></ul><p>对于转发来说，因为是在服务端进行的，所以不需要加虚拟目录</p><p>对于重定向来说，路径最终是由浏览器来发送请求，就需要添加虚拟目录。</p><p>掌握了这个规则，接下来就通过一些练习来强化下知识的学习:</p><ul><li><code>&lt;a href=&#39;路劲&#39;&gt;</code></li><li><code>&lt;form action=&#39;路径&#39;&gt;</code></li><li>req.getRequestDispatcher(“路径”)</li><li>resp.sendRedirect(“路径”)</li></ul><p>答案:</p><pre class="line-numbers language-none"><code class="language-none">1.超链接，从浏览器发送，需要加2.表单，从浏览器发送，需要加3.转发，是从服务器内部跳转，不需要加4.重定向，是由浏览器进行跳转，需要加。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Response响应字符数据"><a href="#5-Response响应字符数据" class="headerlink" title="5 Response响应字符数据"></a>5 Response响应字符数据</h3><p>要想将字符数据写回到浏览器，我们需要两个步骤:</p><ul><li><p>通过Response对象获取字符输出流： PrintWriter writer &#x3D; resp.getWriter();</p></li><li><p>通过字符输出流写数据: writer.write(“aaa”);</p></li></ul><p>接下来，我们实现通过些案例把响应字符数据给实际应用下:</p><ol><li>返回一个简单的字符串<code>aaa</code></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 响应字符数据：设置字符数据的响应体 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo3</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1. 获取字符输出流</span>        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>返回一串html字符串，并且能被浏览器解析</li></ol><pre class="line-numbers language-none"><code class="language-none">PrintWriter writer &#x3D; response.getWriter();&#x2F;&#x2F;content-type，告诉浏览器返回的数据类型是HTML类型数据，这样浏览器才会解析HTML标签response.setHeader(&quot;content-type&quot;,&quot;text&#x2F;html&quot;);writer.write(&quot;&lt;h1&gt;aaa&lt;&#x2F;h1&gt;&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;一次请求响应结束后，response对象就会被销毁掉，所以不要手动关闭流。</p><ol start="3"><li>返回一个中文的字符串<code>你好</code>，需要注意设置响应数据的编码为<code>utf-8</code></li></ol><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;设置响应的数据格式及数据的编码response.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);writer.write(&quot;你好&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-Response响应字节数据"><a href="#6-Response响应字节数据" class="headerlink" title="6 Response响应字节数据"></a>6 Response响应字节数据</h3><p>要想将字节数据写回到浏览器，我们需要两个步骤:</p><ul><li><p>通过Response对象获取字节输出流：ServletOutputStream outputStream &#x3D; resp.getOutputStream();</p></li><li><p>通过字节输出流写数据: outputStream.write(字节数据);</p></li></ul><p>接下来，我们实现通过些案例把响应字节数据给实际应用下:</p><ol><li>返回一个图片文件到浏览器</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 响应字节数据：设置字节数据的响应体 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo4</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1. 读取文件</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"d://a.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 获取response字节输出流</span>        <span class="token class-name">ServletOutputStream</span> os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 完成流的copy</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中，对于流的copy的代码还是比较复杂的，所以我们可以使用别人提供好的方法来简化代码的开发，具体的步骤是:</p><p>(1)pom.xml添加依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)调用工具类方法</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;fis:输入流&#x2F;&#x2F;os:输出流IOUtils.copy(fis,os);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>优化后的代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 响应字节数据：设置字节数据的响应体 */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/resp4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseDemo4</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1. 读取文件</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"d://a.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 获取response字节输出流</span>        <span class="token class-name">ServletOutputStream</span> os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 完成流的copy</span>      <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb01(黑马笔记版)</title>
      <link href="/2023/04/20/javaweb01/"/>
      <url>/2023/04/20/javaweb01/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Servlet简介"><a href="#1-Servlet简介" class="headerlink" title="1.Servlet简介"></a>1.Servlet简介</h1><p>1.Servlet是一个接口，即规范</p><p>2.定义的实现类必须实现接口中的所有的抽象方法</p><p>3.Servlet全称Server Applet 服务器端的程序。是sun公司提供一套规范，用来处理客户端请求、响应给浏览器的动态web资源。其实servlet的实质就是java代码，通过java的API动态的向客户端输出内容，并且从客户端接收数据。</p><p>4.一个类要想通过浏览器被访问到,那么这个类就必须<strong>直接或间接的实现Servlet接口</strong></p><p>【2】Servlet作用</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1）接收客户端的请求2）处理业务逻辑3）响应给浏览器客户端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="2-Servlet快速入门"><a href="#2-Servlet快速入门" class="headerlink" title="2.Servlet快速入门"></a>2.Servlet快速入门</h1><h3 id="内容讲解"><a href="#内容讲解" class="headerlink" title="内容讲解"></a>内容讲解</h3><p>【1】步骤</p><p>1.创建web项目</p><p>2.导入servlet依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--导入依赖--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--导入servlet依赖--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.在创建的web项目中自定义类实现Servlet接口</p><p>4.在自定义类中实现Servlet接口中的所有的抽象方法</p><p>5.在实现Servlet接口的service方法体中书写代码处理业务逻辑</p><pre class="line-numbers language-、java" data-language="、java"><code class="language-、java">void service(ServletRequest req, ServletResponse res)  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.在web项目的核心配置文件web.xml中配置访问servlet的路径。</p><p>​说明：这样配置是告知tomcat有具体的Servlet类需要被访问。</p><p>7.启动tomcat</p><p>8.在浏览器中访问servlet类</p><p>【2】实现</p><p>1.创建maven的web项目</p><p>2.导入servlet的依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--servlet--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!--编译 测试需要，运行时不需要--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在创建的web项目中自定义类实现Servlet接口</p><p>3.在自定义类中实现Servlet接口中的所有的抽象方法</p><p>4.在实现Servlet接口的service方法体中书写代码处理业务逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>a_demo_01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token comment">/*    2.在创建的web项目中自定义类实现Servlet接口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span><span class="token punctuation">&#123;</span>    <span class="token comment">//3.在自定义类中实现Servlet接口中的所有的抽象方法</span>    <span class="token comment">//4.在实现Servlet接口的service方法体中书写代码处理业务逻辑</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.在web项目的核心配置文件web.xml中配置访问servlet的路径。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee  http://java.sun.com/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>           <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--       5.在web项目的核心配置文件web.xml中配置访问servlet的路径。​    说明：这样配置是告知tomcat有具体的Servlet类需要被访问。    --></span>    <span class="token comment">&lt;!--        1.&lt;servlet> 表示将当前Servlet类注册到tomcat中，告知tomcat有一个类要被访问    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--            表示当前要被访问类的标识，在当前web.xml中要唯一，helloWorldServlet属于标识符        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloWorldServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--            配置要访问 的servlet类，必须是类的全路径：包名.类名。            说明：tomcat底层通过获取这里的类全路径使用反射技术调用当前类的无参构造方法创建对象        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.itheima.sh.a_demo_01.HelloWorldServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        配置要访问的servlet类的映射路径    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--这里要和上面的servlet-name文本值一致，这里找到上面的servlet-name--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>helloWorldServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--浏览器上地址栏上输入的映射路径及访问路径，这里必须加/--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.启动tomcat</p><p>7.在浏览器中访问servlet类</p><h1 id="3-Servlet的执行原理-掌握"><a href="#3-Servlet的执行原理-掌握" class="headerlink" title="3.Servlet的执行原理(掌握)"></a>3.Servlet的执行原理(掌握)</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>明确访问servlet的执行流程</li><li>掌握servlet的原理</li></ul><h2 id="内容讲解-1"><a href="#内容讲解-1" class="headerlink" title="内容讲解"></a>内容讲解</h2><p>【2】原理</p><p>说明：</p><p>1.当我们点击run运行的时候，tomcat之所以会启动，是因为程序入口(main方法)在tomcat中</p><p>2.tomcat开始运行，会加载web项目里面的配置文件web.xml(xml解析，读取数据)</p><p>​主要是根据url-pattern 找到对应的servlet-class</p><p>3.然后tomcat进入等待状态(永不停止，除非手动关闭)</p><p>4.当用户在浏览器中输入地址：<a href="http://localhost:8080/hello%E5%B0%B1%E4%BC%9A%E5%AE%9A%E4%BD%8D%E5%88%B0tomcat%E7%9A%84%E8%AE%BF%E9%97%AE%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%8B%E9%9D%A2%E7%9A%84%E6%9F%90%E4%B8%AAservlet%E4%B8%AD">http://localhost:8080/hello就会定位到tomcat的访问的项目下面的某个servlet中</a></p><p>5.tomcat会根据 &#x2F;hello 的servlet的虚拟路径 找到HelloServlet的全限定名</p><p>6.tomcat底层通过反射创建HelloServlet的对象，并调用HelloServlet的service方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"全限定名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Servlet</span> servlet <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实际上HelloServlet对象，向上转型</span>servlet<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h2><p>1.servlet的原理</p><p>tomcat根据servlet的虚拟路径找到对应的Servlet类，然后使用反射技术创建Servlet类的对象，最后使用对象调用service方法处理业务逻辑。</p><h1 id="4-Servlet生命周期-掌握"><a href="#4-Servlet生命周期-掌握" class="headerlink" title="4.Servlet生命周期(掌握)"></a>4.Servlet生命周期(掌握)</h1><h2 id="学习目标-1"><a href="#学习目标-1" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>掌握Servlet生命周期的api执行时机和作用</li></ul><h2 id="内容讲解-2"><a href="#内容讲解-2" class="headerlink" title="内容讲解"></a>内容讲解</h2><p>【1】生命周期：</p><p>​指的是一个对象从生（创建）到死（销毁）的一个过程</p><p>【2】生命周期的api:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. servlet对象创建完毕，使用对象调用此方法，初始化方法，只有在第一次访问的时候执行一次</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 用户访问servlet时，调用此方法 (每次访问都会调用一次)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. servlet对象销毁时，调用此方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【3】Servlet生命周期的api执行时机图解</p><p><img src="https://img-blog.csdnimg.cn/baa53ac1b7f74e4bbb308998f80222d7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAc3VwZXJfLg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_left" alt="img"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 创建1）默认情况下用户第一次访问时，创建servlet，执行init方法<span class="token list punctuation">*</span> 运行（提供服务）用户每次访问时，都执行service方法<span class="token list punctuation">*</span> 销毁服务器正常关闭时，销毁servlet，执行destroy方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【4】代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>a_servlet_01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Life01Servlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*        反射调用无参构造方法创建对象     */</span>    <span class="token keyword">public</span> <span class="token class-name">Life01Servlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【5】结果：</p><pre class="line-numbers language-MD" data-language="MD"><code class="language-MD">无参构造...initservice...destory...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内容小结-1"><a href="#内容小结-1" class="headerlink" title="内容小结"></a>内容小结</h2><p>1.何时创建servlet？</p><p>第一次访问servlet的时候创建</p><p>2.谁创建的？</p><p>tomcat服务器创建的</p><p>3.创建对象时做了什么？</p><p>调用无参构造方法创建对象，然后立刻调用init初始化方法</p><p>4.每次访问servlet执行哪个方法</p><p>service方法</p><p>5.何时销毁servlet？</p><p>关闭tomcat服务器，调用destroy方法</p><h1 id="5-服务器启动，立刻加载Servlet对象-理解"><a href="#5-服务器启动，立刻加载Servlet对象-理解" class="headerlink" title="5.服务器启动，立刻加载Servlet对象(理解)"></a>5.服务器启动，立刻加载Servlet对象(理解)</h1><h2 id="学习目标-2"><a href="#学习目标-2" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>能够在web.xml中进行配置让服务器启动，立刻创建Servlet对象</li></ul><h2 id="内容讲解-3"><a href="#内容讲解-3" class="headerlink" title="内容讲解"></a>内容讲解</h2><p>【1】问题: 发现 init 默认第一次被访问的时候才调用,适合用来初始化项目数据</p><p>​  如果项目数据很多, 加载就需要一定的时间，这样就会给用户的体验不好,因为要等比较久的时间</p><p>【2】 解决: 服务器一启动,就执行init方法</p><p>【3】实现：在web.xml核心配置文件中对应的servlet标签中按照如下配置：</p><p>注意：</p><blockquote><p>1.使用<load-on-startup></load-on-startup>标签进行配置，表示标记容器是否应该在启动的时候加载这个servlet，(实例化并调用其init()方法)</p><p>2.它的文本值必须是一个整数，表示servlet应该被载入的顺序</p><p>3.如果文本值是负数：默认值是-1 【用户第一次访问时，创建】</p><p>4.当值大于等于0时，表示容器在应用启动时就加载并初始化这个servlet；</p><p>5.正数的值越小，该servlet的优先级越高，应用启动时就越先加载。</p><p>6.当值相同时，容器就会自己选择顺序来加载</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>life01Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.itheima.sh.a_servlet_01.Life01Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--           load-on-startup 标签可以让tomcat服务器启动就创建对应的servlet。标签文本值必须是整数：           数字越小，创建servlet的优先级越高       --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>life01Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/life01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内容小结-2"><a href="#内容小结-2" class="headerlink" title="内容小结"></a>内容小结</h2><ol><li><p>load-on-startup 标签可以让tomcat服务器启动就创建对应的servlet。标签文本值必须是整数：<br>数字越小，创建servlet的优先级越高，建议是大于等于0的整数</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>​    2.配置load-on-startup标签后servlet生命周期如下：</p><h1 id="6-Servlet实现方式-重点"><a href="#6-Servlet实现方式-重点" class="headerlink" title="6.Servlet实现方式(重点)"></a>6.Servlet实现方式(重点)</h1><p>一共有三种：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">快捷键<span class="token operator">:</span><span class="token number">1.</span> ctrl <span class="token operator">+</span> alt <span class="token operator">+</span> u <span class="token operator">:</span> 查看一个类的继承结构图<span class="token number">2.</span> ctrl <span class="token operator">+</span> h <span class="token operator">:</span> 这个类的简化版继承结构 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-实现Servlet方式二-自定义类继承GenericServlet"><a href="#1-实现Servlet方式二-自定义类继承GenericServlet" class="headerlink" title="1.实现Servlet方式二_自定义类继承GenericServlet"></a>1.实现Servlet方式二_自定义类继承GenericServlet</h2><h3 id="学习目标-3"><a href="#学习目标-3" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>编写Servlet实现类,只要重写service方法</li></ul><h3 id="内容讲解-4"><a href="#内容讲解-4" class="headerlink" title="内容讲解"></a>内容讲解</h3><p>【1】描述问题：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">   Servlet中使用频率最高,最重要的方法是service方法(大部分场景)但是我们每次编写Servlet实现类,都是直接实现Servlet接口,重写5个抽象方法(太冗余了)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>【2】解决问题：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">我们可以自定义类继承GenericServlet抽象类，只在子类中重写service即可。不用重写所有的抽象方法。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>【3】步骤：</p><p>1.自定义类继承GenericServlet类</p><p>2.在子类中重写service方法，处理业务逻辑</p><p>3.在web.xml中进行映射路径的配置</p><p>4.在浏览器客户端访问servlet类</p><p>【4】代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>a_servlet_01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">GenericServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token comment">/*1.自定义类继承GenericServlet类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Servlet</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//    2.在子类中重写service方法，处理业务逻辑</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee  http://java.sun.com/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>           <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--3.在web.xml中进行映射路径的配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo01Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.itheima.sh.a_servlet_01.Demo01Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo01Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/demo01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内容小结-3"><a href="#内容小结-3" class="headerlink" title="内容小结"></a>内容小结</h3><p>1.方式二的好处是只需要重写service方法，在方法体内部处理业务逻辑即可。</p><h2 id="2-实现Servlet方式三-自定义类继承HttpServlet-掌握"><a href="#2-实现Servlet方式三-自定义类继承HttpServlet-掌握" class="headerlink" title="2.实现Servlet方式三_自定义类继承HttpServlet(掌握)"></a>2.实现Servlet方式三_自定义类继承HttpServlet(掌握)</h2><h3 id="学习目标-4"><a href="#学习目标-4" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>根据页面不同的请求方式执行具体的请求方法</li></ul><h3 id="内容讲解-5"><a href="#内容讲解-5" class="headerlink" title="内容讲解"></a>内容讲解</h3><p>【1】问题:</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">我们在前端的form表单中,method属性, 学习过有两种常用的请求方式(get/post)我们现在的service方法是这样的: 用户发送请求,无论是什么请求方式,都会统一的执行service方法, 我们无法很好的区别是哪一种请       求方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>【2】解决问题：我们可以自定义类继承HttpServlet就可以根据不同的请求做不同的处理：get post</p><p>【3】步骤：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1.自定义类继承HttpServlet2.在子类中根据不同的请求方式重写请求方式的方法：get请求---重写doGet方法post请求---重写doPost方法3.在方法体中书写处理业务逻辑的代码4.在web.xml中进行配置5.浏览器客户端访问servlet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【4】实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>a_servlet_01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token comment">/*    1.自定义类继承HttpServlet */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Servlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*        2.在子类中根据不同的请求方式重写请求方式的方法：​get请求---重写doGet方法​post请求---重写doPost方法     */</span>    <span class="token comment">//3.在方法体中书写处理业务逻辑的代码</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"post...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--4.在web.xml中进行配置--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo02Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.itheima.sh.a_servlet_01.Demo02Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo02Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/demo02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内容小结-4"><a href="#内容小结-4" class="headerlink" title="内容小结"></a>内容小结</h3><p>1.实现servlet方式三的好处：</p><p>​1）可以根据不同的请求执行对应的方法 </p><p>​2）可以处理满足http协议的请求和响应</p><p>2.对ServletRequest和HttpServletRequest接口的说明：</p><p>​这个对象封装了浏览器发送的所有请求数据，兼容大部分协议。HttpServletRequest是子接口，可以匹配http协议下的所有请求。</p><h2 id="3-实现servlet方式三-继承HttpServlet的执行流程"><a href="#3-实现servlet方式三-继承HttpServlet的执行流程" class="headerlink" title="3.实现servlet方式三_继承HttpServlet的执行流程"></a>3.实现servlet方式三_继承HttpServlet的执行流程</h2><h3 id="学习目标-5"><a href="#学习目标-5" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>能够说出继承HttpServlet方式的执行流程</li></ul><h3 id="内容讲解-6"><a href="#内容讲解-6" class="headerlink" title="内容讲解"></a>内容讲解</h3><p>疑问：就是正常浏览器访问tomcat服务器需要访问servlet接口中的service方法，但是方式三在子类中没有重写servlet中的service方法，只重写了doGet和doPost方法，那么底层是如何执行的呢？</p><h3 id="内容小结-5"><a href="#内容小结-5" class="headerlink" title="内容小结"></a>内容小结</h3><p>当我们访问自定义类的servlet的时候先访问HttpServlet类实现Servlet接口中的service方法，在service方法体中调用了重载的service方法，在该方法体内部获取请求方式，根据不同的请求方式来执行对应的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">get请求<span class="token operator">--</span><span class="token operator">--</span><span class="token function">doGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法post请求<span class="token operator">--</span><span class="token operator">-</span><span class="token function">doPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：查看某个类的成员结构快捷键：alt+7</p><h2 id="4-实现servlet的三种方式的总结"><a href="#4-实现servlet的三种方式的总结" class="headerlink" title="4.实现servlet的三种方式的总结"></a>4.实现servlet的三种方式的总结</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span>自定义类实现<span class="token class-name">Servlet</span>接口，重写所有的抽象方法，不能处理满足http协议的请求和响应<span class="token number">2.</span>自定义类继承<span class="token class-name">GenericServlet</span>抽象类，该抽象类是<span class="token class-name">Servlet</span>接口的子类，这种方式只重写service方法即可，但是不能处理满足http协议的请求和响应<span class="token punctuation">,</span>同时不能根据具体的请求方式执行具体的方法   <span class="token number">3.</span>自定义类继承<span class="token class-name">HttpServlet</span>抽象类<span class="token punctuation">,</span>该抽象类是<span class="token class-name">GenericServlet</span>的子类<span class="token punctuation">,</span>根据不同的请求方式执行对应方法：掌握    get<span class="token operator">--</span><span class="token operator">--</span>doGet    post<span class="token operator">--</span><span class="token operator">-</span>doPost  可以处理满足http协议的请求和响应<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-编写servlet常见问题"><a href="#7-编写servlet常见问题" class="headerlink" title="7.编写servlet常见问题"></a>7.编写servlet常见问题</h1><h2 id="学习目标-6"><a href="#学习目标-6" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>能够解决在编写servlet时常见的几个问题</li></ul><h2 id="内容讲解-7"><a href="#内容讲解-7" class="headerlink" title="内容讲解"></a>内容讲解</h2><h3 id="1-遇到500错误"><a href="#1-遇到500错误" class="headerlink" title="1.遇到500错误"></a>1.遇到500错误</h3><p>表示服务器内部异常。</p><h3 id="2-遇到404错误"><a href="#2-遇到404错误" class="headerlink" title="2.遇到404错误"></a>2.遇到404错误</h3><p>浏览器客户端访问服务器的资源不存在。</p><h3 id="3-遇到405错误"><a href="#3-遇到405错误" class="headerlink" title="3.遇到405错误"></a>3.遇到405错误</h3><p>服务器servlet没有重写doGet或者doPost方法。</p><h2 id="内容小结-6"><a href="#内容小结-6" class="headerlink" title="内容小结"></a>内容小结</h2><p>1.500错误</p><p>​服务器异常</p><p>2.404错误</p><p>​找不到资源</p><p>3.405错误</p><p>​如果我们不重写doGet&#x2F;doPost方法, 那么父类的doGet&#x2F;doPost方法会执行(继承)，给浏览器响应一个错误: 状态码405 (http1.1)。</p><h1 id="8-Servlet映射路径-理解"><a href="#8-Servlet映射路径-理解" class="headerlink" title="8.Servlet映射路径 理解"></a>8.Servlet映射路径 理解</h1><h2 id="学习目标-7"><a href="#学习目标-7" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>能够配置一个Servlet映射单个和多个url</li></ul><h2 id="内容讲解-8"><a href="#内容讲解-8" class="headerlink" title="内容讲解"></a>内容讲解</h2><p>【1】一个Servlet映射单个url</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;servlet&gt;    &lt;servlet-name&gt;demo02Servlet&lt;&#x2F;servlet-name&gt;    &lt;servlet-class&gt;com.itheima.sh.a_servlet_01.Demo02Servlet&lt;&#x2F;servlet-class&gt;&lt;&#x2F;servlet&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;demo02Servlet&lt;&#x2F;servlet-name&gt;    &lt;url-pattern&gt;&#x2F;demo02&lt;&#x2F;url-pattern&gt;&lt;&#x2F;servlet-mapping&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【2】一个Servlet映射多个url</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo02Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.itheima.sh.a_servlet_01.Demo02Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>demo02Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/demo02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/demo03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注解版本：</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">@WebServlet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="9-Servlet映射路径配置规范-理解"><a href="#9-Servlet映射路径配置规范-理解" class="headerlink" title="9. Servlet映射路径配置规范(理解)"></a>9. Servlet映射路径配置规范(理解)</h1><h2 id="学习目标-8"><a href="#学习目标-8" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>能够使用Servlet映射路径配置规范</li></ul><h2 id="内容讲解-9"><a href="#内容讲解-9" class="headerlink" title="内容讲解"></a>内容讲解</h2><p> servlet映射路径一共有四种：</p><p> <strong>1.完全路径匹配：就是访问什么在web.xml中配置什么路径。&#x2F;hello   &#x2F;user  掌握</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>a_servlet_01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">GenericServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathOneServlet</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PathOneServlet...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>pathOneServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.itheima.sh.a_servlet_01.PathOneServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>pathOneServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--完全路径匹配--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/user/one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 2.目录匹配：&#x2F;user&#x2F;* 只要访问以&#x2F;user开始的的路径都可以访问</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>a_servlet_01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">GenericServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathTwoServlet</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PathTwoServlet...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>pathTwoServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.itheima.sh.a_servlet_01.PathTwoServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>pathTwoServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--目录匹配--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/user/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 3.后缀名匹配：*.do  *.action   <strong>注意这里不能书写&#x2F;</strong>  访问以.do或者.action结尾的资源路径，后缀名都属于标识 符</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>a_servlet_01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">GenericServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathThrServlet</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PathThrServlet...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>pathThrServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.itheima.sh.a_servlet_01.PathThrServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>pathThrServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--后缀名匹配，前面不能加/--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 4.缺省路径：&#x2F;      如果上述三种路径都不满足就访问缺省路径。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>a_servlet_01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">GenericServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathFourServlet</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PathFourServlet...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>pathFourServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.itheima.sh.a_servlet_01.PathFourServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>pathFourServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--缺省路径匹配--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内容小结-7"><a href="#内容小结-7" class="headerlink" title="内容小结"></a>内容小结</h2><p>上述访问路径的优先级：  完全路径匹配 &gt; 目录匹配  &gt;  后缀名匹配  &gt; 缺省路径</p><h1 id="10-绝对路径-掌握"><a href="#10-绝对路径-掌握" class="headerlink" title="10.绝对路径(掌握)"></a>10.绝对路径(掌握)</h1><h2 id="学习目标-9"><a href="#学习目标-9" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>能够在代码中使用绝对路径</li></ul><h2 id="内容讲解-10"><a href="#内容讲解-10" class="headerlink" title="内容讲解"></a>内容讲解</h2><p>【1】绝对路径有两种写法：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1.带网络三要素：   http://ip地址:端口号/资源路径2.不带网络三要素：   /资源路径   这里的/不能省略 ，要求访问的资源必须在同一个服务器上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>【2】代码实现</p><p>html:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://127.0.0.1:8080/pathAbso<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>带网络三要素的绝对路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/pathAbso<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>不带网络三要素的绝对路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Servlet:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>b_servlet_02</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathAbso01Servlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"post...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>web.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>pathAbso01Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.itheima.sh.a_servlet_01.PathAbso01Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>pathAbso01Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/pathAbso<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内容小结-8"><a href="#内容小结-8" class="headerlink" title="内容小结"></a>内容小结</h2><p>绝对路径的写法：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1.带网络三要素：   http://ip地址:端口号/资源路径2.不带网络三要素：   /资源路径   这里的/不能省略 ，要求访问的资源必须在同一个服务器上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="11-相对路径-理解"><a href="#11-相对路径-理解" class="headerlink" title="11.相对路径(理解)"></a>11.相对路径(理解)</h1><h2 id="学习目标-10"><a href="#学习目标-10" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>能够理解什么是相对路径</li></ul><h2 id="内容讲解-11"><a href="#内容讲解-11" class="headerlink" title="内容讲解"></a>内容讲解</h2><p>【1】 相对路径：不是相对当前项目，而是针对当前浏览器地址栏上的url而言的。</p><p>【2】案例一：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span>假设我们在浏览器地址栏访问的页面路径： http://localhost:8080/demo01.html</span><span class="token title important"><span class="token punctuation">#</span>而在demo01.html页面想使用相对路径访问servlet： http://localhost:8080/pathAbso</span> 说明：       如果在http://localhost:8080/demo01.html 页面中访问 http://localhost:8080/pathAbso 该servlet，我们通过url  观察发现只有最后一级目录不一样，所以在demo01.html页面中相对的路径的写法是：./pathAbso  这里的./表示当前路径 可以省         略不写即直接写 pathAbso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo01.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./pathAbso<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>相对路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pathAbso<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>相对路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>【3】案例二：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 如果在http://localhost:8080/aaa/demo02.html 页面中访问 http://localhost:8080/pathAbso 该servlet</span>  我们通过url观察发现在demo02.html也面中书写访问的servlet即pathAbso和当前页面的父目录aaa是同等目录，所以我这里先找该页面     的父目录，然后在找该servlet即pathAbso  ../pathAbso    ../表示上一级目录或者父目录，找到父目录之后再找servlet即pathAbso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>demo02.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../pathAbso<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>相对路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="内容小结-9"><a href="#内容小结-9" class="headerlink" title="内容小结"></a>内容小结</h2><p>1.相对路径是不是相对当前项目，而是相对于当前浏览器地址栏上的url而言的</p><p>2.在相对路径写法中：</p><p>​.&#x2F;表示当前路径 可以省略不写</p><p>​..&#x2F;表示上一级目录或者父目录</p><h1 id="12-Servlet3-0注解开发-（掌握）"><a href="#12-Servlet3-0注解开发-（掌握）" class="headerlink" title="12.Servlet3.0注解开发 （掌握）"></a>12.Servlet3.0注解开发 （掌握）</h1><h2 id="学习目标-11"><a href="#学习目标-11" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>掌握在idea中使用注解开发servlet</li></ul><h2 id="内容讲解-12"><a href="#内容讲解-12" class="headerlink" title="内容讲解"></a>内容讲解</h2><p>【1】问题</p><p>说明：之前我们都是使用web.xml进行servlet映射路径的配置。这样配置的弊端：web.xml中具有非常多个配置信息，显得非常臃肿并且容易出错。</p><p>【2】解决问题</p><p>使用web.xml配置映射路径的方式属于servlet2.5的技术。从servlet3.0开始引入注解配置访问servlet取代了web.xml配置。</p><p>【3】配置步骤：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1.在包上右键---new---servlet(create new Servlet)2.输入类名3.在方法体内输入逻辑代码4.在浏览器地址栏中输入访问的路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>【4】实现</p><p>1.在包上右键—new—servlet(create new Servlet)</p><p>2.输入类名</p><p>3.在方法体内输入逻辑代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>c_servlet_anno_03</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/annoDemo01Servlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoDemo01Servlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注解开发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.在浏览器地址栏中输入访问的路径</p><h1 id="13-修改idea创建注解的servlet模板"><a href="#13-修改idea创建注解的servlet模板" class="headerlink" title="13.修改idea创建注解的servlet模板"></a>13.修改idea创建注解的servlet模板</h1><h2 id="学习目标-12"><a href="#学习目标-12" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>能够在idea中修改创建Servlet的模板代码</li></ul><h2 id="内容讲解-13"><a href="#内容讲解-13" class="headerlink" title="内容讲解"></a>内容讲解</h2><p>1.File—-Settings</p><p>2.找到servlet的模板，按照如下修改</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">#<span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token punctuation">&#123;</span><span class="token constant">PACKAGE_NAME</span><span class="token punctuation">&#125;</span> <span class="token operator">&amp;&amp;</span> $<span class="token punctuation">&#123;</span><span class="token constant">PACKAGE_NAME</span><span class="token punctuation">&#125;</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">package</span> $<span class="token punctuation">&#123;</span><span class="token constant">PACKAGE_NAME</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>#end#<span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"File Header.java"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@javax.servlet.annotation.WebServlet</span><span class="token punctuation">(</span><span class="token string">"/$&#123;Entity_Name&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> $<span class="token punctuation">&#123;</span><span class="token class-name">Class_Name</span><span class="token punctuation">&#125;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletException</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span> <span class="token punctuation">&#123;</span>            <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletException</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内容小结-10"><a href="#内容小结-10" class="headerlink" title="内容小结"></a>内容小结</h2><p>1.在Servlet的模板代码中修改在doPost方法体中调用doGet方法</p><p>2.在Servlet的模板代码中修改WebServlet注解的属性值为：”&#x2F;${Entity_Name}”</p><h1 id="14-关于servlet3-0注解开发的疑问-配置路径省略了属性urlPatterns"><a href="#14-关于servlet3-0注解开发的疑问-配置路径省略了属性urlPatterns" class="headerlink" title="14.关于servlet3.0注解开发的疑问_配置路径省略了属性urlPatterns"></a>14.关于servlet3.0注解开发的疑问_配置路径省略了属性urlPatterns</h1><h2 id="学习目标-13"><a href="#学习目标-13" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>能够理解servlet3.0注解开发配置路径的含义</li></ul><h2 id="内容讲解-14"><a href="#内容讲解-14" class="headerlink" title="内容讲解"></a>内容讲解</h2><p>正常我们在WebServlet注解中配置的路径赋值给属性urlPatterns，但是urlPatterns不能省略的，在一个注解中，如果含有多个属性，并且每个属性都有默认值，此时给value赋值可以省略value属性。</p><p>注意啦：在WebServlet注解中value等同于urlPatterns属性。</p><h2 id="内容小结-11"><a href="#内容小结-11" class="headerlink" title="内容小结"></a>内容小结</h2><p>1.在WebServlet注解中value等同于urlPatterns属性，实际开发中我们实际上省略的是value属性</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端W3school记录</title>
      <link href="/2023/04/16/qian-duan-kuai-su-ru-men/"/>
      <url>/2023/04/16/qian-duan-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="0-学习网站链接"><a href="#0-学习网站链接" class="headerlink" title="0.学习网站链接"></a>0.学习网站链接</h2><p><a href="https://www.w3school.com.cn/index.html">w3school 在线教程</a></p><h2 id="1-我Google的一些小知识"><a href="#1-我Google的一些小知识" class="headerlink" title="1.我Google的一些小知识"></a>1.我Google的一些小知识</h2><p>1.HTML和HTML5:HTML5已经远远超越了标记语言的范畴，它的设计目的是在移动设备上支持多媒体，和HTML比起来，深度和广度上都做了进一步提升。</p><p>2.标签复制</p><ul><li><html> 与 </html> 之间的文本描述网页</li><li><body> 与 </body> 之间的文本是可见的页面内容</li></ul><p>HTML 标题（Heading）是通过 </p><h1> - <h6> 等标签进行定义的。<p></p><p>HTML 段落是通过 </p><p> 标签进行定义的。</p><p>HTML 链接是通过 <a> 标签进行定义的。</a></p><p>HTML 图像是通过 <img> 标签进行定义的</p><p>3.属性</p><p>HTML 链接由 <a> 标签定义。链接的地址在 href 属性中指定：</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">属性和属性值对大小写不敏感属性值应该始终被包括在引号内。双引号是最常用的，不过使用单引号也没有问题。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 拥有关于对齐方式的附加信息。    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yellow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 拥有关于背景颜色的附加信息    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 拥有关于表格边框的附加信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.标题</p><p>默认情况下，HTML 会自动地在块级元素前后添加一个额外的空行，比如段落、标题元素前后。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span> 标签在 HTML 页面中创建水平线。注释<span class="token comment">&lt;!-- This is a comment --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>5.段落</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>如果您希望在不产生一个新段落的情况下进行换行（新行），请使用 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 标签：您也许发现 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> 与 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 很相似。在 XHTML、XML 以及未来的 HTML 版本中，不允许使用没有结束标签（闭合标签）的 HTML 元素。即使 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> 在所有浏览器中的显示都没有问题，使用 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> 也是更长远的保障。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.样式</p><p>建议使用外部样式而不是内联样式</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span>center</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>This is a heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-family</span><span class="token punctuation">:</span>arial<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>A paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>This is a heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.响应式布局，应该有些标签参与布局</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">div 行级标签span 块级标签用来写文字header定义文档或节的页眉nav定义导航链接的容器section定义文档中的节article定义独立的自包含文章aside定义内容之外的内容（比如侧栏）footer定义文档或节的页脚details定义额外的细节summary定义 details 元素的标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.input框</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">input介绍text，radio，submitaction属性目的地method区分post和get字段input的name属性进行字段匹配target是否本页面打开标签input，select-option，textarea，button，h5的datalistinput类型text，password，submit，radio，checkbox，buttoninput属性diaabled，size，maxlength，autocomplete， autofocus，placeholder，required, patternform属性formaction，formmethod，formtarget<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-CSS-W3school学习复习总结"><a href="#2-CSS-W3school学习复习总结" class="headerlink" title="2.CSS W3school学习复习总结"></a>2.CSS W3school学习复习总结</h1><h2 id="CSS初级"><a href="#CSS初级" class="headerlink" title="CSS初级"></a>CSS初级</h2><p>1.css语法：选择器:控制器{</p><p>}</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">p &#123;  color: red;  text-align: center;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.选择器</p><ul><li>简单选择器（根据名称、id、类来选取元素）</li><li>组合器选择器（根据它们之间的特定关系来选取元素）</li><li>伪类选择器（根据特定状态选取元素）</li><li>伪元素选择器（选取元素的一部分并设置其样式）</li><li>属性选择器(根据属性或属性值来选取元素）</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">元素选择器：如上2.简单选择器(名称,id，类)这条 CSS 规则将应用于 id="para1" 的 HTML 元素id:#para1 &#123;...&#125;   类:.center&#123;...&#125;p.center&#123;...&#125;3.通用选择器*&#123;  text-align: center; color: blue;&#125;4.分组选择器h1&#123;&#125; a&#123;&#125; li&#123;&#125;h1, h2, p&#123;&#125;5.属性选择器a[href][title] &#123;color:red;&#125;6.后代选择器上面这个规则会把作为 h1 元素后代的 em 元素的文本变为 红色h1 em &#123;color:red;&#125;7.子元素选择器不希望是后代，希望是子元素h1 > strong &#123;color:red;&#125;8.相邻兄弟选择器如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器h1 + p &#123;margin-top:50px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.css使用</p><ul><li>外部 CSS</li><li>内部 CSS</li><li>行内 CSS</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">外部CSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mystyle.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    内部CSS    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> linen<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> maroon<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>        行内CSS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>层叠顺序</p><p>当为某个 HTML 元素指定了多个样式时，会使用哪种样式呢？</p><p>页面中的所有样式将按照以下规则“层叠”为新的“虚拟”样式表，其中第一优先级最高：</p><ol><li>行内样式（在 HTML 元素中）</li><li>外部和内部样式表（在 head 部分）</li><li>浏览器默认样式</li></ol><p>4.注释</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">CSS&#x2F;* 这是一条单行注释 *&#x2F;&#x2F;* 这是一条多行的注释 *&#x2F; 从 HTML 教程中，您学习到可以使用 &lt;!--...--&gt; 语法在 HTML 源代码中添加注释。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.颜色</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">例子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>DodgerBlue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>China<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>DodgerBlue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>China is a great country!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>RGB颜色rgb(red, green, blue)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 99<span class="token punctuation">,</span> 71<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>rgba(255, 99, 71, 1)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>HEX 颜色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#ffffff<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>#ffffff<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>HSL 颜色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">hsl</span><span class="token punctuation">(</span>248<span class="token punctuation">,</span> 53%<span class="token punctuation">,</span> 58%<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>hsl(248, 53%, 58%)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.背景</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">background-color - 属性指定元素的背景色 通过上个指定background-image - 图片链接background-repeat - 图片是否竖直放或者水平放background-attachment - 背景附着background-position - 图片位置1.opacity: 0.3 - 透明度2.body &#123;  background-image: url("paper.gif");&#125;3.默认情况下，background-image 属性在水平和垂直方向上都重复图像。某些图像应只适合水平或垂直方向上重复，否则它们看起来会很奇怪，如下所示body &#123;  background-image: url("gradient_bg.png");  background-repeat: repeat-x;&#125;tips:如需垂直重复图像，请设置 background-repeat: repeat-y;background-repeat: no-repeat;不重复4.background-position属性用于指定背景图像的位置。body &#123;  background-image: url("tree.png");  background-repeat: no-repeat;  background-position: right top;&#125;5.背景附着body &#123;  background-image: url("tree.png");  background-repeat: no-repeat;  background-position: right top;  background-attachment: fixed/scroll;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简写：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">background: #ffffff url("tree.png") no-repeat right top;background-colorbackground-imagebackground-repeatbackground-attachmentbackground-position没了无所谓，继续写就行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.边框</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">除非设置了 border-style 属性，否则其他 CSS 边框属性（将在下一章中详细讲解）都不会有任何作用！1.border-style 属性指定要显示的边框类型dotted - 定义点线边框    dashed - 定义虚线边框    solid - 定义实线边框    double - 定义双边框    groove - 定义 3D 坡口边框。效果取决于 border-color 值    ridge - 定义 3D 脊线边框。效果取决于 border-color 值    inset - 定义 3D inset 边框。效果取决于 border-color 值    outset - 定义 3D outset 边框。效果取决于 border-color 值    none - 定义无边框    hidden - 定义隐藏边框2.边框宽度border-width 属性指定四个边框的宽度 border-style: solid;   border-width: 5px 20px; /* 上边框和下边框为 5px，其他边为 20px */ border-width: 25px 10px 4px 35px; /* 上边框 25px，右边框 10px，下边框 4px，左边框 35px */3.边框颜色 border-color 属性用于设置四个边框的颜色。 可以通过以下方式设置颜色：        name - 指定颜色名，比如 "red"  --- border-color: green;        HEX - 指定十六进制值，比如 "#ff0000"        RGB - 指定 RGB 值，比如 "rgb(255,0,0)"        HSL - 指定 HSL 值，比如 "hsl(0, 100%, 50%)"        transparent        注释：如果未设置 border-color，则它将继承元素的颜色注意可以对边框各个边进行设置上 右 下 左上 左右 下上下 左右上下左右4.圆角设置border-radius: 5px;5.分别设置border-style: solid;border-top: thick double #ff0000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简写:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">border 属性是以下各个边框属性的简写属性：    border-width    border-style（必需）    border-colorp &#123;  border: 5px solid red;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.内外边距</p><blockquote><p>外边距</p></blockquote><p>有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">1.CSS margin 属性用于在任何定义的边框之外，为元素周围创建空间。允许负值CSS 拥有用于为元素的每一侧指定外边距的属性：    margin-top    margin-right    margin-bottom    margin-left所有外边距属性都可以设置以下值：    auto - 浏览器来计算外边距    length - 以 px、pt、cm 等单位指定外边距    % - 指定以包含元素宽度的百分比计的外边距    inherit - 指定应从父元素继承外边距2.上右下左margin: auto：可以将 margin 属性设置为 auto，以使元素在其容器中水平居中。inheritp.ex1 &#123;  margin-left: inherit; &#x2F;&#x2F;继承父类的左外边距&#125;3.外边距合并简单地说，外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。div1 marign-bottom 20px div2.margin-top 10px3.1两个 div 之间的外边距是 20px，而不是 30px（20px + 10px）同边框无关3.2当一个元素包含在另一个元素中时（假设没有内边距或边框把外边距分隔开），它们的上和&#x2F;或下外边距也会发生合并<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>内边距</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">CSS padding 属性用于在任何定义的边界内的元素内容周围生成空间。不允许负值。    padding-top    padding-right    padding-bottom    padding-left    所有内边距属性都可以设置以下值：    length - 以 px、pt、cm 等单位指定内边距    % - 指定以包含元素宽度的百分比计的内边距    inherit - 指定应从父元素继承内边距CSS width 属性指定元素内容区域的宽度。内容区域是元素（盒模型）的内边距、边框和外边距内的部分。因此，如果元素拥有指定的宽度，则添加到该元素的内边距会添加到元素的总宽度中。这通常是不希望的结果。div &#123;  width: 300px;  padding: 25px;&#125;=== 325px 使用 box-sizing: border-box;保持300px<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9.高度和宽度</p><p>!!!<code>height</code> 和 <code>width</code> 属性不包括内边距、边框或外边距！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">height 和 width 属性不包括内边距、边框或外边距。它设置的是元素内边距、边框以及外边距内的区域的高度或宽度。    auto - 默认。浏览器计算高度和宽度。    length - 以 px、cm 等定义高度/宽度。    % - 以包含块的百分比定义高度/宽度。    initial - 将高度/宽度设置为默认值。    inherit - 从其父值继承高度/宽度。max-width 属性用于设置元素的最大宽度能够改善浏览器对小窗口的处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.边框模型</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230416183228.png"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">    内容 - 框的内容，其中显示文本和图像。    内边距 - 清除内容周围的区域。内边距是透明的。    边框 - 围绕内边距和内容的边框。    外边距 - 清除边界外的区域。外边距是透明的。元素框的最内部分是实际的内容，直接包围内容的是内边距。内边距呈现了元素的背景。内边距的边缘是边框。边框以外是外边距，外边距默认是透明的，因此不会遮挡其后的任何元素。内边距、边框和外边距都是可选的，默认值是零。但是，许多元素将由用户代理样式表设置外边距和内边距。可以通过将元素的 margin 和 padding 设置为零来覆盖这些浏览器样式。这可以分别进行，也可以使用通用选择器对所有元素进行设置：    * &#123;      margin: 0;      padding: 0;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Very Important </p><p>width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。</p><p>假设框的每个边上有 10 个像素的外边距和 5 个像素的内边距。如果希望这个元素框达到 100 个像素，就需要将内容的宽度设置为 70 像素</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">元素的总宽度应该这样计算：元素总宽度 &#x3D; 宽度 + 左内边距 + 右内边距 + 左边框 + 右边框 + 左外边距 + 右外边距元素的总高度应该这样计算：元素总高度 &#x3D; 高度 + 上内边距 + 下内边距 + 上边框 + 下边框 + 上外边距 + 下外边距<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.轮廓</p><p>轮廓在边框之外，不属于尺寸的一部分</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">轮廓是在元素周围绘制的一条线，在边框之外，以凸显元素。1.CSS 拥有如下轮廓属性：    outline-style    outline-color    outline-width    outline-offset    outline轮廓与边框不同！不同之处在于：轮廓是在元素边框之外绘制的，并且可能与其他内容重叠。同样，轮廓也不是元素尺寸的一部分；元素的总宽度和高度不受轮廓线宽度的影响。2.outline-style 属性指定轮廓的样式，并可设置如下值：    dotted - 定义点状的轮廓。    dashed - 定义虚线的轮廓。    solid - 定义实线的轮廓。    double - 定义双线的轮廓。    groove - 定义 3D 凹槽轮廓。    ridge - 定义 3D 凸槽轮廓。    inset - 定义 3D 凹边轮廓。    outset - 定义 3D 凸边轮廓。    none - 定义无轮廓。    hidden - 定义隐藏的轮廓。3.outline-width 属性指定轮廓的宽度4.outline-color 属性用于设置轮廓的颜色。name, HEX,RGB,HSL, invert颜色反转5.简写outline 属性是用于设置以下各个轮廓属性的简写属性：    outline-width    outline-style（必需）    outline-color6.outline-offset 属性在元素的轮廓与边框之间添加空间。元素及其轮廓之间的空间是透明的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>12.文本内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1.color 属性用于设置文本的颜色。颜色由以下值指定：颜色名，十六进制数据，RGBbody &#123; color: blue;&#125;2.background-color 属性和 color 属性body &#123; background-color: lightgrey;color: blue;&#125;3.text-align 属性用于设置文本的水平对齐方式。center, left, right4.vertical-align 属性设置元素的垂直对齐方式top  middle, bottom5.text-decoration 属性用于设置或删除文本装饰。text-decoration: none; 通常用于从链接上删除下划线：上中下无overline/line-through/underline/nonoe6.text-transform 属性用于指定文本中的大写和小写字母。它可用于将所有内容转换为大写或小写字母，或将每个单词的首字母大写：uppercase/lowercase/capitalize7.文字缩进 text-indent 属性用于指定文本第一行的缩进：8.letter-spacing 属性用于指定文本中字符之间的间距。9.line-height 属性用于指定行之间的间距。10.word-spacing 属性用于指定文本中单词之间的间距。11.white-space 属性指定元素内部空白的处理方式。12.text-shadow 属性为文本添加阴影。h1 &#123;  text-shadow: 2px 2px 5px red;&#125;水平阴影，垂直阴影，模糊效果，颜色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>13.字体</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1.我们使用 font-family 属性规定文本的字体:font-family: "Times New Roman", Times, serif;2.font-style 属性主要用于指定斜体文本normal - 文字正常显示    italic - 文本以斜体显示    oblique - 文本为“倾斜”（倾斜与斜体非常相似，但支持较少）3.font-weight 属性指定字体的粗细font-size 属性设置文本的大小px/em/百分比em/vm1em 等于当前字体大小。浏览器中的默认文本大小为 16px。因此，默认大小 1em 为 16px。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简写</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">font 属性是以下属性的简写属性：    font-style    font-variant    font-weight    font-size/line-height    font-familyp.a &#123;  font: 20px Arial, sans-serif;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>14.图标</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://kit.fontawesome.com/a076d05399.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-bars<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>15.链接</p><pre class="line-numbers language-zml" data-language="zml"><code class="language-zml">链接可以使用任何 CSS 属性（例如 color、font-family、background 等）来设置样式四种链接状态分别是：    a:link - 正常的，未访问的链接    a:visited - 用户访问过的链接    a:hover - 用户将鼠标悬停在链接上时    a:active - 链接被点击时    text-decoration 属性主要用于从链接中删除下划线none    background-color 属性可用于指定链接的背景色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>16.列表</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">无序列表（<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>）- 列表项用的是项目符号标记有序列表（<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>）- 列表项用的是数字或字母标记   1.list-style-image 属性将图像指定为列表项标记：    ul &#123;  list-style-image: url('sqpurple.gif');&#125;    2.list-style-position 属性指定列表项标记（项目符号）的位置。    "list-style-position: inside;" 表示项目符号将在列表项内。由于它是列表项的一部分，因此它将成为文本的一部分，并在开头推开文本：    3.list-style-type:none<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>17.表格</p><p>省略</p><h2 id="CSS中级"><a href="#CSS中级" class="headerlink" title="CSS中级"></a>CSS中级</h2><p>1.display</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">display 属性规定是否&#x2F;如何显示元素。block&#x2F;inline 块级&#x2F;行级display: none; 通常与 JavaScript 一起使用，以隐藏和显示元素，而无需删除和重新创建它们。display:none 还是 visibility:hiddendisplay 属性设置为 none 可以隐藏元素。该元素将被隐藏，并且页面将显示为好像该元素不在其中visibility:hidden; 也可以隐藏元素。但是，该元素仍将占用与之前相同的空间。元素将被隐藏，但仍会影响布局<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.max-width</p><p>自适应窗口，内容如果不全会补全到下一行</p><p>3.定位</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">position 属性规定应用于元素的定位方法的类型。    static    relative    fixed    absolute    sticky1.position:static静态定位的元素不受 top、bottom、left 和 right 属性的影响。div.static &#123;      position: static;      border: 3px solid #73AD21;&#125;2.position: relative;设置相对定位的元素的 top、right、bottom 和 left 属性将导致其偏离其正常位置进行调整。不会对其余内容进行调整来适应元素留下的任何空间。3.position: fixed;position: fixed; 的元素是相对于视口定位的，这意味着即使滚动页面，它也始终位于同一位置。 top、right、bottom 和 left 属性用于定位此元素。4.position: absolute;被定位的”元素是其位置除 static 以外的任何元素position: absolute; 的元素相对于最近的定位祖先元素进行定位（而不是相对于视口定位，如 fixed）。然而，如果绝对定位的元素没有祖先，它将使用文档主体（body），并随页面滚动一起移动。5.重复定位    在对元素进行定位时，它们可以与其他元素重叠。    z-index 属性指定元素的堆栈顺序（哪个元素应放置在其他元素的前面或后面）。    元素可以设置正或负的堆叠顺序：z-index: -1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.溢出</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">CSS overflow 属性控制对太大而区域无法容纳的内容的处理方式。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>overflow</code> 属性可设置以下值：</p><ul><li><code>visible</code> - 默认。溢出没有被剪裁。内容在元素框外渲染</li><li><code>hidden</code> - 溢出被剪裁，其余内容将不可见</li><li><code>scroll</code> - 溢出被剪裁，同时添加滚动条以查看其余内容</li><li><code>auto</code> - 与 <code>scroll</code> 类似，但仅在必要时添加滚动条</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">div &#123;  overflow-x: hidden; /* 隐藏水平滚动栏 */  overflow-y: scroll; /* 添加垂直滚动栏 */&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.浮动</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">1.float 属性用于定位和格式化内容，例如让图像向左浮动到容器中的文本那里。float 属性可以设置以下值之一：    left - 元素浮动到其容器的左侧    right - 元素浮动在其容器的右侧    none - 元素不会浮动（将显示在文本中刚出现的位置）。默认值。    inherit - 元素继承其父级的 float 值2.清除浮动clear 属性指定哪些元素可以浮动于被清除元素的旁边以及哪一侧。clear 属性可设置以下值之一：    none - 允许两侧都有浮动元素。默认值    left - 左侧不允许浮动元素    right- 右侧不允许浮动元素    both - 左侧或右侧均不允许浮动元素    inherit - 元素继承其父级的 clear 值使用 clear 属性的最常见用法是在元素上使用了 float 属性之后。在清除浮动时，应该对清除与浮动进行匹配：如果某个元素浮动到左侧，则应清除左侧。您的浮动元素会继续浮动，但是被清除的元素将显示在其下方。1.Clear2.chearfix Hack.clearfix::after &#123;      content: &quot;&quot;;      clear: both;      display: table;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">您可以轻松地并排创建三个浮动框。但是，当您添加一些内容来扩大每个框的宽度（例如，内边距或边框）时，这个框会损坏。 box-sizing 属性允许我们在框的总宽度（和高度）中包括内边距和边框，确保内边距留在框内而不会破裂。* &#123;  box-sizing: border-box;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>5.inline-block</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">与 display: inline 相比，主要区别在于 display: inline-block 允许在元素上设置宽度和高度如果设置了 display: inline-block，将保留上下外边距/内边距，而 display: inline 则不会。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6.对齐</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">要使块元素（例如 &lt;div&gt; ）水平居中，请使用 margin: auto;    如果仅需在元素内居中文本，请使用 text-align: center;：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7.伪类</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">伪类用于定义元素的特殊状态例如，它可以用于：    设置鼠标悬停在元素上时的样式    为已访问和未访问链接设置不同的样式    设置元素获得焦点时的样式a:link &#123;  color: #FF0000;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h6></h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合回顾</title>
      <link href="/2023/03/15/java-ji-he-fu-xi-hui-gu/"/>
      <url>/2023/03/15/java-ji-he-fu-xi-hui-gu/</url>
      
        <content type="html"><![CDATA[<h1 id="Collection学习前瞻"><a href="#Collection学习前瞻" class="headerlink" title="Collection学习前瞻"></a>Collection学习前瞻</h1><h2 id="1-Collection一些常用的方法"><a href="#1-Collection一些常用的方法" class="headerlink" title="1.Collection一些常用的方法"></a>1.Collection一些常用的方法</h2><p>collection是一个接口，要使用他的方法要使用他的实现类实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//Test</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//add</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"scy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[scy, test]</span>        <span class="token comment">//remove</span>        collection<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"scy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[test]</span>        <span class="token comment">//isEmpty</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>        <span class="token comment">//contains</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>        <span class="token comment">//toArray</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//奇奇怪怪的</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-遍历集合的三种方式"><a href="#2-遍历集合的三种方式" class="headerlink" title="2.遍历集合的三种方式"></a>2.遍历集合的三种方式</h2><h3 id="2-1迭代器遍历-所有单列"><a href="#2-1迭代器遍历-所有单列" class="headerlink" title="2.1迭代器遍历(所有单列)"></a>2.1迭代器遍历(所有单列)</h3><p><strong>迭代器就是Iterator的简称，专门用来对Collection进行遍历用的，学习迭代器就是为了遍历集合</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230315154141.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Collectin接口及成立Iterable接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Iterator接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.</span>    <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"remove"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//4.</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//Test</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> collection1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"scy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"zjj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> collection1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 输出 ”scy“,"test","zjj"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代器注意事项：</p><p>1.当迭代器迭代元素完成后，不能继续next获取元素，否则会报错:NoSuchElementException</p><p>2.当迭代器在使用过程中，不能使用金额对象增删元素，否则会报错CocurrentModificationException.如果要删除可以使用迭代器来删除</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SAXException</span><span class="token punctuation">,</span> <span class="token class-name">JAXBException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2增强for遍历-所有单列"><a href="#2-2增强for遍历-所有单列" class="headerlink" title="2.2增强for遍历(所有单列)"></a>2.2增强for遍历(所有单列)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 格式：  for(集合中的元素类型 变量名 : 单列集合或者数组)&#123;  变量名代表集合或数组中每一个元素  &#125;    优：方便遍历  劣：没有索引，遍历的目标不能为null  底层仍然是Iterator*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> collection1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"scy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"zjj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> collection1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3普通for遍历-只有List"><a href="#2-3普通for遍历-只有List" class="headerlink" title="2.3普通for遍历(只有List)"></a>2.3普通for遍历(只有List)</h3><h2 id="3-泛型介绍"><a href="#3-泛型介绍" class="headerlink" title="3.泛型介绍"></a>3.泛型介绍</h2><blockquote><p>泛型的定义</p></blockquote><p><strong>泛型是一种类型参数，专门用来保存类型用的。</strong></p><p>最早接触泛型是在ArrayList<E>，这个E就是所谓的泛型了。使用ArrayList时，只要给E指定某一个类型，里面所有用到泛型的地方都会被指定对应的类型。</E></p><blockquote><p>泛型带来的好处</p></blockquote><p><strong>不用泛型带来的问题:</strong></p><p>集合若不指定泛型，默认就是0bject。存储的元素类型自动提升为0bject类型。获取元素时得到的都是Object，若要调用特有方法需要转型，给我们编程带来麻烦.</p><p><strong>使用泛型带来的好处:</strong></p><p>可以在编译时就对类型做判断，避免不必要的类型转换操作，精简代码，也避免了运行时期因为类型转换导致的错误。</p><blockquote><p>泛型的注意事项</p></blockquote><p>泛型在代码运行时，泛型会被擦除。后面学习反射的时候，可以实现在代码运行的过程中添加其他类型的数据到集合。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">        ArrayList&lt;String&gt; list1 &#x3D; new ArrayList&lt;&gt;();        ArrayList&lt;Integer&gt; list2 &#x3D; new ArrayList&lt;&gt;();        &#x2F;&#x2F;没有指定默认是Object        ArrayList list3 &#x3D; new ArrayList&lt;&gt;(); &#x2F;&#x2F;Object&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;    &#x2F;&#x2F;泛型没有指定类型，默认就是0bject        ArrayList list &#x3D; new ArrayList();        list.add( &quot;He1lo&quot;);        list.add( &quot;wor1d&quot;);        list.add( 100);        list.add(false);        &#x2F;&#x2F;集合中的数据就比较混乱,会给获取数据带来麻烦        for (Object obj : list) &#123;            String str &#x3D; (String) obj;            &#x2F;&#x2F;当遍历到非String类型数据，就会报异常出错            System.out.println(str +&quot;长度为:&quot; + str.length());&#125;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1自定义泛型类"><a href="#3-1自定义泛型类" class="headerlink" title="3.1自定义泛型类"></a>3.1自定义泛型类</h3><p>使用时机：类中定义属性不知道具体类型时，就可以使用泛型</p><p>泛型类中确定时机：创建对象的时候可以指定具体类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定义方式如下</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">,</span> <span class="token class-name">Y</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">X</span> xObj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Test</span> <span class="token class-name">Student</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2自定义泛型接口"><a href="#3-2自定义泛型接口" class="headerlink" title="3.2自定义泛型接口"></a>3.2自定义泛型接口</h3><p>使用时间：定义接口时，内部方法中其参数类型，返回类型不确定时</p><p>接口格式：如下</p><p>泛型接口中泛型的确定时机：</p><p>​1.子类可以确定类型，在实现接口时，直接确定类型</p><p>​2.子类如果不确定类型，回到泛型类的使用</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public interface MyCollection&lt;E&gt; &#123;    public abstract void add(E e);    public abstract void remove(E e);&#125;&#x2F;&#x2F;1.如果泛型没有只当，那么是Object类型class MyCollectionImpl1 implements MyCollection&#123;    @Override    public void add(Object o) &#123;&#125;    @Override    public void remove(Object o) &#123;&#125;&#125;&#x2F;&#x2F;可以在实现接口时，确定接口泛型类型class MyCollectionImpl2 implements MyCollection&lt;String&gt;&#123;    @Override    public void add(String s) &#123;&#125;    @Override    public void remove(String s) &#123;&#125;&#125;&#x2F;&#x2F;3.如果实现类接口不指定，就变成了泛型的使用class MyCollectionImpl3&lt;A&gt; implements MyCollection&lt;A&gt;&#123;    @Override    public void add(A a) &#123;&#125;    @Override    public void remove(A a) &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3自定义泛型方法"><a href="#3-3自定义泛型方法" class="headerlink" title="3.3自定义泛型方法"></a>3.3自定义泛型方法</h3><p>泛型格式： 修饰符<T> 返回值类型 方法名（方法参数）</T></p><p>public static <E> void getElements(E e){</E></p><p>}</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">&#x2F;&#x2F;ArrayList类型字符串，转成数组  &#x2F;&#x2F; &lt;T&gt; T[] toArray(T[] a);  public void test()&#123;      ArrayList&lt;String&gt; list &#x3D; new ArrayList&lt;&gt;();      list.add(&quot;scy&quot;);      list.add(&quot;zjj&quot;);      list.add(&quot;ours&quot;);      String[] str &#x3D; new String[list.size()];      String[] strings &#x3D; list.toArray(str);      System.out.println(Arrays.toString(strings));  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4通配符"><a href="#3-4通配符" class="headerlink" title="3.4通配符"></a>3.4通配符</h3><blockquote><p>通配符介绍</p></blockquote><p>当我们对泛型的类型确定不了，而想要表达的可以是任意类型，可以使用泛型通配符给定。符号就是一个问号:?表示任意类型，用来给泛型指定的一种通配值。如下:</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public static void shuffle(List&lt;?&gt; list) &#123;       。。。&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>泛型通配符的使用注意</p></blockquote><p>1）泛型通配符搭配集合使用一般在方法的参数中比较常见</p><p>2）在集合中泛型是不支持多态的，如果为了匹配任意类型，我们就会使用泛型通配符了。</p><p>3）方法中的参数是一个集合,集合如果携带了通配符,集合的类型会提升为Object类型。集合不能进行添加和修改操作，可以删除和获取</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class Student&lt;X, Y&gt; &#123;    @Test    &#x2F;&#x2F;ArrayList类型字符串，转成数组    &#x2F;&#x2F; &lt;T&gt; T[] toArray(T[] a);    public void test()&#123;        ArrayList&lt;String&gt; list1 &#x3D; new ArrayList&lt;&gt;();        ArrayList&lt;Object&gt; list2 &#x3D; new ArrayList&lt;&gt;();        ArrayList&lt;Integer&gt; list3 &#x3D; new ArrayList&lt;&gt;();        userList(list1);        userList(list2);        userList(list3);    &#125;    public static void userList(ArrayList&lt;?&gt; list)&#123;            &#x2F;&#x2F;不能添加修改，只能获取和删除            &#x2F;&#x2F; list.add(&quot;sdf&quot;);            &#x2F;&#x2F; list.set()    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上下限类型</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230315170219.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show1</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show1</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-数据结构简单概念介绍"><a href="#4-数据结构简单概念介绍" class="headerlink" title="4.数据结构简单概念介绍"></a>4.数据结构简单概念介绍</h2><p>1.栈：进栈出栈，栈顶元素，栈底元素，先进后出</p><p>2.队列：入队出队，先进先出</p><p>3.数组：查询数据通过地址值和索引定位，<strong>查询速度快</strong></p><p>​  删除数据要将原始数据删除，后面的数据后移，<strong>删除效率低</strong></p><p>​ 添加数据添加位置的每个数据后移，再添加数据，<strong>添加效率极低</strong></p><p>4.链表：<strong>增删快，查询慢</strong>，类比c语言的链表                                                                                                                                </p><p><strong>5.树（二叉树，二叉平衡树，红黑树）</strong></p><p><strong>5.1二叉树</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230315173520.png"></p><p><strong>5.2二叉查找树</strong></p><p><strong>大的存右边，小的存左  边，一样的不存，但可能出现线性表，所以需要进一步考虑</strong></p><p><strong>5.3二叉平衡树</strong></p><p>1.二叉树任意节点的左右子树高度差不超过1</p><p>2.任意节点的左右两个子树都是一颗平衡二叉树</p><p>触发时机:</p><p>​当添加一个节点后，这个树不是一颗平衡二叉树</p><p>​左旋 vs 右旋</p><p>​左左，左右，右左，右右</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230315195141.png"></p><p><strong>建议结合别人的博客理解</strong></p><p>6.哈希表(数组 + 链表 + 红黑树)</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230315201933.png"></p><h2 id="5-List集合"><a href="#5-List集合" class="headerlink" title="5.List集合"></a>5.List集合</h2><h3 id="5-1List接口"><a href="#5-1List接口" class="headerlink" title="5.1List接口"></a>5.1List接口</h3><blockquote><p>特点</p></blockquote><p>List集合是Collection集合子类型，继承了所有Collection中功能，同时List增加了带索引的功能</p><p>1.元素的存取是有序的【有序】</p><p>2.元素具备索引【有索引】</p><p>3.元素可以重复存储【可重复】</p><blockquote><p>实现子类</p></blockquote><p>ArrayList:底层结构就是数组【查询快，增删慢】</p><p>Vector:底层结构也是数组（线程安全，同步安全的，低效，用的就少)</p><p>LinkedList:底层是链表结构（双向链表〉【查询慢，增删快】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Test</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"zjj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"scy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"zhy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"scy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2LinkedList"><a href="#5-2LinkedList" class="headerlink" title="5.2LinkedList"></a>5.2LinkedList</h3><blockquote><p>LinkedList介绍</p></blockquote><p>LinkedList底层结构是双向链表。每个节点有三个部分的数据，第一个是保存元素数据，第二个是保存前一个节点的地址，第三个是保存后一个节点的地址。可以双向查询,效率会比单向链表高。</p><blockquote><p>介绍</p></blockquote><p>一些自己的独特方法和头尾相关，自己可以进源码看看，看一个遍历的优点意思的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// assert isElementIndex(index);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-Set"><a href="#6-Set" class="headerlink" title="6.Set"></a>6.Set</h2><blockquote><p>Set介绍</p></blockquote><p>Set集合也是Collection集合的子类型，没有特有方法。Set比Collection定义更严谨，Set集合要求:</p><p>1.元素不能保证添加和取出顺序（无序)</p><p>2．元素是没有索引的(无索引)</p><p>3.元素唯一(元素唯一)</p><blockquote><p>常用主要子类介绍</p></blockquote><p><strong>HashSet</strong>:底层结构 哈希表结构。</p><p>具有特点︰去重，无索引，无序特点。</p><p>哈希表结构的集合，操作效率会非常高。</p><p><strong>LinkedIlashSet</strong>:底层结构 链表加哈希表结构。</p><p>具有哈希表表结构的特点，也具有链表的特点。</p><p>链表结构:是为了保证插入顺序</p><p>哈希表结构:是为了去重</p><p><strong>TreeSet</strong>:底层数据结构红黑树。</p><p>具有特点∶去重，排序的功能</p><h3 id="6-1HashSet"><a href="#6-1HashSet" class="headerlink" title="6.1HashSet"></a>6.1HashSet</h3><p>没什么好介绍的，无序无索引去重，自己测试一下就行，需要注意的一点就是对象的去重判断需要重写equals方法和hashcode方法</p><h3 id="6-2哈希值"><a href="#6-2哈希值" class="headerlink" title="6.2哈希值"></a>6.2哈希值</h3><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public static void main(String[] args) &#123;        &#x2F;&#x2F;1.同一个对象多次调用的hashcode是相同的      &#x2F;&#x2F;2.默认情况下，不同的hash值是不同的，重写hash可以让他们一样        Teacher teacher &#x3D; new Teacher();        Teacher teacher1 &#x3D; new Teacher();      System.out.println(teacher.hashCode());        System.out.println(teacher.hashCode());        System.out.println(teacher1.hashCode());        &#x2F;&#x2F;3.不同字符串的hashcode可能一样        System.out.println(&quot;通话&quot;.hashCode());&#x2F;&#x2F;1179395        System.out.println(&quot;重地&quot;.hashCode());&#x2F;&#x2F;1179395    &#125;public class Teacher &#123;    String name;    @Override    public boolean equals(Object o) &#123;        if (this &#x3D;&#x3D; o) return true;        if (!(o instanceof Teacher)) return false;        Teacher teacher &#x3D; (Teacher) o;        return Objects.equals(name, teacher.name);    &#125;    @Override    public int hashCode() &#123;        return Objects.hash(name);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2哈希表介绍"><a href="#6-2哈希表介绍" class="headerlink" title="6.2哈希表介绍"></a>6.2哈希表介绍</h3><p><strong>当数组里面存了16*0.75 &#x3D;12个元素的时候，数组就会扩容为原先的两倍 32</strong></p><p><strong>JDK8之前，底层采用数组+链表实现</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230315205821.png"></p><p><strong>JDK8以后，底层采用数组＋链表&#x2F;红黑树实现</strong></p><p>底层结构:哈希表。(数组、链表、红黑树的结合体)。当挂在下面的元素过多，那么不利于查询，所以在JDK8以后，当链表长度超过8的时候，自动转换为红黑树。存储流程不变。</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230315205922.png"></p><h3 id="6-3TreeSet"><a href="#6-3TreeSet" class="headerlink" title="6.3TreeSet"></a>6.3TreeSet</h3><blockquote><p>特点</p></blockquote><p>1.不包含重复元素的集合</p><p>2.没有带索引的方法</p><p>3.可以将元素按照规则进行排序</p><p><strong>普通排序测试</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//普通排序测试</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//[10, 20, 30]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现Comparable接口</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">&#x2F;&#x2F;实现Comparable接口&#x2F;&#x2F;Stduent1类public class Student1 implements Comparable&lt;Student1&gt;&#123;    String username;    Integer age;    public Student1(String username, Integer age) &#123;        this.username &#x3D; username;        this.age &#x3D; age;    &#125;    @Override    public int compareTo(Student1 o) &#123;        return o.age - this.age;    &#125;    @Override    public String toString() &#123;        return &quot;Student1&#123;&quot; +                &quot;username&#x3D;&#39;&quot; + username + &#39;\&#39;&#39; +                &quot;, age&#x3D;&quot; + age +                &#39;&#125;&#39;;    &#125;&#125;&#x2F;&#x2F;Testpublic static void main(String[] args) &#123;        TreeSet&lt;Student1&gt; ts &#x3D; new TreeSet&lt;&gt;();        Student1 student1 &#x3D; new Student1(&quot;scy&quot;, 20);        Student1 student2 &#x3D; new Student1(&quot;zj&quot;, 21);        Student1 student3 &#x3D; new Student1(&quot;zj&quot;, 23);        ts.add(student1);        ts.add(student2);        ts.add(student3);        System.out.println(ts);    &#125;&#x2F;*[Student1&#123;username&#x3D;&#39;zj&#39;, age&#x3D;23&#125;, Student1&#123;username&#x3D;&#39;zj&#39;, age&#x3D;21&#125;, Student1&#123;username&#x3D;&#39;scy&#39;, age&#x3D;20&#125;]*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>比较器排序</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public static void main(String[] args) &#123;      TreeSet&lt;Student1&gt; ts &#x3D; new TreeSet&lt;&gt;(new Comparator&lt;Student1&gt;() &#123;          @Override          public int compare(Student1 o1, Student1 o2) &#123;              return o1.age - o2.age;          &#125;      &#125;);      Student1 student1 &#x3D; new Student1(&quot;scy&quot;, 20);      Student1 student2 &#x3D; new Student1(&quot;zj&quot;, 21);      Student1 student3 &#x3D; new Student1(&quot;zj&quot;, 23);      ts.add(student1);      ts.add(student2);      ts.add(student3);      System.out.println(ts);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>两种比较方式总结</p></blockquote><ul><li>自然排序∶自定义类实现Comparable接口，重写compareTo方法，根据返回值进行排序。</li><li>比较器排序︰创建TreeSet对象的时候传递Comparator的实现类对象，重写compare方法，根据返回值进行排序。</li><li>如果Java提供好的类已经定义了自然排序排序规则，那么我们可以使用比较器排序进行替换</li><li>注意:如果自然排序和比较器排序都存在，那么会使用比较器排序</li></ul><p>两种方式中，关于返回值的规则:</p><ul><li>​如果返回值为负数，表示当前存入的元素是较小值，存左边</li><li>如果返回值为0，表示当前存入的元素跟集合中元素重复了，不存</li><li>​如果返回值为正数，表示当前存入的元素是较大值，存右边</li></ul><h2 id="7-分析ArrayList和HashSet底层"><a href="#7-分析ArrayList和HashSet底层" class="headerlink" title="7.分析ArrayList和HashSet底层"></a>7.分析ArrayList和HashSet底层</h2><h3 id="7-1ArrayList"><a href="#7-1ArrayList" class="headerlink" title="7.1ArrayList"></a>7.1ArrayList</h3><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">&#x2F;&#x2F;构建无参构造，并插入数据ArrayList&lt;String&gt; arrayList &#x3D; new ArrayList&lt;&gt;();arrayList.add(&quot;fs&quot;);arrayList.add(&quot;fssd&quot;);&#x2F;&#x2F;构造分析：通过属性和方法可知创建了一个把空对象地址赋给了this.elementDataprivate static final Object[] EMPTY_ELEMENTDATA &#x3D; &#123;&#125;;public ArrayList() &#123;    this.elementData &#x3D; DEFAULTCAPACITY_EMPTY_ELEMENTDATA;&#125;&#x2F;&#x2F;第一次插入分析private int size;public boolean add(E e) &#123;        ensureCapacityInternal(size + 1);  &#x2F;&#x2F; Increments modCount!!        elementData[size++] &#x3D; e;        return true;&#125;&#x2F;&#x2F;进入ensureCapacityInternal(size + 1)&#x2F;&#x2F;此时elementData &#x3D;&#x3D; DEFAULTCAPACITY_EMPTY_ELEMENTDATA判断为true，minCapacity &#x3D; 10;private static final int DEFAULT_CAPACITY &#x3D; 10;private void ensureCapacityInternal(int minCapacity) &#123;        if (elementData &#x3D;&#x3D; DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;            minCapacity &#x3D; Math.max(DEFAULT_CAPACITY, minCapacity);        &#125;        ensureExplicitCapacity(minCapacity);    &#125;m&#x2F;&#x2F;进入ensureExplicitCapacity(minCapacity); 此时minCapacity &#x3D; 10;&#x2F;&#x2F;minCapacity - 0 &gt; 0private void ensureExplicitCapacity(int minCapacity) &#123;        modCount++;        &#x2F;&#x2F; overflow-conscious code        if (minCapacity - elementData.length &gt; 0)            grow(minCapacity);    &#125;&#x2F;&#x2F;进入grow方法 此时minCapacity &#x3D; 10; private static final int MAX_ARRAY_SIZE &#x3D; Integer.MAX_VALUE - 8; &#x2F;&#x2F;20亿左右 private void grow(int minCapacity) &#123;        &#x2F;&#x2F; overflow-conscious code        int oldCapacity &#x3D; elementData.length;        int newCapacity &#x3D; oldCapacity + (oldCapacity &gt;&gt; 1);        if (newCapacity - minCapacity &lt; 0)            newCapacity &#x3D; minCapacity;        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)            newCapacity &#x3D; hugeCapacity(minCapacity);        &#x2F;&#x2F; minCapacity is usually close to size, so this is a win:        elementData &#x3D; Arrays.copyOf(elementData, newCapacity);    &#125;&#x2F;&#x2F;Arrays.copyOf(elementData, newCapacity); 给数组赋一段新的空间地址，此时空间地址大小为newCapacity扩容分析：当oldCapacity大于0时，新创建的数组大小是老容量+老容量的一半，也就是老容量的1.5倍，每次扩容到原来的1.5倍。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2HashSet分析"><a href="#7-2HashSet分析" class="headerlink" title="7.2HashSet分析"></a>7.2HashSet分析</h3><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">HashSet&lt;Teacher&gt; teachers &#x3D; new HashSet&lt;Teacher&gt;;teachers.add(teacher);teachers.add(teacher1);&#x2F;&#x2F;构造分析，本质是一个HashMappublic HashSet() &#123;        map &#x3D; new HashMap&lt;&gt;();    &#125;&#x2F;&#x2F;插入分析&#x2F;&#x2F;可分析HashSet用HashMap的键值进行插入private static final Object PRESENT &#x3D; new Object();public boolean add(E e) &#123;        return map.put(e, PRESENT)&#x3D;&#x3D;null;    &#125;&#x2F;&#x2F;进入HashMap的put方法public V put(K key, V value) &#123;        return putVal(hash(key), key, value, false, true);    &#125;&#x2F;&#x2F;进入hash(key),可以看成对哈希值进行一些处理static final int hash(Object key) &#123;        int h;        return (key &#x3D;&#x3D; null) ? 0 : (h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-Collections工具类"><a href="#8-Collections工具类" class="headerlink" title="8.Collections工具类"></a>8.Collections工具类</h2><h3 id="8-1shuffle方法"><a href="#8-1shuffle方法" class="headerlink" title="8.1shuffle方法"></a>8.1shuffle方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Random</span> rnd <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rnd <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        r <span class="token operator">=</span> rnd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// harmless race.</span>    <span class="token function">shuffle</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> rnd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意事项</p></blockquote><p>方法功能：打乱List集合中的数据</p><p>使用注意：List&lt;?&gt; list –&gt; 只能打乱List集合；</p><p>​集合中的元素类型任意</p><h3 id="8-2sort方法"><a href="#8-2sort方法" class="headerlink" title="8.2sort方法"></a>8.2sort方法</h3><p><strong>继承Comparable接口</strong></p><p>类比TreeSet</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list) &#123;      list.sort(null);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>构造方法自定义比较器</strong></p><p>类比TreeSet</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c) &#123;        list.sort(c);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-3可变参数"><a href="#8-3可变参数" class="headerlink" title="8.3可变参数"></a>8.3可变参数</h3><blockquote><p>可变参数介绍</p></blockquote><p>在JDK5中提供了可变参数，允许在调用方法时传入任意个参数。可变参数原理就是一个数组形式存在格式︰</p><p>修饰符 返回值类型 方法名 (数据类型 … 变量名){ }</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> num<span class="token punctuation">)</span><span class="token operator">:</span>表示当前方法可以接受任意个<span class="token keyword">int</span>类型的数据<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可变参数注意</p></blockquote><p>1．可变参数只能作为方法的最后一个参数，但共前面可以有或没有任何其他参数。</p><p>2．可变参数本质上是数组，不能作为方法的重载。如果同时出现相同类型的数组和可变参数方法，是不能编译通过的。</p><blockquote><p>可变参数的方法使用</p></blockquote><p>调用可变参数方法，可以给出零到任意多个参数，编译器会将可变参数转化为一个数组，也可以直接传递一个数组。方法内部使用时直接当做数组使用即可。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">main:: sum(1, 2, 3 );public static int sum(int ... num)&#123;    int sum &#x3D; 0;    for(int i : num)&#123;        sum +&#x3D; i;    &#125;    return sum;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4可变参数应用"><a href="#8-4可变参数应用" class="headerlink" title="8.4可变参数应用"></a>8.4可变参数应用</h3><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA"> public static &lt;T&gt; boolean addAll(Collection&lt;? super T&gt; c, T... elements) &#123;        boolean result &#x3D; false;        for (T element : elements)            result |&#x3D; c.add(element);        return result;    &#125;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;ArrayList&lt;String&gt; list &#x3D; new ArrayList&lt;&gt;();Collections.addAll(list, &quot;a&quot;, &quot;b&quot;,&quot;c&quot;,&quot;d&quot;);System.out.println(list)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-排序算法"><a href="#9-排序算法" class="headerlink" title="9.排序算法"></a>9.排序算法</h2><h3 id="9-1冒泡排序"><a href="#9-1冒泡排序" class="headerlink" title="9.1冒泡排序"></a>9.1冒泡排序</h3><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">int[] arr  &#x3D; &#123;1, 2 ,3 ,4 ,5 &#125;;for(int i &#x3D; 0; i &lt; arr.length - 1; i++)&#123;    for(int j &#x3D; 0; j &lt; arr.length - 1 - i; j++)&#123;        if(arr[i] &gt; arr[i + 1])&#123;            Arrays.swap(arr[i], arr[i + 1])        &#125;    &#125;&#125;System.out.println(Arrays.toString(arr));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2选择排序"><a href="#9-2选择排序" class="headerlink" title="9.2选择排序"></a>9.2选择排序</h3><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">int[] arr  &#x3D; &#123;1, 2 ,3 ,4 ,5 &#125;;for(int i &#x3D; 0; i &lt; arr.length - 1; i++)&#123;    int index &#x3D; i;    for(int j &#x3D; i + 1; j &lt; arr.length - 1; j++)&#123;        if(arr[j] &gt; arr[index])&#123;            index &#x3D; j;        &#125;    &#125;    if(i !&#x3D; index)&#123;        Arrays.swap(arr[i], arr[index])    &#125;&#125;System.out.println(Arrays.toString(arr));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3二分算法"><a href="#9-3二分算法" class="headerlink" title="9.3二分算法"></a>9.3二分算法</h3><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">private static int binarySearch0(long[] a, int fromIndex, int toIndex,                                     long key) &#123;        int low &#x3D; fromIndex;        int high &#x3D; toIndex - 1;        while (low &lt;&#x3D; high) &#123;            int mid &#x3D; (low + high) &gt;&gt;&gt; 1;            long midVal &#x3D; a[mid];            if (midVal &lt; key)                low &#x3D; mid + 1;            else if (midVal &gt; key)                high &#x3D; mid - 1;            else                return mid; &#x2F;&#x2F; key found        &#125;        return -(low + 1);  &#x2F;&#x2F; key not found.    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-Map"><a href="#10-Map" class="headerlink" title="10.Map"></a>10.Map</h2><h3 id="10-1基础介绍"><a href="#10-1基础介绍" class="headerlink" title="10.1基础介绍"></a>10.1基础介绍</h3><p>因为Map是两个集合在一起，所以也称为双列集合，因为比较复杂，所以采用图来展示。</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230315225125.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230315225241.png"></p><blockquote><p>Map常用方法</p></blockquote><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public v put(K key, v value):把指定的键与指定的值添加到Map集合中。 public v remove(object key):把指定的键所对应的键值对元素在Map集合中删除，返回被删除元素的值。 public v get(object key）根据指定的键，在Map集合中获取对应的值。                    public set&lt;K&gt; keySet():获取Map集合中所有的键，存储到set集合中。public boolean containKey(object key):判断该集合中是否有此键。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span> <span class="token string">"shao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zhagn"</span><span class="token punctuation">,</span> <span class="token string">"tao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hu"</span><span class="token punctuation">,</span> <span class="token string">"mei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token string">"shao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//增加修改 put</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span> <span class="token string">"shaosdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sef"</span><span class="token punctuation">,</span><span class="token string">"sdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*truetrueshaonull*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2Map遍历"><a href="#10-2Map遍历" class="headerlink" title="10.2Map遍历"></a>10.2Map遍历</h3><p><strong>keySet()遍历</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span> <span class="token string">"shao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zhagn"</span><span class="token punctuation">,</span> <span class="token string">"tao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hu"</span><span class="token punctuation">,</span> <span class="token string">"mei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//遍历集合</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//根据键找到对应的值</span>           <span class="token class-name">String</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>键值对象遍历</strong></p><blockquote><p>简单介绍</p></blockquote><p>键值对对象在Java中用Entry类型表示</p><p>要获取所有的键值对Entry对象，需要借助Map中方法:</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;       Set&lt;Map.Entry&lt;K,V&gt;&gt; es;       return (es &#x3D; entrySet) &#x3D;&#x3D; null ? (entrySet &#x3D; new EntrySet()) : es;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>遍历步骤</p></blockquote><p>1.调用map集合的entrySet方法获取所有的键值对对象</p><p>2.遍历每一个键值对对象（Entry对象)</p><p>3.getKey获取键，getValue获取值</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public static void main(String[] args) &#123;      Map&lt;String, String &gt; map &#x3D; new HashMap&lt;&gt;();      map.put(&quot;zhang&quot;, &quot;shao&quot;);      map.put(&quot;zhagn&quot;, &quot;tao&quot;);      map.put(&quot;hu&quot;, &quot;mei&quot;);      Set&lt;Map.Entry&lt;String, String&gt;&gt; entries &#x3D; map.entrySet();      for (Map.Entry&lt;String, String&gt; entry : entries) &#123;          String key &#x3D; entry.getKey();          String value &#x3D; entry.getValue()      &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3HashMap"><a href="#10-3HashMap" class="headerlink" title="10.3HashMap"></a>10.3HashMap</h3><blockquote><p>介绍</p></blockquote><p>HashSet所存储的值，其实底层就放置在HashMap的键当中。底层使用哈希表结构来存储数据，存放数据时会执行hashCode和equals方法来去重。</p><p>因此，HashMap使用自定义类型当做键使用时需要注意:自定义类需要重写hashCode和equals方法</p><h3 id="10-4LinkedHashMap"><a href="#10-4LinkedHashMap" class="headerlink" title="10.4LinkedHashMap"></a>10.4LinkedHashMap</h3><p>LinkedHashMap类，底层采用的数据结构∶链表+哈希表特点:</p><p>1元素唯一 </p><p>2元素有序</p><h3 id="10-5TreeMap"><a href="#10-5TreeMap" class="headerlink" title="10.5TreeMap"></a>10.5TreeMap</h3><p>TreeMap的底层是红黑树实现的，有排序的能力，键去重。</p><p>1.可以白然排序（键所在的类要实现Comparable)</p><p>2．若自定义类没有自然排序功能，或自然排序功能不满足要求时。可以自定义比较器排序（Comparator)两种排序方式对应了TreeMap的两个构造方法:</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public TreeMap()&#x2F;&#x2F;使用自然排序        public TreeMap(Comparator&lt;? super K&gt; comparator) &#x2F;&#x2F;比较器排序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-集合嵌套"><a href="#11-集合嵌套" class="headerlink" title="11.集合嵌套"></a>11.集合嵌套</h2><h3 id="11-1List嵌套List"><a href="#11-1List嵌套List" class="headerlink" title="11.1List嵌套List"></a>11.1List嵌套List</h3><h3 id="11-2List嵌套Map"><a href="#11-2List嵌套Map" class="headerlink" title="11.2List嵌套Map"></a>11.2List嵌套Map</h3><h3 id="11-3Map嵌套Map"><a href="#11-3Map嵌套Map" class="headerlink" title="11.3Map嵌套Map"></a>11.3Map嵌套Map</h3>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro</title>
      <link href="/2022/10/10/shiro-shi-zhan-jiao-cheng/"/>
      <url>/2022/10/10/shiro-shi-zhan-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><ul><li><p>资料 <a href="http://www.baizhiedu.xin/">http://www.baizhiedu.xin</a></p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20221010195355.png"></p></li></ul><h2 id="1-权限的管理"><a href="#1-权限的管理" class="headerlink" title="1.权限的管理"></a>1.权限的管理</h2><h3 id="1-1-什么是权限管理"><a href="#1-1-什么是权限管理" class="headerlink" title="1.1 什么是权限管理"></a>1.1 什么是权限管理</h3><p>基本上涉及到用户参与的系统都要进行权限管理，权限管理属于系统安全的范畴，权限管理实现<code>对用户访问系统的控制</code>，按照安全规则或者<a href="http://baike.baidu.com/view/160028.htm">安全策略</a>控制用户可以访问而且只能访问自己被授权的资源。</p><p>权限管理包括用户<code>身份认证</code>和<code>授权</code>两部分，简称<code>认证授权</code>。对于需要访问控制的资源用户首先经过身份认证，认证通过后用户具有该资源的访问权限方可访问。</p><h3 id="1-2-什么是身份认证"><a href="#1-2-什么是身份认证" class="headerlink" title="1.2 什么是身份认证"></a>1.2 什么是身份认证</h3><p><code>身份认证</code>，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。对于采用<a href="http://baike.baidu.com/view/5628.htm">指纹</a>等系统，则出示指纹；对于硬件Key等刷卡系统，则需要刷卡。</p><h3 id="1-3-什么是授权"><a href="#1-3-什么是授权" class="headerlink" title="1.3 什么是授权"></a>1.3 什么是授权</h3><p><code>授权，即访问控制</code>，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的</p><hr><h2 id="2-什么是shiro"><a href="#2-什么是shiro" class="headerlink" title="2.什么是shiro"></a>2.什么是shiro</h2><blockquote><p><strong>Apache Shiro™</strong> is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.  </p><p>Shiro 是一个功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理。使用Shiro易于理解的API，您可以快速轻松地保护任何应用程序—从最小的移动应用程序到最大的web和企业应用程序。</p></blockquote><p><code>Shiro是apache旗下一个开源框架，它将软件系统的安全认证相关的功能抽取出来，实现用户身份认证，权限授权、加密、会话管理等功能，组成了一个通用的安全认证框架。</code></p><hr><h2 id="3-shiro的核心架构"><a href="#3-shiro的核心架构" class="headerlink" title="3.shiro的核心架构"></a>3.shiro的核心架构</h2><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200520220413190.png" alt="image-20200520220413190"></p><h3 id="3-1-Subject"><a href="#3-1-Subject" class="headerlink" title="3.1 Subject"></a>3.1 Subject</h3><p><code>Subject即主体</code>，外部应用与subject进行交互，subject记录了当前操作用户，将用户的概念理解为当前操作的主体，可能是一个通过浏览器请求的用户，也可能是一个运行的程序。Subject在shiro中是一个接口，接口中定义了很多认证授相关的方法，外部程序通过subject进行认证授，而subject是通过SecurityManager安全管理器进行认证授权</p><h3 id="3-2-SecurityManager"><a href="#3-2-SecurityManager" class="headerlink" title="3.2 SecurityManager"></a>3.2 SecurityManager</h3><p><code>SecurityManager即安全管理器</code>，对全部的subject进行安全管理，它是shiro的核心，负责对所有的subject进行安全管理。通过SecurityManager可以完成subject的认证、授权等，实质上SecurityManager是通过Authenticator进行认证，通过Authorizer进行授权，通过SessionManager进行会话管理等。</p><p><code>SecurityManager是一个接口，继承了Authenticator, Authorizer, SessionManager这三个接口。</code></p><h3 id="3-3-Authenticator"><a href="#3-3-Authenticator" class="headerlink" title="3.3 Authenticator"></a>3.3 Authenticator</h3><p><code>Authenticator即认证器</code>，对用户身份进行认证，Authenticator是一个接口，shiro提供ModularRealmAuthenticator实现类，通过ModularRealmAuthenticator基本上可以满足大多数需求，也可以自定义认证器。</p><h3 id="3-4-Authorizer"><a href="#3-4-Authorizer" class="headerlink" title="3.4 Authorizer"></a>3.4 Authorizer</h3><p><code>Authorizer即授权器</code>，用户通过认证器认证通过，在访问功能时需要通过授权器判断用户是否有此功能的操作权限。</p><h3 id="3-5-Realm"><a href="#3-5-Realm" class="headerlink" title="3.5 Realm"></a>3.5 Realm</h3><p><code>Realm即领域</code>，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据，比如：如果用户身份数据在数据库那么realm就需要从数据库获取用户身份信息。</p><ul><li>​注意：不要把realm理解成只是从数据源取数据，在realm中还有认证授权校验的相关的代码。</li></ul><h3 id="3-6-SessionManager"><a href="#3-6-SessionManager" class="headerlink" title="3.6 SessionManager"></a>3.6 SessionManager</h3><p><code>sessionManager即会话管理</code>，shiro框架定义了一套会话管理，它不依赖web容器的session，所以shiro可以使用在非web应用上，也可以将分布式应用的会话集中在一点管理，此特性可使它实现单点登录。</p><h3 id="3-7-SessionDAO"><a href="#3-7-SessionDAO" class="headerlink" title="3.7 SessionDAO"></a>3.7 SessionDAO</h3><p><code>SessionDAO即会话dao</code>，是对session会话操作的一套接口，比如要将session存储到数据库，可以通过jdbc将会话存储到数据库。</p><h3 id="3-8-CacheManager"><a href="#3-8-CacheManager" class="headerlink" title="3.8 CacheManager"></a>3.8 CacheManager</h3><p><code>CacheManager即缓存管理</code>，将用户权限数据存储在缓存，这样可以提高性能。</p><h3 id="3-9-Cryptography"><a href="#3-9-Cryptography" class="headerlink" title="3.9 Cryptography"></a>3.9 Cryptography</h3><p>​<code>Cryptography即密码管理</code>，shiro提供了一套加密&#x2F;解密的组件，方便开发。比如提供常用的散列、加&#x2F;解密等功能。</p><hr><h2 id="4-shiro中的认证"><a href="#4-shiro中的认证" class="headerlink" title="4. shiro中的认证"></a>4. shiro中的认证</h2><h3 id="4-1-认证"><a href="#4-1-认证" class="headerlink" title="4.1 认证"></a>4.1 认证</h3><p>身份认证，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。</p><h3 id="4-2-shiro中认证的关键对象"><a href="#4-2-shiro中认证的关键对象" class="headerlink" title="4.2 shiro中认证的关键对象"></a>4.2 shiro中认证的关键对象</h3><ul><li><strong>Subject：主体</strong></li></ul><p>访问系统的用户，主体可以是用户、程序等，进行认证的都称为主体； </p><ul><li><strong>Principal：身份信息</strong></li></ul><p>是主体（subject）进行身份认证的标识，标识必须具有<code>唯一性</code>，如用户名、手机号、邮箱地址等，一个主体可以有多个身份，但是必须有一个主身份（Primary Principal）。</p><ul><li><strong>credential：凭证信息</strong></li></ul><p>是只有主体自己知道的安全信息，如密码、证书等。</p><h3 id="4-3-认证流程"><a href="#4-3-认证流程" class="headerlink" title="4.3 认证流程"></a>4.3 认证流程</h3><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200521204452288.png" alt="image-20200521204452288"></p><h3 id="4-4-认证的开发"><a href="#4-4-认证的开发" class="headerlink" title="4.4 认证的开发"></a>4.4 认证的开发</h3><h5 id="1-创建项目并引入依赖"><a href="#1-创建项目并引入依赖" class="headerlink" title="1. 创建项目并引入依赖"></a>1. 创建项目并引入依赖</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-引入shiro配置文件并加入如下配置"><a href="#2-引入shiro配置文件并加入如下配置" class="headerlink" title="2. 引入shiro配置文件并加入如下配置"></a>2. 引入shiro配置文件并加入如下配置</h5><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">users</span><span class="token punctuation">]</span></span><span class="token key attr-name">xiaochen</span><span class="token punctuation">=</span><span class="token value attr-value">123</span><span class="token key attr-name">zhangsan</span><span class="token punctuation">=</span><span class="token value attr-value">456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200521205219719.png" alt="image-20200521205219719"></p><h5 id="3-开发认证代码"><a href="#3-开发认证代码" class="headerlink" title="3.开发认证代码"></a>3.开发认证代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAuthenticator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建securityManager</span>        <span class="token class-name">DefaultSecurityManager</span> defaultSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultSecurityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IniRealm</span><span class="token punctuation">(</span><span class="token string">"classpath:shiro.ini"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将安装工具类中设置默认安全管理器</span>        <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取主体对象</span>        <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建token令牌</span>        <span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"xiaochen1"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用户登录</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名错误!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码错误!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>DisabledAccountException（帐号被禁用）</p></li><li><p>LockedAccountException（帐号被锁定）</p></li><li><p>ExcessiveAttemptsException（登录失败次数过多）</p></li><li><p>ExpiredCredentialsException（凭证过期）等</p></li></ul><hr><h3 id="4-5-自定义Realm"><a href="#4-5-自定义Realm" class="headerlink" title="4.5 自定义Realm"></a>4.5 自定义Realm</h3><p>上边的程序使用的是Shiro自带的IniRealm，IniRealm从ini配置文件中读取用户的信息，大部分情况下需要从系统的数据库中读取用户信息，所以需要自定义realm。</p><h5 id="1-shiro提供的Realm"><a href="#1-shiro提供的Realm" class="headerlink" title="1.shiro提供的Realm"></a>1.shiro提供的Realm</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200521212728541.png" alt="image-20200521212728541"></p><h5 id="2-根据认证源码认证使用的是SimpleAccountRealm"><a href="#2-根据认证源码认证使用的是SimpleAccountRealm" class="headerlink" title="2.根据认证源码认证使用的是SimpleAccountRealm"></a>2.根据认证源码认证使用的是SimpleAccountRealm</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200521213451998.png" alt="image-20200521213451998"></p><p><code>SimpleAccountRealm的部分源码中有两个方法一个是 认证 一个是 授权</code>,</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleAccountRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">&#123;</span><span class="token comment">//.......省略</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UsernamePasswordToken</span> upToken <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">)</span> token<span class="token punctuation">;</span>        <span class="token class-name">SimpleAccount</span> account <span class="token operator">=</span> <span class="token function">getUser</span><span class="token punctuation">(</span>upToken<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>account <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LockedAccountException</span><span class="token punctuation">(</span><span class="token string">"Account ["</span> <span class="token operator">+</span> account <span class="token operator">+</span> <span class="token string">"] is locked."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">isCredentialsExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"The credentials for account ["</span> <span class="token operator">+</span> account <span class="token operator">+</span> <span class="token string">"] are expired"</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExpiredCredentialsException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> account<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token function">getUsername</span><span class="token punctuation">(</span>principals<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">USERS_LOCK</span><span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token constant">USERS_LOCK</span><span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-自定义realm"><a href="#3-自定义realm" class="headerlink" title="3.自定义realm"></a>3.自定义realm</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义realm */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//认证方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//授权方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"xiaochen"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-使用自定义Realm认证"><a href="#4-使用自定义Realm认证" class="headerlink" title="4.使用自定义Realm认证"></a>4.使用自定义Realm认证</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAuthenticatorCusttomerRealm</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建securityManager</span>        <span class="token class-name">DefaultSecurityManager</span> defaultSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//IniRealm realm = new IniRealm("classpath:shiro.ini");</span>        <span class="token comment">//设置为自定义realm获取认证数据</span>        defaultSecurityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomerRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将安装工具类中设置默认安全管理器</span>        <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取主体对象</span>        <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建token令牌</span>        <span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"xiaochen"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用户登录</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名错误!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码错误!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-使用MD5和Salt"><a href="#4-6-使用MD5和Salt" class="headerlink" title="4.6 使用MD5和Salt"></a>4.6 使用MD5和Salt</h3><blockquote><p>实际应用是将盐和散列后的值存在数据库中，自动realm从数据库取出盐和加密后的值由shiro完成密码校验。</p></blockquote><h5 id="1-自定义md5-salt的realm"><a href="#1-自定义md5-salt的realm" class="headerlink" title="1.自定义md5+salt的realm"></a>1.自定义md5+salt的realm</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义md5+salt realm */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//认证方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//授权方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"xiaochen"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"3c88b338102c1a343bcb88cd3878758e"</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> salt <span class="token operator">=</span> <span class="token string">"Q4F%"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span>password<span class="token punctuation">,</span>                                                 <span class="token class-name">ByteSource<span class="token punctuation">.</span>Util</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span>salt<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-使用md5-salt-认证"><a href="#2-使用md5-salt-认证" class="headerlink" title="2.使用md5 + salt 认证"></a>2.使用md5 + salt 认证</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAuthenticatorCusttomerRealm</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建securityManager</span>        <span class="token class-name">DefaultSecurityManager</span> defaultSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//IniRealm realm = new IniRealm("classpath:shiro.ini");</span>        <span class="token comment">//设置为自定义realm获取认证数据</span>        <span class="token class-name">CustomerRealm</span> customerRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置md5加密</span>        <span class="token class-name">HashedCredentialsMatcher</span> credentialsMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashedCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        credentialsMatcher<span class="token punctuation">.</span><span class="token function">setHashAlgorithmName</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        credentialsMatcher<span class="token punctuation">.</span><span class="token function">setHashIterations</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置散列次数</span>        customerRealm<span class="token punctuation">.</span><span class="token function">setCredentialsMatcher</span><span class="token punctuation">(</span>credentialsMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultSecurityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>customerRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将安装工具类中设置默认安全管理器</span>        <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取主体对象</span>        <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建token令牌</span>        <span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"xiaochen"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用户登录</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名错误!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码错误!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5-shiro中的授权"><a href="#5-shiro中的授权" class="headerlink" title="5. shiro中的授权"></a>5. shiro中的授权</h2><h3 id="5-1-授权"><a href="#5-1-授权" class="headerlink" title="5.1 授权"></a>5.1 授权</h3><p>授权，即访问控制，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的。</p><h3 id="5-2-关键对象"><a href="#5-2-关键对象" class="headerlink" title="5.2 关键对象"></a>5.2 关键对象</h3><p><strong>授权可简单理解为who对what(which)进行How操作：</strong></p><p><code>Who，即主体（Subject）</code>，主体需要访问系统中的资源。</p><p><code>What，即资源（Resource)</code>，如系统菜单、页面、按钮、类方法、系统商品信息等。资源包括<code>资源类型</code>和<code>资源实例</code>，比如<code>商品信息为资源类型</code>，类型为t01的商品为<code>资源实例</code>，编号为001的商品信息也属于资源实例。</p><p><code>How，权限/许可（Permission)</code>，规定了主体对资源的操作许可，权限离开资源没有意义，如用户查询权限、用户添加权限、某个类方法的调用权限、编号为001用户的修改权限等，通过权限可知主体对哪些资源都有哪些操作许可。</p><h3 id="5-3-授权流程"><a href="#5-3-授权流程" class="headerlink" title="5.3 授权流程"></a>5.3 授权流程</h3><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200521230705964.png" alt="image-20200521230705964"></p><h3 id="5-4-授权方式"><a href="#5-4-授权方式" class="headerlink" title="5.4 授权方式"></a>5.4 授权方式</h3><ul><li><p><strong>基于角色的访问控制</strong></p><ul><li><p>RBAC基于角色的访问控制（Role-Based Access Control）是以角色为中心进行访问控制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//操作什么资源</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>基于资源的访问控制</strong></p><ul><li><p>RBAC基于资源的访问控制（Resource-Based Access Control）是以资源为中心进行访问控制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">isPermission</span><span class="token punctuation">(</span><span class="token string">"user:update:01"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//资源实例</span>  <span class="token comment">//对01用户进行修改</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">isPermission</span><span class="token punctuation">(</span><span class="token string">"user:update:*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//资源类型</span>  <span class="token comment">//对01用户进行修改</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="5-5-权限字符串"><a href="#5-5-权限字符串" class="headerlink" title="5.5 权限字符串"></a>5.5 权限字符串</h3><p>​权限字符串的规则是：<strong>资源标识符：操作：资源实例标识符</strong>，意思是对哪个资源的哪个实例具有什么操作，“:”是资源&#x2F;操作&#x2F;实例的分割符，权限字符串也可以使用*通配符。</p><p>例子：</p><ul><li>用户创建权限：user:create，或user:create:*</li><li>用户修改实例001的权限：user:update:001</li><li>用户实例001的所有权限：user:*：001</li></ul><h3 id="5-6-shiro中授权编程实现方式"><a href="#5-6-shiro中授权编程实现方式" class="headerlink" title="5.6 shiro中授权编程实现方式"></a>5.6 shiro中授权编程实现方式</h3><ul><li><p><strong>编程式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span>“admin”<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//有权限</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//无权限</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注解式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequiresRoles</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//有权限</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>标签式</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">JSP&#x2F;GSP 标签：在JSP&#x2F;GSP 页面通过相应的标签完成：&lt;shiro:hasRole name&#x3D;&quot;admin&quot;&gt;&lt;!— 有权限—&gt;&lt;&#x2F;shiro:hasRole&gt;注意: Thymeleaf 中使用shiro需要额外集成!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ul><h3 id="5-7-开发授权"><a href="#5-7-开发授权" class="headerlink" title="5.7 开发授权"></a>5.7 开发授权</h3><h5 id="1-realm的实现"><a href="#1-realm的实现" class="headerlink" title="1.realm的实现"></a>1.realm的实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//认证方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> primaryPrincipal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> principals<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"primaryPrincipal = "</span> <span class="token operator">+</span> primaryPrincipal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleAuthorizationInfo</span> simpleAuthorizationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">addRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">addStringPermission</span><span class="token punctuation">(</span><span class="token string">"user:update:*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">addStringPermission</span><span class="token punctuation">(</span><span class="token string">"product:*:*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simpleAuthorizationInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//授权方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"xiaochen"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"3c88b338102c1a343bcb88cd3878758e"</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> salt <span class="token operator">=</span> <span class="token string">"Q4F%"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span>password<span class="token punctuation">,</span>                                                 <span class="token class-name">ByteSource<span class="token punctuation">.</span>Util</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span>salt<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-授权"><a href="#2-授权" class="headerlink" title="2.授权"></a>2.授权</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAuthenticatorCusttomerRealm</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建securityManager</span>        <span class="token class-name">DefaultSecurityManager</span> defaultSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//IniRealm realm = new IniRealm("classpath:shiro.ini");</span>        <span class="token comment">//设置为自定义realm获取认证数据</span>        <span class="token class-name">CustomerRealm</span> customerRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置md5加密</span>        <span class="token class-name">HashedCredentialsMatcher</span> credentialsMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashedCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        credentialsMatcher<span class="token punctuation">.</span><span class="token function">setHashAlgorithmName</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        credentialsMatcher<span class="token punctuation">.</span><span class="token function">setHashIterations</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置散列次数</span>        customerRealm<span class="token punctuation">.</span><span class="token function">setCredentialsMatcher</span><span class="token punctuation">(</span>credentialsMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultSecurityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>customerRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将安装工具类中设置默认安全管理器</span>        <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取主体对象</span>        <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建token令牌</span>        <span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"xiaochen"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用户登录</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名错误!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码错误!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//认证通过</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//基于角色权限管理</span>            <span class="token keyword">boolean</span> admin <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>admin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> permitted <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"product:create:001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>permitted<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-整合SpringBoot项目实战"><a href="#6-整合SpringBoot项目实战" class="headerlink" title="6.整合SpringBoot项目实战"></a>6.整合SpringBoot项目实战</h2><h3 id="6-0-整合思路"><a href="#6-0-整合思路" class="headerlink" title="6.0 整合思路"></a>6.0 整合思路</h3><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200525185630463.png" alt="image-20200525185630463"></p><h3 id="6-1-创建springboot项目"><a href="#6-1-创建springboot项目" class="headerlink" title="6.1 创建springboot项目"></a>6.1 创建springboot项目</h3><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200523100842032.png" alt="image-20200523100842032"></p><h3 id="6-2-引入shiro依赖"><a href="#6-2-引入shiro依赖" class="headerlink" title="6.2 引入shiro依赖"></a>6.2 引入shiro依赖</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-配置shiro环境"><a href="#6-3-配置shiro环境" class="headerlink" title="6.3 配置shiro环境"></a>6.3 配置shiro环境</h3><h5 id="0-创建配置类"><a href="#0-创建配置类" class="headerlink" title="0.创建配置类"></a>0.创建配置类</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200523101256446.png" alt="image-20200523101256446"></p><h5 id="1-配置shiroFilterFactoryBean"><a href="#1-配置shiroFilterFactoryBean" class="headerlink" title="1.配置shiroFilterFactoryBean"></a>1.配置shiroFilterFactoryBean</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ShiroFilterFactoryBean</span> <span class="token function">getShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">SecurityManager</span> securityManager<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//创建shiro的filter</span>  <span class="token class-name">ShiroFilterFactoryBean</span> shiroFilterFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注入安全管理器</span>  shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> shiroFilterFactoryBean<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-配置WebSecurityManager"><a href="#2-配置WebSecurityManager" class="headerlink" title="2.配置WebSecurityManager"></a>2.配置WebSecurityManager</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">DefaultWebSecurityManager</span> <span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token class-name">Realm</span> realm<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">DefaultWebSecurityManager</span> defaultWebSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  defaultWebSecurityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>realm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> defaultWebSecurityManager<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-创建自定义realm"><a href="#3-创建自定义realm" class="headerlink" title="3.创建自定义realm"></a>3.创建自定义realm</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200523101402213.png" alt="image-20200523101402213"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//处理授权</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//处理认证</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span>       <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-配置自定义realm"><a href="#4-配置自定义realm" class="headerlink" title="4.配置自定义realm"></a>4.配置自定义realm</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建自定义realm</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Realm</span> <span class="token function">getRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomerRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-编写控制器跳转至index-html"><a href="#5-编写控制器跳转至index-html" class="headerlink" title="5.编写控制器跳转至index.html"></a>5.编写控制器跳转至index.html</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跳转至主页"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200523101733157.png" alt="image-20200523101733157"></p><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200523101857528.png" alt="image-20200523101857528"></p><h5 id="6-启动springboot应用访问index"><a href="#6-启动springboot应用访问index" class="headerlink" title="6.启动springboot应用访问index"></a>6.启动springboot应用访问index</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200523101955121.png" alt="image-20200523101955121"></p><ul><li>注意:<ul><li><strong>默认在配置好shiro环境后默认环境中没有对项目中任何资源进行权限控制,所有现在项目中所有资源都可以通过路径访问</strong></li></ul></li></ul><h5 id="7-加入权限控制"><a href="#7-加入权限控制" class="headerlink" title="7.加入权限控制"></a>7.加入权限控制</h5><ul><li><p>修改ShiroFilterFactoryBean配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//注入安全管理器</span>shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//配置认证和授权规则</span>shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200523102303320.png" alt="image-20200523102303320"></p><ul><li><strong>&#x2F;*</strong>* 代表拦截项目中一切资源  <strong>authc</strong> 代表shiro中的一个filter的别名,详细内容看文档的shirofilter列表</li></ul></li></ul><h5 id="8-重启项目访问查看"><a href="#8-重启项目访问查看" class="headerlink" title="8.重启项目访问查看"></a>8.重启项目访问查看</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200523102831750.png" alt="image-20200523102831750"></p><h3 id="6-4-常见过滤器"><a href="#6-4-常见过滤器" class="headerlink" title="6.4 常见过滤器"></a>6.4 常见过滤器</h3><ul><li>注意: <strong>shiro提供和多个默认的过滤器，我们可以用这些过滤器来配置控制指定url的权限：</strong></li></ul><table><thead><tr><th>配置缩写</th><th>对应的过滤器</th><th>功能</th></tr></thead><tbody><tr><td>anon</td><td>AnonymousFilter</td><td>指定url可以匿名访问</td></tr><tr><td>authc</td><td>FormAuthenticationFilter</td><td>指定url需要form表单登录，默认会从请求中获取<code>username</code>、<code>password</code>,<code>rememberMe</code>等参数并尝试登录，如果登录不了就会跳转到loginUrl配置的路径。我们也可以用这个过滤器做默认的登录逻辑，但是一般都是我们自己在控制器写登录逻辑的，自己写的话出错返回的信息都可以定制嘛。</td></tr><tr><td>authcBasic</td><td>BasicHttpAuthenticationFilter</td><td>指定url需要basic登录</td></tr><tr><td>logout</td><td>LogoutFilter</td><td>登出过滤器，配置指定url就可以实现退出功能，非常方便</td></tr><tr><td>noSessionCreation</td><td>NoSessionCreationFilter</td><td>禁止创建会话</td></tr><tr><td>perms</td><td>PermissionsAuthorizationFilter</td><td>需要指定权限才能访问</td></tr><tr><td>port</td><td>PortFilter</td><td>需要指定端口才能访问</td></tr><tr><td>rest</td><td>HttpMethodPermissionFilter</td><td>将http请求方法转化成相应的动词来构造一个权限字符串，这个感觉意义不大，有兴趣自己看源码的注释</td></tr><tr><td>roles</td><td>RolesAuthorizationFilter</td><td>需要指定角色才能访问</td></tr><tr><td>ssl</td><td>SslFilter</td><td>需要https请求才能访问</td></tr><tr><td>user</td><td>UserFilter</td><td>需要已登录或“记住我”的用户才能访问</td></tr></tbody></table><h3 id="6-5-认证实现"><a href="#6-5-认证实现" class="headerlink" title="6.5 认证实现"></a>6.5 认证实现</h3><h5 id="1-在login-jsp中开发认证界面"><a href="#1-在login-jsp中开发认证界面" class="headerlink" title="1. 在login.jsp中开发认证界面"></a>1. 在login.jsp中开发认证界面</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200526082345776.png" alt="image-20200526082345776"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/user/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>  密码  : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-开发controller"><a href="#2-开发controller" class="headerlink" title="2. 开发controller"></a>2. 开发controller</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**    * 用来处理身份认证    * @param username    * @param password    * @return    */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获取主体对象</span>    <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span>  <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名错误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码错误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/login.jsp"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>在认证过程中使用subject.login进行认证</strong></li></ul><h5 id="3-开发realm中返回静态数据-未连接数据库"><a href="#3-开发realm中返回静态数据-未连接数据库" class="headerlink" title="3.开发realm中返回静态数据(未连接数据库)"></a>3.开发realm中返回静态数据(未连接数据库)</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"xiaochen"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-启动项目以realm中定义静态数据进行认证"><a href="#4-启动项目以realm中定义静态数据进行认证" class="headerlink" title="4.启动项目以realm中定义静态数据进行认证"></a>4.启动项目以realm中定义静态数据进行认证</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200526082550343.png" alt="image-20200526082550343"></p><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200526082639318.png" alt="image-20200526082639318"></p><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200526082620621.png" alt="image-20200526082620621"></p><ul><li><strong>认证功能没有md5和随机盐的认证就实现啦</strong></li></ul><h3 id="6-6-退出认证"><a href="#6-6-退出认证" class="headerlink" title="6.6 退出认证"></a>6.6 退出认证</h3><h5 id="1-开发页面退出连接"><a href="#1-开发页面退出连接" class="headerlink" title="1.开发页面退出连接"></a>1.开发页面退出连接</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200526082851800.png" alt="image-20200526082851800"></p><h5 id="2-开发controller-1"><a href="#2-开发controller-1" class="headerlink" title="2.开发controller"></a>2.开发controller</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**    * 退出登录    *    */</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"logout"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    subject<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//退出用户</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/login.jsp"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-修改退出连接访问退出路径"><a href="#3-修改退出连接访问退出路径" class="headerlink" title="3.修改退出连接访问退出路径"></a>3.修改退出连接访问退出路径</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200526083056062.png" alt="image-20200526083056062"></p><h5 id="4-退出之后访问受限资源立即返回认证界面"><a href="#4-退出之后访问受限资源立即返回认证界面" class="headerlink" title="4.退出之后访问受限资源立即返回认证界面"></a>4.退出之后访问受限资源立即返回认证界面</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200526083148253.png" alt="image-20200526083148253"></p><h3 id="6-7-MD5、Salt的认证实现"><a href="#6-7-MD5、Salt的认证实现" class="headerlink" title="6.7 MD5、Salt的认证实现"></a>6.7 MD5、Salt的认证实现</h3><h4 id="1-开发数据库注册"><a href="#1-开发数据库注册" class="headerlink" title="1.开发数据库注册"></a>1.开发数据库注册</h4><h5 id="0-开发注册界面"><a href="#0-开发注册界面" class="headerlink" title="0.开发注册界面"></a>0.开发注册界面</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>用户注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/user/register<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>  密码  : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>立即注册<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200526200230982.png" alt="image-20200526200230982"></p><h5 id="1-创建数据表结构"><a href="#1-创建数据表结构" class="headerlink" title="1.创建数据表结构"></a>1.创建数据表结构</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for t_user</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_user<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>salt<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200526200425569.png" alt="image-20200526200425569"></p><h5 id="2-项目引入依赖"><a href="#2-项目引入依赖" class="headerlink" title="2.项目引入依赖"></a>2.项目引入依赖</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--mybatis相关依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--mysql--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.38<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--druid--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-配置application-properties配置文件"><a href="#3-配置application-properties配置文件" class="headerlink" title="3.配置application.properties配置文件"></a>3.配置application.properties配置文件</h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8888</span><span class="token key attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token value attr-value">/shiro</span><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">shiro</span><span class="token key attr-name">spring.mvc.view.prefix</span><span class="token punctuation">=</span><span class="token value attr-value">/</span><span class="token key attr-name">spring.mvc.view.suffix</span><span class="token punctuation">=</span><span class="token value attr-value">.jsp</span><span class="token comment">#新增配置</span><span class="token key attr-name">spring.datasource.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span><span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/shiro?characterEncoding=UTF-8</span><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token value attr-value">com.baizhi.springboot_jsp_shiro.entity</span><span class="token key attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:com/baizhi/mapper/*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200526200558712.png" alt="image-20200526200558712"></p><h5 id="4-创建entity"><a href="#4-创建entity" class="headerlink" title="4.创建entity"></a>4.创建entity</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span>  id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> salt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-创建DAO接口"><a href="#5-创建DAO接口" class="headerlink" title="5.创建DAO接口"></a>5.创建DAO接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDAO</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-开发mapper配置文件"><a href="#6-开发mapper配置文件" class="headerlink" title="6.开发mapper配置文件"></a>6.开发mapper配置文件</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>save<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  insert into t_user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="7-开发service接口"><a href="#7-开发service接口" class="headerlink" title="7.开发service接口"></a>7.开发service接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注册用户方法</span>    <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-创建salt工具类"><a href="#8-创建salt工具类" class="headerlink" title="8.创建salt工具类"></a>8.创建salt工具类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaltUtils</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 生成salt的静态方法     * @param n     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getSalt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567890!@#$%^&amp;*()"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> aChar <span class="token operator">=</span> chars<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="9-开发service实现类"><a href="#9-开发service实现类" class="headerlink" title="9.开发service实现类"></a>9.开发service实现类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserDAO</span> userDAO<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//处理业务调用dao</span>        <span class="token comment">//1.生成随机盐</span>        <span class="token class-name">String</span> salt <span class="token operator">=</span> <span class="token class-name">SaltUtils</span><span class="token punctuation">.</span><span class="token function">getSalt</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.将随机盐保存到数据</span>        user<span class="token punctuation">.</span><span class="token function">setSalt</span><span class="token punctuation">(</span>salt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.明文密码进行md5 + salt + hash散列</span>        <span class="token class-name">Md5Hash</span> md5Hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Md5Hash</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>salt<span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>md5Hash<span class="token punctuation">.</span><span class="token function">toHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDAO<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-开发Controller"><a href="#10-开发Controller" class="headerlink" title="10.开发Controller"></a>10.开发Controller</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户注册     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"register"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            userService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"redirect:/login.jsp"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"redirect:/register.jsp"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="11-启动项目进行注册"><a href="#11-启动项目进行注册" class="headerlink" title="11.启动项目进行注册"></a>11.启动项目进行注册</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200526200946730.png" alt="image-20200526200946730"></p><hr><h4 id="2-开发数据库认证"><a href="#2-开发数据库认证" class="headerlink" title="2.开发数据库认证"></a>2.开发数据库认证</h4><h5 id="0-开发DAO"><a href="#0-开发DAO" class="headerlink" title="0.开发DAO"></a>0.开发DAO</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDAO</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据身份信息认证的方法</span>    <span class="token class-name">User</span> <span class="token function">findByUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-开发mapper配置文件"><a href="#1-开发mapper配置文件" class="headerlink" title="1.开发mapper配置文件"></a>1.开发mapper配置文件</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findByUserName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select id,username,password,salt from t_user  where username = #&#123;username&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-开发Service接口"><a href="#2-开发Service接口" class="headerlink" title="2.开发Service接口"></a>2.开发Service接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注册用户方法</span>    <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//根据用户名查询业务的方法</span>    <span class="token class-name">User</span> <span class="token function">findByUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-开发Service实现类"><a href="#3-开发Service实现类" class="headerlink" title="3.开发Service实现类"></a>3.开发Service实现类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserDAO</span> userDAO<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findByUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userDAO<span class="token punctuation">.</span><span class="token function">findByUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-开发在工厂中获取bean对象的工具类"><a href="#4-开发在工厂中获取bean对象的工具类" class="headerlink" title="4.开发在工厂中获取bean对象的工具类"></a>4.开发在工厂中获取bean对象的工具类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextUtils</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ApplicationContext</span> context<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据bean名字获取工厂中指定bean 对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-修改自定义realm"><a href="#5-修改自定义realm" class="headerlink" title="5.修改自定义realm"></a>5.修改自定义realm</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//根据身份信息</span>       <span class="token class-name">String</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//在工厂中获取service对象</span>       <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> <span class="token class-name">ApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据身份信息查询</span>       <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findByUserName</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//返回数据库信息</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                               <span class="token class-name">ByteSource<span class="token punctuation">.</span>Util</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getSalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-修改ShiroConfig中realm使用凭证匹配器以及hash散列"><a href="#6-修改ShiroConfig中realm使用凭证匹配器以及hash散列" class="headerlink" title="6.修改ShiroConfig中realm使用凭证匹配器以及hash散列"></a>6.修改ShiroConfig中realm使用凭证匹配器以及hash散列</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Realm</span> <span class="token function">getRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">CustomerRealm</span> customerRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置hashed凭证匹配器</span>  <span class="token class-name">HashedCredentialsMatcher</span> credentialsMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashedCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置md5加密</span>  credentialsMatcher<span class="token punctuation">.</span><span class="token function">setHashAlgorithmName</span><span class="token punctuation">(</span><span class="token string">"md5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置散列次数</span>  credentialsMatcher<span class="token punctuation">.</span><span class="token function">setHashIterations</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  customerRealm<span class="token punctuation">.</span><span class="token function">setCredentialsMatcher</span><span class="token punctuation">(</span>credentialsMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> customerRealm<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200526204958726.png" alt="image-20200526204958726"></p><h3 id="6-8-授权实现"><a href="#6-8-授权实现" class="headerlink" title="6.8 授权实现"></a>6.8 授权实现</h3><h5 id="0-页面资源授权"><a href="#0-页面资源授权" class="headerlink" title="0.页面资源授权"></a>0.页面资源授权</h5><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@taglib prefix&#x3D;&quot;shiro&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;shiro.apache.org&#x2F;tags&quot; %&gt;&lt;shiro:hasAnyRoles name&#x3D;&quot;user,admin&quot;&gt;        &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;用户管理&lt;&#x2F;a&gt;            &lt;ul&gt;                &lt;shiro:hasPermission name&#x3D;&quot;user:add:*&quot;&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;添加&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;shiro:hasPermission&gt;                &lt;shiro:hasPermission name&#x3D;&quot;user:delete:*&quot;&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;删除&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;shiro:hasPermission&gt;                &lt;shiro:hasPermission name&#x3D;&quot;user:update:*&quot;&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;修改&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;shiro:hasPermission&gt;                &lt;shiro:hasPermission name&#x3D;&quot;user:find:*&quot;&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;查询&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;shiro:hasPermission&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;li&gt;        &lt;&#x2F;shiro:hasAnyRoles&gt;        &lt;shiro:hasRole name&#x3D;&quot;admin&quot;&gt;            &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;商品管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;订单管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;物流管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;        &lt;&#x2F;shiro:hasRole&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-代码方式授权"><a href="#1-代码方式授权" class="headerlink" title="1.代码方式授权"></a>1.代码方式授权</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取主体对象</span>  <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//代码方式</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>subject<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存订单!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无权访问!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//基于权限字符串</span>  <span class="token comment">//....</span>  <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200527203343928.png" alt="image-20200527203343928"></p><h5 id="2-方法调用授权"><a href="#2-方法调用授权" class="headerlink" title="2.方法调用授权"></a>2.方法调用授权</h5><ul><li>@RequiresRoles               用来基于角色进行授权</li><li>@RequiresPermissions    用来基于权限进行授权</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequiresRoles</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"user"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//用来判断角色  同时具有 admin user</span><span class="token annotation punctuation">@RequiresPermissions</span><span class="token punctuation">(</span><span class="token string">"user:update:01"</span><span class="token punctuation">)</span> <span class="token comment">//用来判断权限字符串</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"save"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200527203415114.png" alt="image-20200527203415114"></p><hr><h5 id="3-授权数据持久化"><a href="#3-授权数据持久化" class="headerlink" title="3.授权数据持久化"></a>3.授权数据持久化</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200527204839080.png" alt="image-20200527204839080"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for t_pers</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_pers<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_pers<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for t_role</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_role<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_role<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for t_role_perms</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_role_perms<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_role_perms<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>roleid<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>permsid<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for t_user</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_user<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>salt<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for t_user_role</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_user_role<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_user_role<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>userid<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>roleid<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="4-创建dao方法"><a href="#4-创建dao方法" class="headerlink" title="4.创建dao方法"></a>4.创建dao方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//根据用户名查询所有角色</span><span class="token class-name">User</span> <span class="token function">findRolesByUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据角色id查询权限集合</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Perms</span><span class="token punctuation">></span></span> <span class="token function">findPermsByRoleId</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-mapper实现"><a href="#5-mapper实现" class="headerlink" title="5.mapper实现"></a>5.mapper实现</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--角色信息--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roles<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findRolesByUserName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT u.id uid,u.username,r.id,r.NAME rname  FROM t_user u  LEFT JOIN t_user_role ur  ON u.id=ur.userid  LEFT JOIN t_role r  ON ur.roleid=r.id  WHERE u.username=#&#123;username&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findPermsByRoleId<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Perms<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT p.id,p.NAME,p.url,r.NAME  FROM t_role r  LEFT JOIN t_role_perms rp  ON r.id=rp.roleid  LEFT JOIN t_perms p ON rp.permsid=p.id  WHERE r.id=#&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-Service接口"><a href="#6-Service接口" class="headerlink" title="6.Service接口"></a>6.Service接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//根据用户名查询所有角色</span><span class="token class-name">User</span> <span class="token function">findRolesByUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据角色id查询权限集合</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Perms</span><span class="token punctuation">></span></span> <span class="token function">findPermsByRoleId</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-Service实现"><a href="#7-Service实现" class="headerlink" title="7.Service实现"></a>7.Service实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Perms</span><span class="token punctuation">></span></span> <span class="token function">findPermsByRoleId</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> userDAO<span class="token punctuation">.</span><span class="token function">findPermsByRoleId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findRolesByUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> userDAO<span class="token punctuation">.</span><span class="token function">findRolesByUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-修改自定义realm"><a href="#8-修改自定义realm" class="headerlink" title="8.修改自定义realm"></a>8.修改自定义realm</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取身份信息</span>        <span class="token class-name">String</span> primaryPrincipal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> principals<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用授权验证: "</span><span class="token operator">+</span>primaryPrincipal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据主身份信息获取角色 和 权限信息</span>        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> <span class="token class-name">ApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findRolesByUserName</span><span class="token punctuation">(</span>primaryPrincipal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//授权角色信息</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">SimpleAuthorizationInfo</span> simpleAuthorizationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>role<span class="token operator">-></span><span class="token punctuation">&#123;</span>                simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">addRole</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//权限信息</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Perms</span><span class="token punctuation">></span></span> perms <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findPermsByRoleId</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>perms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    perms<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>perm<span class="token operator">-></span><span class="token punctuation">&#123;</span>                        simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">addStringPermission</span><span class="token punctuation">(</span>perm<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> simpleAuthorizationInfo<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200527213821611.png" alt="image-20200527213821611"></p><h5 id="9-启动测试"><a href="#9-启动测试" class="headerlink" title="9.启动测试"></a>9.启动测试</h5><hr><h3 id="6-9-使用CacheManager"><a href="#6-9-使用CacheManager" class="headerlink" title="6.9 使用CacheManager"></a>6.9 使用CacheManager</h3><h4 id="1-Cache-作用"><a href="#1-Cache-作用" class="headerlink" title="1.Cache 作用"></a>1.Cache 作用</h4><ul><li>Cache 缓存: <strong>计算机内存中一段数据</strong>  </li><li>作用: <strong>用来减轻DB的访问压力,从而提高系统的查询效率</strong></li><li>流程:</li></ul><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200530090656417.png" alt="image-20200530090656417"></p><h4 id="2-使用shiro中默认EhCache实现缓存"><a href="#2-使用shiro中默认EhCache实现缓存" class="headerlink" title="2.使用shiro中默认EhCache实现缓存"></a>2.使用shiro中默认EhCache实现缓存</h4><h5 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--引入shiro和ehcache--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-开启缓存"><a href="#2-开启缓存" class="headerlink" title="2.开启缓存"></a>2.开启缓存</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//3.创建自定义realm</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Realm</span> <span class="token function">getRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">CustomerRealm</span> customerRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//修改凭证校验匹配器</span>        <span class="token class-name">HashedCredentialsMatcher</span> credentialsMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashedCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置加密算法为md5</span>        credentialsMatcher<span class="token punctuation">.</span><span class="token function">setHashAlgorithmName</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置散列次数</span>        credentialsMatcher<span class="token punctuation">.</span><span class="token function">setHashIterations</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customerRealm<span class="token punctuation">.</span><span class="token function">setCredentialsMatcher</span><span class="token punctuation">(</span>credentialsMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//开启缓存管理器</span>        customerRealm<span class="token punctuation">.</span><span class="token function">setCachingEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customerRealm<span class="token punctuation">.</span><span class="token function">setAuthorizationCachingEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customerRealm<span class="token punctuation">.</span><span class="token function">setAuthorizationCachingEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customerRealm<span class="token punctuation">.</span><span class="token function">setCacheManager</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EhCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> customerRealm<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200529173859939.png" alt="image-20200529173859939"></p><h5 id="3-启动刷新页面进行测试"><a href="#3-启动刷新页面进行测试" class="headerlink" title="3.启动刷新页面进行测试"></a>3.启动刷新页面进行测试</h5><ul><li>注意:如果控制台没有任何sql展示说明缓存已经开启</li></ul><h4 id="3-shiro中使用Redis作为缓存实现"><a href="#3-shiro中使用Redis作为缓存实现" class="headerlink" title="3.shiro中使用Redis作为缓存实现"></a>3.shiro中使用Redis作为缓存实现</h4><h5 id="1-引入redis依赖"><a href="#1-引入redis依赖" class="headerlink" title="1.引入redis依赖"></a>1.引入redis依赖</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--redis整合springboot--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-配置redis连接"><a href="#2-配置redis连接" class="headerlink" title="2.配置redis连接"></a>2.配置redis连接</h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token value attr-value">6379</span><span class="token key attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span><span class="token key attr-name">spring.redis.database</span><span class="token punctuation">=</span><span class="token value attr-value">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200530084616799.png" alt="image-20200530084616799"></p><h5 id="3-启动redis服务"><a href="#3-启动redis服务" class="headerlink" title="3.启动redis服务"></a>3.启动redis服务</h5><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">➜  bin <span class="token function">ls</span>dump<span class="token punctuation">.</span>rdb        redis-check-aof redis-<span class="token function">cli</span>       redis-server    redis<span class="token punctuation">.</span>confredis-benchmark redis-check-rdb redis-sentinel  redis-trib<span class="token punctuation">.</span>rb➜  bin <span class="token punctuation">.</span><span class="token operator">/</span>redis-server redis<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200530081954871.png" alt="image-20200530081954871"></p><h5 id="4-开发RedisCacheManager"><a href="#4-开发RedisCacheManager" class="headerlink" title="4.开发RedisCacheManager"></a>4.开发RedisCacheManager</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisCacheManager</span> <span class="token keyword">implements</span> <span class="token class-name">CacheManager</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">getCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> cacheName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CacheException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"缓存名称: "</span><span class="token operator">+</span>cacheName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>cacheName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-开RedisCache实现"><a href="#5-开RedisCache实现" class="headerlink" title="5.开RedisCache实现"></a>5.开RedisCache实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cacheName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RedisCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">RedisCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> cacheName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cacheName <span class="token operator">=</span> cacheName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span> k<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CacheException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取缓存:"</span><span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheName<span class="token punctuation">,</span>k<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> k<span class="token punctuation">,</span> <span class="token class-name">V</span> v<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CacheException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"设置缓存key: "</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token string">" value:"</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheName<span class="token punctuation">,</span>k<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">K</span> k<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CacheException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">)</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheName<span class="token punctuation">,</span>k<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> v <span class="token function">remove</span><span class="token punctuation">(</span>k k<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CacheException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheName<span class="token punctuation">,</span>k<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CacheException</span> <span class="token punctuation">&#123;</span>        <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span>k<span class="token punctuation">></span></span> <span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span>v<span class="token punctuation">></span></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span> redisTemplate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token punctuation">)</span> <span class="token class-name">ApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//封装获取redisTemplate</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span> redisTemplate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token punctuation">)</span> <span class="token class-name">ApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"redisTemplate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-启动项目测试发现报错"><a href="#6-启动项目测试发现报错" class="headerlink" title="6.启动项目测试发现报错"></a>6.启动项目测试发现报错</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200530100850618.png" alt="image-20200530100850618"></p><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200530100948598.png" alt="image-20200530100948598"></p><ul><li><p>错误解释: <strong>由于shiro中提供的simpleByteSource实现没有实现序列化,所有在认证时出现错误信息</strong></p></li><li><p>解决方案: <strong>需要自动salt实现序列化</strong></p><ul><li><p>自定义salt实现序列化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//自定义salt实现  实现序列化接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyByteSource</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleByteSource</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MyByteSource</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在realm中使用自定义salt</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//根据身份信息</span>  <span class="token class-name">String</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//在工厂中获取service对象</span>  <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> <span class="token class-name">ApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findByUserName</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                       <span class="token keyword">new</span> <span class="token class-name">MyByteSource</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getSalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200530101301543.png" alt="image-20200530101301543"></p></li></ul></li></ul><h5 id="7-再次启动测试-发现可以成功放入redis缓存"><a href="#7-再次启动测试-发现可以成功放入redis缓存" class="headerlink" title="7.再次启动测试,发现可以成功放入redis缓存"></a>7.再次启动测试,发现可以成功放入redis缓存</h5><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200530101617692.png" alt="image-20200530101617692"></p><hr><h4 id="4-加入验证码验证"><a href="#4-加入验证码验证" class="headerlink" title="4. 加入验证码验证"></a>4. 加入验证码验证</h4><h5 id="0-开发页面加入验证码"><a href="#0-开发页面加入验证码" class="headerlink" title="0.开发页面加入验证码"></a>0.开发页面加入验证码</h5><ul><li><p>开发控制器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"getImage"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getImage</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//生成验证码</span>  <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token class-name">VerifyCodeUtils</span><span class="token punctuation">.</span><span class="token function">generateVerifyCode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//验证码放入session</span>  session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//验证码存入图片</span>  <span class="token class-name">ServletOutputStream</span> os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">VerifyCodeUtils</span><span class="token punctuation">.</span><span class="token function">outputImage</span><span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span>os<span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>放行验证码</p><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200530141757606.png" alt="image-20200530141757606"></p></li><li><p>开发页面</p><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200530141828004.png" alt="image-20200530141828004"></p></li><li><p>修改认证流程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span><span class="token class-name">String</span> code<span class="token punctuation">,</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//比较验证码</span>        <span class="token class-name">String</span> codes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>codes<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//获取主体对象</span>                <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"验证码错误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名错误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码错误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/login.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改salt不能序列化的问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//自定义salt实现  实现序列化接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyByteSource</span> <span class="token keyword">implements</span> <span class="token class-name">ByteSource</span><span class="token punctuation">,</span><span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cachedHex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cachedBase64<span class="token punctuation">;</span>    <span class="token comment">//加入无参数构造方法实现序列化和反序列化</span>    <span class="token keyword">public</span> <span class="token class-name">MyByteSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyByteSource</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">=</span> bytes<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyByteSource</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">=</span> <span class="token class-name">CodecSupport</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyByteSource</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">=</span> <span class="token class-name">CodecSupport</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyByteSource</span><span class="token punctuation">(</span><span class="token class-name">ByteSource</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyByteSource</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyByteSource<span class="token punctuation">.</span>BytesHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyByteSource</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> stream<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyByteSource<span class="token punctuation">.</span>BytesHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isCompatible</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o <span class="token keyword">instanceof</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">||</span> o <span class="token keyword">instanceof</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">||</span> o <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token operator">||</span> o <span class="token keyword">instanceof</span> <span class="token class-name">ByteSource</span> <span class="token operator">||</span> o <span class="token keyword">instanceof</span> <span class="token class-name">File</span> <span class="token operator">||</span> o <span class="token keyword">instanceof</span> <span class="token class-name">InputStream</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bytes<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bytes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cachedHex <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cachedHex <span class="token operator">=</span> <span class="token class-name">Hex</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cachedHex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cachedBase64 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cachedBase64 <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cachedBase64<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bytes<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bytes<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">ByteSource</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ByteSource</span> bs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteSource</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bs<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">BytesHelper</span> <span class="token keyword">extends</span> <span class="token class-name">CodecSupport</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">BytesHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> stream<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr></li></ul><h2 id="7-Shiro整合springboot之thymeleaf权限控制"><a href="#7-Shiro整合springboot之thymeleaf权限控制" class="headerlink" title="7.Shiro整合springboot之thymeleaf权限控制"></a>7.Shiro整合springboot之thymeleaf权限控制</h2><h3 id="1-引入扩展依赖"><a href="#1-引入扩展依赖" class="headerlink" title="1.引入扩展依赖"></a>1.引入扩展依赖</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.theborakompanioni<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-页面中引入命名空间"><a href="#2-页面中引入命名空间" class="headerlink" title="2.页面中引入命名空间"></a>2.页面中引入命名空间</h3><ul><li>xmlns:shiro&#x3D;”<a href="http://www.pollix.at/thymeleaf/shiro&quot;">http://www.pollix.at/thymeleaf/shiro&quot;</a></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>shiro</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.pollix.at/thymeleaf/shiro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-常见权限控制标签使用"><a href="#3-常见权限控制标签使用" class="headerlink" title="3.常见权限控制标签使用"></a>3.常见权限控制标签使用</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 验证当前用户是否为“访客”，即未认证（包含未记住）的用户。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>guest</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Please <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 认证通过或已记住的用户。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Welcome back John! Not John? Click <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> to login.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 已认证通过的用户。不包含已记住的用户，这是与user标签的区别所在。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>authenticated</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Hello, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">shiro:</span>principal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>, how are you today?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">shiro:</span>authenticated</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateAccount.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Update your contact information<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 输出当前用户信息，通常为登录帐号信息。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>principal</span><span class="token punctuation">/></span></span>, how are you today?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 未认证通过用户，与authenticated标签相对应。与guest标签的区别是，该标签包含已记住用户。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>notAuthenticated</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Please <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> in order to update your credit card information.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 验证当前用户是否属于该角色。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasRole</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Administer the system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 拥有该角色 --></span><span class="token comment">&lt;!-- 与hasRole标签逻辑相反，当用户不属于该角色时验证通过。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>lacksRole</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>developer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 没有该角色 --></span>    Sorry, you are not allowed to developer the system.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 验证当前用户是否属于以下所有角色。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasAllRoles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>developer, 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 角色与判断 --></span>    You are a developer and a admin.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 验证当前用户是否属于以下任意一个角色。  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasAnyRoles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin, vip, developer,1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 角色或判断 --></span>    You are a admin, vip, or developer.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--验证当前用户是否拥有指定权限。  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userInfo:add<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createUser.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 拥有权限 --></span><span class="token comment">&lt;!-- 与hasPermission标签逻辑相反，当前用户没有制定权限时，验证通过。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>lacksPermission</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userInfo:del<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 没有权限 --></span>    Sorry, you are not allowed to delete user accounts.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 验证当前用户是否拥有以下所有角色。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasAllPermissions</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userInfo:view, userInfo:add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 权限与判断 --></span>    You can see or add users.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 验证当前用户是否拥有以下任意一个权限。  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasAnyPermissions</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userInfo:view, userInfo:del<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 权限或判断 --></span>    You can see or delete users.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pp<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createUser.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Create a new User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-加入shiro的方言配置"><a href="#4-加入shiro的方言配置" class="headerlink" title="4.加入shiro的方言配置"></a>4.加入shiro的方言配置</h3><ul><li>页面标签不起作用一定要记住加入方言处理</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"shiroDialect"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ShiroDialect</span> <span class="token function">shiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Shiro%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/image-20200601210335151.png" alt="image-20200601210335151"></p>]]></content>
      
      
      <categories>
          
          <category> 其他开发加点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT</title>
      <link href="/2022/10/08/jwt-shi-zhan-jiao-cheng/"/>
      <url>/2022/10/08/jwt-shi-zhan-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="JWT-实战教程"><a href="#JWT-实战教程" class="headerlink" title="JWT 实战教程"></a>JWT 实战教程</h1><p>文档教程来自<a href="https://www.baizhiedu.xin/">青橙小店 (baizhiedu.xin)</a></p><p>![image-20200726102546868](JWT 实战教程.assets&#x2F;image-20200726102546868.png)</p><h2 id="1-什么是JWT"><a href="#1-什么是JWT" class="headerlink" title="1.什么是JWT"></a>1.什么是JWT</h2><p>JSON Web Token (JWT) is an open standard (<a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a>) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the <strong>HMAC</strong> algorithm) or a public&#x2F;private key pair using <strong>RSA</strong> or <strong>ECDSA</strong>.</p><p>​—[摘自官网]</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.翻译</span><span class="token list punctuation">-</span>  官网地址: https://jwt.io/introduction/<span class="token list punctuation">-</span>  翻译: jsonwebtoken（JWT）是一个开放标准（rfc7519），它定义了一种紧凑的、自包含的方式，用于在各方之间以JSON对象安全地传输信息。此信息可以验证和信任，因为它是数字签名的。jwt可以使用秘密（使用HMAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名<span class="token title important"><span class="token punctuation">#</span> 2.通俗解释</span><span class="token list punctuation">-</span> JWT简称JSON Web Token,也就是通过JSON形式作为Web应用中的令牌,用于在各方之间安全地将信息作为JSON对象传输。在数据传输过程中还可以完成数据加密、签名等相关处理。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-JWT能做什么"><a href="#2-JWT能做什么" class="headerlink" title="2.JWT能做什么"></a>2.JWT能做什么</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 后钱啊t'f'r'g'q'q'a1.授权</span><span class="token list punctuation">-</span> 这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。单点登录是当今广泛使用JWT的一项功能，因为它的开销很小并且可以在不同的域中轻松使用。<span class="token title important"><span class="token punctuation">#</span> 2.信息交换</span><span class="token list punctuation">-</span> JSON Web Token是在各方之间安全地传输信息的好方法。因为可以对JWT进行签名（例如，使用公钥/私钥对），所以您可以确保发件人是他们所说的人。此外，由于签名是使用标头和有效负载计算的，因此您还可以验证内容是否遭到篡改。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-为什么是JWT"><a href="#3-为什么是JWT" class="headerlink" title="3.为什么是JWT"></a>3.为什么是JWT</h2><h3 id="基于传统的Session认证"><a href="#基于传统的Session认证" class="headerlink" title="基于传统的Session认证"></a>基于传统的Session认证</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.认证方式</span><span class="token list punctuation">-</span> 我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。t<span class="token title important"><span class="token punctuation">#</span> 2.认证流程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200726103959013](JWT 实战教程.assets&#x2F;image-20200726103959013.png)</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.暴露问题</span><span class="token list punctuation">-</span> 1.每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大<span class="token list punctuation">-</span> 2.用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。<span class="token list punctuation">-</span> 3.因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。<span class="token list punctuation">-</span> 4.在前后端分离系统中就更加痛苦:如下图所示也就是说前后端分离在应用解耦后增加了部署的复杂性。通常用户一次请求就要转发多次。如果用session 每次携带sessionid 到服务器，服务器还要查询用户信息。同时如果用户很多。这些信息存储在服务器内存中，给服务器增加负担。还有就是CSRF（跨站伪造请求攻击）攻击，session是基于cookie进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。还有就是     sessionid就是一个特征值，表达的信息不够丰富。不容易扩展。而且如果你后端应用是多节点部署。那么就需要实现session共享机制。不方便集群应用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200804212240422](JWT 实战教程.assets&#x2F;image-20200804212240422.png)</p><h3 id="基于JWT认证"><a href="#基于JWT认证" class="headerlink" title="基于JWT认证"></a>基于JWT认证</h3><p>![image-20200726183248298](JWT 实战教程.assets&#x2F;image-20200726183248298.png)</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.认证流程</span><span class="token list punctuation">-</span> 首先，前端通过Web表单将自己的用户名和密码发送到后端的接口。这一过程一般是一个HTTP POST请求。建议的方式是通过SSL加密的传输（https协议），从而避免敏感信息被嗅探。<span class="token list punctuation">-</span> 后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload（负载），将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。形成的JWT就是一个形同lll.zzz.xxx的字符串。 token head.payload.singurater<span class="token list punctuation">-</span> 后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage或sessionStorage上，退出登录时前端删除保存的JWT即可。<span class="token list punctuation">-</span> 前端在每次请求时将JWT放入HTTP Header中的Authorization位。(解决XSS和XSRF问题) HEADER<span class="token list punctuation">-</span> 后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确；检查Token是否过期；检查Token的接收方是否是自己（可选）。<span class="token list punctuation">-</span> 验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。<span class="token title important"><span class="token punctuation">#</span> 2.jwt优势</span><span class="token list punctuation">-</span> 简洁(Compact): 可以通过URL，POST参数或者在HTTP header发送，因为数据量小，传输速度也很快<span class="token list punctuation">-</span> 自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库<span class="token list punctuation">-</span> 因为Token是以JSON加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持。<span class="token list punctuation">-</span> 不需要在服务端保存会话信息，特别适用于分布式微服务。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-JWT的结构是什么"><a href="#4-JWT的结构是什么" class="headerlink" title="4.JWT的结构是什么?"></a>4.JWT的结构是什么?</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">token   string  ====>  header.payload.singnature   token   <span class="token title important"><span class="token punctuation">#</span> 1.令牌组成</span><span class="token list punctuation">-</span> 1.标头(Header)<span class="token list punctuation">-</span> 2.有效载荷(Payload)<span class="token list punctuation">-</span> 3.签名(Signature)<span class="token list punctuation">-</span> 因此，JWT通常如下所示:xxxxx.yyyyy.zzzzz   Header.Payload.Signature<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 2.Header</span><span class="token list punctuation">-</span> 标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。它会使用 Base64 编码组成 JWT 结构的第一部分。<span class="token list punctuation">-</span> 注意:Base64是一种编码，也就是说，它是可以被翻译回原来的样子来的。它并不是一种加密过程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>  <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.Payload</span><span class="token list punctuation">-</span> 令牌的第二部分是有效负载，其中包含声明。声明是有关实体（通常是用户）和其他数据的声明。同样的，它会使用 Base64 编码组成 JWT 结构的第二部分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"sub"</span><span class="token operator">:</span> <span class="token string">"1234567890"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"John Doe"</span><span class="token punctuation">,</span>  <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 4.Signature</span><span class="token list punctuation">-</span> 前面两部分都是使用 Base64 进行编码的，即前端可以解开知道里面的信息。Signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名。签名的作用是保证 JWT 没有被篡改过<span class="token list punctuation">-</span> 如:HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload),secret);<span class="token title important"><span class="token punctuation">#</span> 签名目的</span><span class="token list punctuation">-</span> 最后一步签名的过程，实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。<span class="token title important"><span class="token punctuation">#</span> 信息安全问题</span><span class="token list punctuation">-</span> 在这里大家一定会问一个问题：Base64是一种编码，是可逆的，那么我的信息不就被暴露了吗？<span class="token list punctuation">-</span> 是的。所以，在JWT中，不应该在负载里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID。这个值实际上不是什么敏感内容，一般情况下被知道也是安全的。但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第三方通过Base64解码就能很快地知道你的密码了。因此JWT适合用于向Web应用传递一些非敏感信息。JWT还经常用于设计用户认证和授权系统，甚至实现Web应用的单点登录。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200726181136113](JWT 实战教程.assets&#x2F;image-20200726181136113.png)</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 5.放在一起</span><span class="token list punctuation">-</span> 输出是三个由点分隔的Base64-URL字符串，可以在HTML和HTTP环境中轻松传递这些字符串，与基于XML的标准（例如SAML）相比，它更紧凑。<span class="token list punctuation">-</span> 简洁(Compact)可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快<span class="token list punctuation">-</span> 自包含(Self-contained)负载中包含了所有用户所需要的信息，避免了多次查询数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200726124257203](JWT 实战教程.assets&#x2F;image-20200726124257203.png)</p><h2 id="5-使用JWT"><a href="#5-使用JWT" class="headerlink" title="5.使用JWT"></a>5.使用JWT</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.引入依赖</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--引入jwt--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 2.生成token</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span> instance <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">SECOND</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成令牌</span><span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token comment">//设置自定义用户名</span>  <span class="token punctuation">.</span><span class="token function">withExpiresAt</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//设置过期时间</span>  <span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token string">"token!Q2W#E$RW"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置签名 保密 复杂</span><span class="token comment">//输出令牌</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 生成结果eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOlsicGhvbmUiLCIxNDMyMzIzNDEzNCJdLCJleHAiOjE1OTU3Mzk0NDIsInVzZXJuYW1lIjoi5byg5LiJIn0.aHmE3RNqvAjFr_dvyn_sD2VJ46P7EGiS5OBMO_TI5jg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.根据令牌和签名解析数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JWTVerifier</span> jwtVerifier <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token string">"token!Q2W#E$RW"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DecodedJWT</span> decodedJWT <span class="token operator">=</span> jwtVerifier<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名: "</span> <span class="token operator">+</span> decodedJWT<span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过期时间: "</span><span class="token operator">+</span>decodedJWT<span class="token punctuation">.</span><span class="token function">getExpiresAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 4.常见异常信息</span><span class="token list punctuation">-</span> SignatureVerificationException:签名不一致异常<span class="token list punctuation">-</span> TokenExpiredException:    令牌过期异常<span class="token list punctuation">-</span> AlgorithmMismatchException:算法不匹配异常<span class="token list punctuation">-</span> InvalidClaimException:失效的payload异常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200805184517282](JWT 实战教程.assets&#x2F;image-20200805184517282.png)</p><h2 id="6-封装工具类"><a href="#6-封装工具类" class="headerlink" title="6.封装工具类"></a>6.封装工具类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">TOKEN</span> <span class="token operator">=</span> <span class="token string">"token!Q@W3e4r"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 生成token     * @param map  //传入payload     * @return 返回token     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">JWTCreator<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            builder<span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Calendar</span> instance <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">SECOND</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">withExpiresAt</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token constant">TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 验证token     * @param token     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token constant">TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取token中payload     * @param token     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DecodedJWT</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token constant">TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-整合springboot"><a href="#7-整合springboot" class="headerlink" title="7.整合springboot"></a>7.整合springboot</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.搭建springboot+mybatis+jwt环境</span><span class="token list punctuation">-</span> 引入依赖<span class="token list punctuation">-</span> 编写配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--引入jwt--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入mybatis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入lombok--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入druid--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入mysql--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.38<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8989</span><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">jwt</span><span class="token key attr-name">spring.datasource.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span><span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/jwt?characterEncoding=UTF-8</span><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token value attr-value">com.baizhi.entity</span><span class="token key attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:com/baizhi/mapper/*.xml</span><span class="token key attr-name">logging.level.com.baizhi.dao</span><span class="token punctuation">=</span><span class="token value attr-value">debug</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.开发数据库</span><span class="token list punctuation">-</span> 这里采用最简单的表结构验证JWT使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>![image-20200805212226422](JWT 实战教程.assets&#x2F;image-20200805212226422.png)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户密码'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 2.开发entity</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200805213539471](JWT 实战教程.assets&#x2F;image-20200805213539471.png)</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.开发DAO接口和mapper.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDAO</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200805213603655](JWT 实战教程.assets&#x2F;image-20200805213603655.png)</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baizhi.dao.UserDAO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--这里就写的简单点了毕竟不是重点--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where name=#&#123;name&#125; and password = #&#123;password&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200805213628252](JWT 实战教程.assets&#x2F;image-20200805213628252.png)</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 4.开发Service 接口以及实现类</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//登录接口</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>![image-20200805213648147](JWT 实战教程.assets&#x2F;image-20200805213648147.png)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserDAO</span> userDAO<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">SUPPORTS</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> userDB <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>userDB<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> userDB<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"登录失败~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200805213704965](JWT 实战教程.assets&#x2F;image-20200805213704965.png)</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 5.开发controller</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户名: [&#123;&#125;]"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"密码: [&#123;&#125;]"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> userDB <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用来存放payload</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>userDB<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> userDB<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"登录成功!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//成功返回token信息</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200805214235426](JWT 实战教程.assets&#x2F;image-20200805214235426.png)</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 6.数据库添加测试数据启动项目</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![image-20200805214324868](JWT 实战教程.assets&#x2F;image-20200805214324868.png)</p><p>![image-20200805214424786](JWT 实战教程.assets&#x2F;image-20200805214424786.png)</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 7.通过postman模拟登录失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![image-20200805214610668](JWT 实战教程.assets&#x2F;image-20200805214610668.png)</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 8.通过postman模拟登录成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![image-20200805214749469](JWT 实战教程.assets&#x2F;image-20200805214749469.png)</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 9.编写测试接口</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/test/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"验证通过~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TokenExpiredException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"Token已经过期!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SignatureVerificationException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"签名错误!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AlgorithmMismatchException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"加密算法不匹配!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"无效token~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> map<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200805215119590](JWT 实战教程.assets&#x2F;image-20200805215119590.png)</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 10.通过postman请求接口</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![image-20200805215337303](JWT 实战教程.assets&#x2F;image-20200805215337303.png)</p><p>![image-20200805215451442](JWT 实战教程.assets&#x2F;image-20200805215451442.png)</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 11.问题?</span><span class="token list punctuation">-</span> 使用上述方式每次都要传递token数据,每个方法都需要验证token代码冗余,不够灵活? 如何优化<span class="token list punctuation">-</span> 使用拦截器进行优化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">JWTUtils</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TokenExpiredException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"Token已经过期!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SignatureVerificationException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"签名错误!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AlgorithmMismatchException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"加密算法不匹配!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"无效token~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JwtTokenInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>          <span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/**"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 其他开发加点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解</title>
      <link href="/2022/10/04/zhu-jie/"/>
      <url>/2022/10/04/zhu-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为开发要用到注解，所以记录一下学习</p><p>1)注解(Annotation)也被称为元数据(Metadata)，用于修饰解释包、类、方法、属性、构造器、局部变量等数据信息。</p><p>2)和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息。</p><p>3)在JavaSE中，注解的使用复的比较简单，例如标记过时的功能，忽略警告等。在JavaEE中注解占据了更重要的角色,例如用来配置应用程序的任何切面，代替java EE旧版中所遗留的繁冗代码和XML配置等。</p><blockquote><p>三个基本的Annotation:</p></blockquote><p>1)@Override:限定某个方法,是重写父类方法,该注解只能用于方法2)@Deprecated:用于表示某个程序元素(类,方法等)已过时</p><ol start="3"><li>@SuppressWarnings:抑制编译器警告</li></ol><p><strong>1.override</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father fly ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> son <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.@Override 注解放在fly方法上，表示子类的fly方法时重写了父类的fly</span>    <span class="token comment">//2．这里如果没有写 @Override 还是重写了父类fly</span>    <span class="token comment">//3．如果你写了@Override注解，编译器就会去检查该方法是否真的重写了父类的l/方法，如果的确重写了，则编译通过，如果没有构成重写，则编译错误</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"son fly ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结</p><ul><li><p>@Override表示指定重写父类的方法，从编译层面验证，如果不符合，就会报错</p></li><li><p>如果不写@override注解，父类仍有public void fly（{}，仍然回重写</p></li><li><p>@Override只能修饰方法，不能修饰其他类，包，属性等等</p></li><li><p>查看@override注解源码为@Target(ElementType.METHOD).说明只能作用于方法</p></li><li><p>@Target是修饰注解的注解，称为元注解</p></li></ul><p><strong>2.@Deprecated</strong></p><ul><li><p>表示某个程序元素(类，方法等)已经过时</p></li><li><p>可以修饰方法，类，字段，包，参数，等等</p></li><li><pre><code>@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</code></pre></li><li><p>可以作用到新旧版本的兼容和过渡</p></li></ul><p><strong>3.@SuppressWarings</strong></p><p>抑制警告信息</p><p>关于SuppressWaring的作用域和你定义的范围有关</p><p><strong>4.元注解</strong></p><ol><li>@Retention &#x2F;&#x2F;指定注解的作用范围。三种SOURCE, CLASS, RUNTIME</li><li>@Target &#x2F;&#x2F;指定注解可以在那些地方使用</li><li>@Documented &#x2F;&#x2F;指定该注解是否会在javadoc里体现</li><li>Inherited &#x2F;&#x2F;子类会继承父类注解</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20221004163309.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot简介1</title>
      <link href="/2022/09/27/spring-he-springboot-jian-jie/"/>
      <url>/2022/09/27/spring-he-springboot-jian-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringBoot和Spring简介"><a href="#SpringBoot和Spring简介" class="headerlink" title="SpringBoot和Spring简介"></a>SpringBoot和Spring简介</h3><p><strong>注解学习：<a href="https://liayun.blog.csdn.net/article/details/115053350">(32条消息) 历时三个月，史上最详细的Spring注解驱动开发系列教程终于出炉了，给你全新震撼_李阿昀的博客-CSDN博客</a></strong></p><p><strong>csdn虽然很垃圾，但里面还是有大佬的…,垃圾堆里刨食</strong></p><h5 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h5><p>java网页端的开发过程如下javaweb -&gt; ssm -&gt; springboot</p><p>其中ssm常规理解是spring + springMVC + Mybatis</p><p>本质上来说，springMVC是spring家族的一个模块，也就是人们常说的spring framework</p><p>而spring家族的集大成者springboot可以看作是spring framework的一种抽象实现</p><h5 id="2-为什么要用springboot"><a href="#2-为什么要用springboot" class="headerlink" title="2.为什么要用springboot"></a>2.为什么要用springboot</h5><p>springboot的重点之一就是<strong>自动配置</strong></p><p>在传统的SSM框架集成中，需要编写大量的XML配置文件，比如集成Mybatis时，需要编写mybatis_config.xml文件，在集成springmvc时，需要编写springmvc.xml文件，这些配置文件十分繁琐，还很容易出现错误，导致开发效率低。而Spring Boot采用约定大于配置的思想，将大量的spring配置文件集成到Spring Boot的内部，帮助开发人员自动配置各类XML文件，极大的简化了开发过程。<br>以上是大部分人对springboot配置的定义，实际上，我感觉，是程序员感觉配置类比xml文件好用，所以决定用配置类和注解</p><h5 id="3-IOC"><a href="#3-IOC" class="headerlink" title="3.IOC"></a>3.IOC</h5><p>IOC是满足OCP原则的</p><p>IOC是一种抽象的概念，java里面具体理解可以分为三个</p><p>1.创建容器</p><p>2.对象加入容器</p><p>3.注入</p><p>抽象理解的话就是老生常谈的问题</p><p>控制反转</p><p>作为开发者，我们只需要考虑把对象加入容器，然后注入我们所需要的对象就行了，作为设计IOC容器的人，他需要考虑的是灵活注入满足更灵活的OCP场景,这也是我们需要学习的。</p><h5 id="4-应用"><a href="#4-应用" class="headerlink" title="4.应用"></a>4.应用</h5><p><strong>简单应用：就两个注解就行</strong></p><p>@Component @Autowired</p><p>注入容器并取出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Aki</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Aki R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@RestControllerpublic class TestController &#123;    @Autowired    private Aki aki;    @RequestMapping(&quot;&#x2F;&quot;)    public void get()&#123;        aki.R();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更深入一点</p><p>@Component</p><p>@Controller</p><p>@Service</p><p>@Repository</p><p>@Configuration</p><p>前四个用来解决 组件&#x2F;类和忘了叫什么的new的问题，只不过所属层级不同</p><h5 id="5-注入相关"><a href="#5-注入相关" class="headerlink" title="5.注入相关"></a>5.注入相关</h5><p>IOC对象的实例化，注入时机都是在容器创建就完成的，可以用@lazy延迟实例化加载，不过如果一个类里面引用了其他对象，那么作为属性的对象的延迟加载无效。</p><p>@lazy一般不用，了解一下就行</p><p>三种注入方式</p><p>属性注入</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Autowired    private Aki aki;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>构造器注入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Aki</span> aki<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">TestController</span><span class="token punctuation">(</span><span class="token class-name">Aki</span> aki<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aki <span class="token operator">=</span> aki<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token namespace">aki<span class="token punctuation">.</span></span>R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>setter注入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Aki</span> aki<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Autowired</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAki</span><span class="token punctuation">(</span><span class="token class-name">Aki</span> aki<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>aki <span class="token operator">=</span> aki<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name"><span class="token namespace">aki<span class="token punctuation">.</span></span>R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了代码的稳定性，我们可以引入抽象的概念</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public interface IHero &#123;    void R();&#125;-----------------------------------------------------@Componentpublic class Aki implements IHero&#123;    public Aki()&#123;        System.out.println(&quot;Aki ... constructor&quot;);    &#125;    public void R()&#123;        System.out.println(&quot;Aki R&quot;);    &#125;&#125;-----------------------------------------------------@Componentpublic class Niko implements IHero&#123;    public void R()&#123;        System.out.println(&quot;niko R&quot;);    &#125;&#125;------------------------------------------------------    @RestControllerpublic class TestController &#123;    @Autowired    private IHero aki;    @RequestMapping(&quot;&#x2F;&quot;)    public void get()&#123;        aki.R();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>满足DIP，高层的实现不依赖于底层,此时我们应该有个疑问，</p><p><strong>@Autowired</strong></p><p><strong>private IHero aki;</strong></p><p>如何实现自动装配</p><p>经过实验，可以得出以下结论</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//默认bytypeIHero &lt; 1 error      = 1 注入默认存在的一个      > 1 不一定报错，先根据字段名进行匹配，没有找到就报错    //我们可以通过byname指定    @Autowired    @Qualifier(value = "字段名")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时我们就该考虑更深层次的问题，如果我们新增多个类，如何减少变化带来的影响，来保持我们代码的稳定性，也为了满足ocp原则</p><ul><li>制造一个interface,多个类实现这个interface</li></ul><p>设计模式的策略模式</p><ul><li>一个类的属性去解决变化，用配置文件去解决，不过还是建议实现接口，哪怕只有一个类</li></ul><p>栗子：MySQL的连接配置文件可以在application.yaml或者application.propertis，把所有的不稳定隔离到配置文件，我们又知道配置文件满足这个</p><p><strong>配置文件可以理解是外部的输入，就如同我们的用户输入意义，是一种变化，它的改变不违法OCP原则</strong>借此来解决。</p><h5 id="6-Configuration"><a href="#6-Configuration" class="headerlink" title="6.@Configuration"></a>6.@Configuration</h5><p>简单的理解，@Configuration是为了解决原来IOC容器无法对属性进行赋值的问题，它的角色更像是原来xml文件的作用，在springboot2还是3引入了这一概念</p><p>栗子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">IHero</span> <span class="token function">createWolf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Wolf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wolf</span> <span class="token keyword">implements</span> <span class="token class-name">IHero</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Wolf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"wolf ... constructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"wolf R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@RestControllerpublic class TestController &#123;    @Autowired    private IHero Wolf;    @RequestMapping(&quot;&#x2F;&quot;)    public void get()&#123;        Wolf.R();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述操作，我们实现了在@Configuration实现了bean的注入</p><p>接下来需要了解这个注解和xml，我们需要解决以下几个问题</p><p><strong>我们要明白为什么需要spring的配置？</strong></p><p>因为变化的出现，我们需要去隔离这些变化带给我们程序的不稳定，所以我们需要把所有的不稳定放到配置文件中，配置文件属于外部输入，也是一种变化，不影响OCP法则</p><blockquote><p>还有为什么隔离到配置文件</p></blockquote><p>1.配置文件的集中性</p><p>2.业务逻辑的无关性，只需要关心配置就行</p><p><strong>@Configuration是否违反了OCP</strong></p><p>这个问题聚焦到@Configruation是否属于配置，这要从思想上来解决这个问题</p><p><strong>是</strong>：对比其他配置文件，它虽然是以.java文件的后缀，但不否认的是他仍然是一个配置文件，配置文件的定义不应该以后缀为鉴别条件</p><p><strong>否</strong>：相较于其他配置文件的简洁性，类似于SpringBoot的application,@Confiruation好像太过繁琐</p><blockquote><p>实现自动配置(有缺陷）</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IConnect</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class Mysql implements IConnect&#123;    private String ip &#x3D; &quot;192.168.0.1&quot;;    private String root &#x3D; &quot;999&quot;;    public Mysql() &#123;    &#125;    public void connect()&#123;        System.out.println(this.ip + &quot;   &quot; + this.root);    &#125;    public Mysql(String ip, String root) &#123;        this.ip &#x3D; ip;        this.root &#x3D; root;    &#125;    @Override    public String toString() &#123;        return &quot;Mysql&#123;&quot; +                &quot;ip&#x3D;&#39;&quot; + ip + &#39;\&#39;&#39; +                &quot;, root&#x3D;&#39;&quot; + root + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;    public String getIp() &#123;        return ip;    &#125;    public void setIp(String ip) &#123;        this.ip &#x3D; ip;    &#125;    public String getRoot() &#123;        return root;    &#125;    public void setRoot(String root) &#123;        this.root &#x3D; root;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Connect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;mysql.ip&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ip<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;mysql.port&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> root<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">IConnect</span> <span class="token function">mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mysql</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ip<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">mysql.ip&#x3D;192.102.2.3mysql.port&#x3D;9999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20220927232106.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式前瞻(需要掌握的)</title>
      <link href="/2022/09/25/java-she-ji-mo-shi/"/>
      <url>/2022/09/25/java-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="Java设计模式第一次学习"><a href="#Java设计模式第一次学习" class="headerlink" title="Java设计模式第一次学习"></a>Java设计模式第一次学习</h2><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>学习设计模式的前置条件</p><p>学习网站：</p><p>简单：<a href="https://www.jianshu.com/p/0cd7df8a7789">想要学习设计模式，你得先会看类图，一张图读懂ＵＭＬ - 简书 (jianshu.com)</a></p><p>其他：<a href="https://www.cnblogs.com/leafsunshin/p/11495300.html">UML基础教程 - leafsunshin - 博客园 (cnblogs.com)</a></p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20221002211204.png"></p><p><strong>img</strong></p><p>了解这张图就可以了，主要分析六种关系，成对分析</p><blockquote><p>继承和实现</p></blockquote><p>继承：指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力</p><p>实现：指的是一个class类实现interface接口（可以是多个）的功能；实现是类与接口之间最常见的关系</p><blockquote><p>依赖和关联</p></blockquote><p>依赖：可以简单的理解，就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的,临时性的、非常弱的，可以简单理解</p><p>A，B两个类，A中的一个类的方法中的参数用到了B的类，关系联系很弱。</p><p>关联：他体现的是两个类、或者类与接口之间语义级别的一种强依赖关系。这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的、关联可以是单向、双向的；表现在代码层面，为被关联类B以类属性的形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量；</p><blockquote><p>聚合和组合</p></blockquote><p>聚合：聚合是关联关系的一种特例，他体现的是整体与部分、拥有的关系，即has-a的关系，此时整体与部分之间是可分离的，他们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。比如上图，一群大雁里有很多大雁的个体，大雁个体的死亡不影响大雁群。</p><p>组合：组合也是关联关系的一种特例，他体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合；他同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束；比如你和你的大脑，再比如上图，一只大雁有两个翅膀，大雁死了，翅膀这个类也不复存在。</p><h2 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h2><p>相关代码在我的github仓库</p><p><a href="https://www.jianshu.com/p/613d182ffceb">软件设计的七大原则 - 简书 (jianshu.com)</a></p><p>开闭原则</p><p>开闭原则（Open-Closed Principle, OCP）是指一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。所谓的开闭，也正是对扩展和修改两个行为的一个原则。强调的是用抽象构建框架，用实现扩展细节。可以提高软件系统的可复用性及可维护性。开<br>闭原则，是面向对象设计中最基础的设计原则。它指导我们如何建立稳定灵活的系统，例如：我们版本更新，我尽可能不修改源代码，但是可以增加新功能。</p><p>依赖倒置原则</p><p>依赖倒置原则（Dependence Inversion Principle,DIP）是指设计代码结构时，高层模块不应该依赖底层模块，二者都应该依赖其抽象。抽象不应该依赖细节；细节应该依赖抽象。通过依赖倒置，可以减少类与类之间的耦合性，提高系统的稳定性，提高代码的可读性和可维护性，并能够降低修改程序所造成的风险。</p><p>单一职责原则</p><p>单一职责（Simple Responsibility Pinciple，SRP）是指不要存在多于一个导致类变更的原因。假设我们有一个 Class 负责两个职责，一旦发生需求变更，修改其中一个职责的逻辑代码，有可能会导致另一个职责的功能发生故障。这样一来，这个 Class 存在两个导致类变更的原因。如何解决这个问题呢？我们就要给两个职责分别用两个 Class 来实现，进行解耦。后期需求变更维护互不影响。这样的设计，可以降低类的复杂度，提高类的可 读 性 ， 提 高 系 统 的 可 维 护 性 ， 降 低 变 更 引 起 的 风 险 。 总 体 来 说 就 是 一 个Class&#x2F;Interface&#x2F;Method 只负责一项职责。</p><p>接口隔离原则</p><p>接口隔离原则（Interface Segregation Principle, ISP）是指用多个专门的接口，而不使用单一的总接口，客户端不应该依赖它不需要的接口。这个原则指导我们在设计接口时应当注意一下几点：<br>1、一个类对一类的依赖应该建立在最小的接口之上。<br>2、建立单一接口，不要建立庞大臃肿的接口。<br>3、尽量细化接口，接口中的方法尽量少（不是越少越好，一定要适度）。<br>接口隔离原则符合我们常说的高内聚低耦合的设计思想，从而使得类具有很好的可读性、可扩展性和可维护性。我们在设计接口的时候，要多花时间去思考，要考虑业务模型，包括以后有可能发生变更的地方还要做一些预判。</p><p>迪米特法则</p><p>迪米特原则（Law of Demeter LoD）是指一个对象应该对其他对象保持最少的了解，又叫最少知道原则（Least Knowledge Principle,LKP），尽量降低类与类之间的耦合。迪米特原则主要强调只和朋友交流，不和陌生人说话。出现在成员变量、方法的输入、输出参数中的类都可以称之为成员朋友类，而出现在方法体内部的类不属于朋友类。</p><p>里氏替换原则</p><p>里氏替换原则（Liskov Substitution Principle,LSP）是指如果对每一个类型为 T1 的对象 o1,都有类型为 T2 的对象 o2,使得以 T1 定义的所有程序 P 在所有的对象 o1 都替换成o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。<br>定义看上去还是比较抽象，我们重新理解一下，可以理解为一个软件实体如果适用一个父类的话，那一定是适用于其子类，所有引用父类的地方必须能透明地使用其子类的对象，子类对象能够替换父类对象，而程序逻辑不变。根据这个理解，我们总结一下：<br>引申含义：子类可以扩展父类的功能，但不能改变父类原有的功能。<br>1、子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。<br>2、子类中可以增加自己特有的方法。<br>3、当子类的方法重载父类的方法时，方法的前置条件（即方法的输入&#x2F;入参）要比父类方法的输入参数更宽松。<br>4、当子类的方法实现父类的方法时（重写&#x2F;重载或实现抽象方法），方法的后置条件（即方法的输出&#x2F;返回值）要比父类更严格或相等。</p><p>使用里氏替换原则有以下优点：<br>1、约束继承泛滥，开闭原则的一种体现。<br>2、加强程序的健壮性，同时变更时也可以做到非常好的兼容性，提高程序的维护性、扩展性。降低需求变更时引入的风险。</p><p>合成复用原则</p><p>合成复用原则（Composite&#x2F;Aggregate Reuse Principle,CARP）是指尽量使用对象组合(has-a)&#x2F;聚合(contanis-a)，而不是继承关系达到软件复用的目的。可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少。<br>继承我们叫做白箱复用，相当于把所有的实现细节暴露给子类。组合&#x2F;聚合也称之为黑箱复用，对类以外的对象是无法获取到实现细节的。要根据具体的业务场景来做代码设计，其实也都需要遵循 OOP 模型。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章摘要(记录网站)</title>
      <link href="/2022/09/24/za-tan/"/>
      <url>/2022/09/24/za-tan/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo一些有用的博客"><a href="#Hexo一些有用的博客" class="headerlink" title="Hexo一些有用的博客"></a>Hexo一些有用的博客</h1><h2 id="1-hexo手把手教你布置"><a href="#1-hexo手把手教你布置" class="headerlink" title="1.hexo手把手教你布置"></a>1.hexo手把手教你布置</h2><p><a href="https://www.zhihu.com/question/484633431/answer/2476184917?utm_campaign=&utm_medium=social&utm_oi=996162393482932224&utm_psn=1557492957648949248&utm_source=qq">(2 封私信 &#x2F; 12 条消息) 如何使用 Github Pages 和 Hexo 搭建个人博客？ - 知乎 (zhihu.com)</a></p><p>需要注意的是，现在github的默认分支是main，需要把_config.yaml的配置文件里的deploy的branch改成main</p><h2 id="2-设计模式视频"><a href="#2-设计模式视频" class="headerlink" title="2.设计模式视频"></a>2.设计模式视频</h2><p><a href="https://www.aliyundrive.com/s/SNMmtCV3twb">https://www.aliyundrive.com/s/SNMmtCV3twb</a></p><h2 id="3-设计模式网站"><a href="#3-设计模式网站" class="headerlink" title="3.设计模式网站"></a>3.设计模式网站</h2><p><a href="https://java-design-patterns.com/">https://java-design-patterns.com/</a><br><a href="https://refactoringguru.cn/design-patterns/iterator">https://refactoringguru.cn/design-patterns/iterator</a></p><h2 id="4-教程网站"><a href="#4-教程网站" class="headerlink" title="4.教程网站"></a>4.教程网站</h2><p><a href="https://www.baeldung.com/">https://www.baeldung.com/</a></p><h2 id="5-Hexo主题官方文档"><a href="#5-Hexo主题官方文档" class="headerlink" title="5.Hexo主题官方文档"></a>5.Hexo主题官方文档</h2><p><a href="https://caodong-street.github.io/2021/09/18/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍（转载于blinkfox） | Cao Dong (caodong-street.github.io)</a></p><h2 id="6-MarkDown官方文档"><a href="#6-MarkDown官方文档" class="headerlink" title="6.MarkDown官方文档"></a>6.MarkDown官方文档</h2><p><a href="https://markdown.com.cn/basic-syntax/">Markdown 基本语法 | Markdown 官方教程</a></p><h2 id="7-阿里云效"><a href="#7-阿里云效" class="headerlink" title="7.阿里云效"></a>7.阿里云效</h2><p><a href="https://help.aliyun.com/document_detail/423521.html">云效移动端快速入门 (aliyun.com)</a></p><h2 id="8-Git相关"><a href="#8-Git相关" class="headerlink" title="8.Git相关"></a>8.Git相关</h2><p><a href="https://blog.csdn.net/xu_song/article/details/94734095">(31条消息) 代码提交到Github的3种方法_xu_song的博客-CSDN博客_提交代码到github</a></p><p><a href="https://www.cnblogs.com/ye-feng-yu/p/11108696.html">将IDEA工程代码提交到Github - 代码梦工厂 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/CherishTheYouth/p/CherishTheYouth_20210426.html">Git实用技巧35招 - CherishTheYouth - 博客园 (cnblogs.com)</a></p><h2 id="9-搭建图床"><a href="#9-搭建图床" class="headerlink" title="9.搭建图床"></a>9.搭建图床</h2><p><a href="https://zhuanlan.zhihu.com/p/489236769">使用Github+picGo搭建图床，保姆级教程来了 - 知乎 (zhihu.com)</a></p><h2 id="10-图片上传"><a href="#10-图片上传" class="headerlink" title="10.图片上传"></a>10.图片上传</h2><p><a href="https://water-crest-907.notion.site/ceb795b96abb42ad855a5b1d99dceeea">https://water-crest-907.notion.site/ceb795b96abb42ad855a5b1d99dceeea</a></p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOC和DI(建议回顾)</title>
      <link href="/2022/09/23/ioc-he-di/"/>
      <url>/2022/09/23/ioc-he-di/</url>
      
        <content type="html"><![CDATA[<h2 id="IOC-和-DI"><a href="#IOC-和-DI" class="headerlink" title="IOC 和 DI"></a>IOC 和 DI</h2><p>学了很久的spring全家桶，但总感觉对这东西理解很模糊，没有系统总结过，学习总要输入和输出，感觉之前的学习总在被动输入，没有主动输出，总感觉少了点东西，今天以我理解的角度来看待spring，可能理解很片面，也可能哪天我成了大牛，重新看看这一篇博客，把他完善的更好</p><p>首先我们界定所有的软件思想都需要满足OCP原则，也就是我们软件工程需求的开闭原则，这是我们软件设计的一种思想，具体可以理解是</p><p><strong>对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。</strong></p><p><strong>对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对类进行任何修改。</strong></p><p><strong>只有依赖于抽象。实现开放封闭的核心思想就是对<a href="https://baike.baidu.com/item/%E6%8A%BD%E8%B1%A1%E7%BC%96%E7%A8%8B?fromModule=lemma_inlink">抽象编程</a>，而不对具体编程，因为抽象相对稳定。让类依赖于固定的抽象，所以对修改就是封闭的；而通过<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1?fromModule=lemma_inlink">面向对象</a>的继承和对多态机制，可以实现对抽象体的继承，通过覆写其方法来改变固有行为，实现新的扩展方法，所以对于扩展就是开放的。</strong></p><p>以上加粗的字体来自百度百科，如果你想进一步了解，欢迎百度或者Google</p><p>同时我们需要有一个共识，我们所有的目的都是为了代码的更高稳定性，有了这个共识，我们就可以开始了。</p><h3 id="为什么需要IOC"><a href="#为什么需要IOC" class="headerlink" title="为什么需要IOC,"></a>为什么需要IOC,</h3><p>IOC本质上并不是一种技术，它是一种思想，也就是我们常说的控制反转，但我们为什么需要控制反转，使用控制反转有什么好处是我们需要去考虑的。我们举个栗子</p><p>我们首先以当前现象级的手游王者荣耀来说，他有很多英雄，假如你选择了一个英雄并选择放大招</p><h4 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h4><p>hero类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiBai</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"李白放大招了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DianWei</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"典韦放大招了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Main类</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class Main &#123;    public static void main(String[] args) &#123;       String name &#x3D; Main.getplayer();       if(name.equals(&quot;Libai&quot;))&#123;           LiBai liBai &#x3D; new LiBai();           liBai.R();       &#125;else if(name.equals(&quot;DianWei&quot;))&#123;           DianWei dianWei &#x3D; new DianWei();           dianWei.R();       &#125;    &#125;    private static String getplayer()&#123;        Scanner scanner &#x3D; new Scanner(System.in);        String hero &#x3D; scanner.nextLine();        return hero;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h4><p>java类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Hero</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiBai</span> <span class="token keyword">implements</span> <span class="token class-name">Hero</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"李白放大招了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DianWei</span> <span class="token keyword">implements</span> <span class="token class-name">Hero</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"典韦放大招了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Main类</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class Main &#123;    public static void main(String[] args) &#123;       String name &#x3D; Main.getplayer();       Hero hero &#x3D; null;       if(name.equals(&quot;Libai&quot;))&#123;            hero &#x3D; new LiBai();       &#125;else if(name.equals(&quot;DianWei&quot;))&#123;           hero &#x3D; new DianWei();       &#125;       hero.R();    &#125;    private static String getplayer()&#123;        Scanner scanner &#x3D; new Scanner(System.in);        String hero &#x3D; scanner.nextLine();        return hero;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，我们可以思考，如果我们想要去加一个英雄，那么，我们就要if else 或者 switch case 里面去 new 一个对象，然后放大招，每一次我们都要去动里面的代码，有什么方法可以解决这个情况，此时有人说了：接口，没错，接口可以解决这个问题。其实这也引出了我们的标题，为什么要引入IOC</p><h3 id="如何实现IOC的原理"><a href="#如何实现IOC的原理" class="headerlink" title="如何实现IOC的原理"></a>如何实现IOC的原理</h3><p>让我们看看第二版的代码，是不是优雅了很多，但是还是有问题，我们解决了方法调用的问题，让一个接口可以统一方法的调用，但是仍然困扰我们的是我们不能统一对象的实例化。</p><p>此时我们同样来借用大佬的一段总结</p><p><strong>1.单纯interface可以统一方法的调用，但是它不能统一对象的实例化</strong></p><p><strong>2.面向对象主要做两件事情:实例化对象调用方法(完成业务逻辑)</strong></p><p><strong>3．只有一段代码中没有new的出现，才能保持代码的相对稳定，才能逐步实现OCP</strong></p><p><strong>4.上面的这句话只是表象，实质是一段代码如果要保持稳定，就不应该负责对象的实例化</strong></p><p><strong>5.对象实例化是不可能消除的</strong></p><p><strong>6.把对象实例化的过程，转移到其他的代码片段里</strong></p><p>我们通过以上的总结可以思考如何解决对象实例化(new)的问题，可不可以把对象实例化放进以一个工厂里，等我们需要时工厂给我们加载，由此，我们想到了我们可以用工厂模式来尝试的解决。</p><p>工厂模式有三种</p><p>简单工厂模式</p><p>工厂模式</p><p>抽象工厂模式</p><p>如果有机会，看完设计模式，也会写一点东西记录一下</p><p>如何实现IOC的原理</p><h4 id="第三版"><a href="#第三版" class="headerlink" title="第三版"></a>第三版</h4><p>Factory类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FacotryHero</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Hero</span> getHero <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Hero</span> hero <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Libai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            hero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LiBai</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"DianWei"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            hero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DianWei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> hero<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Main类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token function">getplayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Hero</span> hero <span class="token operator">=</span> <span class="token class-name">FacotryHero</span><span class="token punctuation">.</span><span class="token function">getHero</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">hero<span class="token punctuation">.</span></span>R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们的代码看起来就变成了稳定的</p><p>我们可以了解，Factory是不稳定的，Main类是稳定的，这时候有人说了，这不是骗人吗,把原来项目里的不稳定代码放进了Factory里就变成稳定的了? 实际上确实如此，我们可以这样想，我们代码的不稳定就是来自于我们需要new的对象，当我们需要创建对象就不可避免的去new对象，如果有一个代码可以帮我们把所有的不稳定隔离起来，也就是帮我们去new所有的对象并返回，那我们的主类代码就是稳定的满足ocp，当然还有一个问题FacotryHero.getHero这串代码本质上来说还是不稳定的，因为如果Factory里没有，我们还是要去动Factory里的代码，这就不满足ocp原则了，只有Factory足够的大，足够的完善，可以帮我们处理所有的请求，我们的代码才能实现真正意义上的稳定，是不是有点感觉了。</p><p>我们来聊聊不稳定，我们开发的意义实际上还是面向用户也业务编程，没有了用户，我们什么都不是，用户提出了一个需求，这个需求的解不是唯一的，这不为一的解才是我们代码不稳定的本质原因。就好比一个用户选择了亚瑟，另一个用户选择了李白，这两个不同的需求的变化导致了我们代码的不稳定，我们的工厂里有亚瑟，好的，我直接返回给你，没有李白，不好意思，你的工厂里要自己再去new一个，这就造成了代码的不稳定，总的来说表面上是我们代码的不稳定，实际上是用户需求的变化。这也是我们的面向对象编程，用户的每一个需求都是我们可能创建的对象。那有没有办法在用户提出需求的时候，就已经可以自动创建对象，实际上是有的。</p><h4 id="第四版"><a href="#第四版" class="headerlink" title="第四版"></a>第四版</h4><p>factory</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Hero</span> <span class="token class-name">GetHeroByReflect</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Hero</span> hero <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> strname <span class="token operator">=</span> <span class="token string">"com.scy.test.Hero."</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>strname<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//cls.getDeclaredConstructor().newInstance();</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Hero</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Main</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token function">getplayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Hero</span> hero <span class="token operator">=</span> <span class="token class-name">FacotryHero<span class="token punctuation">.</span>GetHeroByReflect</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name"><span class="token namespace">hero<span class="token punctuation">.</span></span>R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过用户的字符串输入实现用户自己创建对象并返回，<strong>工厂模式 + 反射</strong>在IOC里面有着大量的应用，但和我们有一定的区别，spring通过工厂模式和反射，当用户一个字符串注入时我们现在的代码每次都需要进行反射，但是spring可能将他放进缓存里，下一次再去创建直接从缓存里拿就行，但工厂模式+反射并不是IOC和DI</p><p>IOC是控制反转,DI是依赖注入，我们的工厂模式 + 反射仍然需要用户去输入字符串，容器去创建对象，是一个正常的思维模式，<strong>没有IOC精华的控制反转和依赖注入</strong></p><p>配置文件的变化违反OCP吗，配置文件可以理解是外部的输入，就如同我们的用户输入意义，是一种变化，它的改变不违法OCP原则</p><h3 id="IOC和DI"><a href="#IOC和DI" class="headerlink" title="IOC和DI"></a>IOC和DI</h3><p>抓住两个字 <strong>要</strong> 和 <strong>给</strong></p><p>原来的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token function">getplayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Hero</span> hero <span class="token operator">=</span> <span class="token class-name">FacotryHero<span class="token punctuation">.</span>GetHeroByReflect</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name"><span class="token namespace">hero<span class="token punctuation">.</span></span>R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还是需要FactoryHero.get方法向容器去要这个对象，只有对象的创建，没有控制的反转</p><p>想要的代码</p><p>java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">IC</span> ic<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们想主动声明一个对象，容器就可以主动把对象返回给我们，而不是去申请。</p><h4 id="IOC-DI-DIP"><a href="#IOC-DI-DIP" class="headerlink" title="IOC DI DIP"></a>IOC DI DIP</h4><p><strong>DIP: Dependency Inversion Principle 依赖倒置</strong></p><p>了解三个概念</p><ul><li>高层模块不应该依赖底层模块，两者应该都依赖抽象 &#x2F;&#x2F;高层就是抽象</li><li>抽象不应该依赖细节</li><li>细节应该依赖抽象</li></ul><p><strong>DI</strong></p><p>依赖注入</p><ol><li>属性注入</li><li>构造器注入</li><li>等等</li></ol><p>前提：我们的容器里有所有的对象，演示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Container</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> get <span class="token class-name">Bean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//1 构造器注入</span>        <span class="token class-name">IC</span> ic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span>ic<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//2 属性注入</span>        <span class="token class-name">A</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a1<span class="token punctuation">.</span><span class="token function">setIC</span><span class="token punctuation">(</span>ic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>容器的本质是装配对象，比如我们有A, B, C三个对象， C对象依赖了A对象，我们在实现A对象的时候完全不用去考虑C对象，因为我们是面向抽象编程，我们未来编程可能是C接口的实现类，可能是c1,c2,c3等等，我们设计的时候只需要考虑A对象就行了。至于装配的工作交给容器就行了。</p><p><strong>IOC</strong></p><p>IOC就是一种思想，很模糊，没有一个具体的界定.DI就是IOC的一个具体的实现。</p><p>比如还是上述的代码，如果我们不采用IOC的话</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">IC</span> ic<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主控类是A，也可以理解是我们程序员，因为我们可以决定是否创建</p><p>当我们引入了IOC思想，主控类变成了容器，由容器来决定类的依赖注入和装配。</p><p>或者程序员负责生产类，产品经理或用户来负责使用，这还不是很理解，等对IOC有进一步的理解再说吧</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更灵活的配置文件</title>
      <link href="/2022/05/15/pei-zhi-wen-jian-de-jia-zai/"/>
      <url>/2022/05/15/pei-zhi-wen-jian-de-jia-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="1-通过加载Properties-x2F-Yml实现映射"><a href="#1-通过加载Properties-x2F-Yml实现映射" class="headerlink" title="1.通过加载Properties&#x2F;Yml实现映射"></a>1.通过加载Properties&#x2F;Yml实现映射</h1><p>学习链接<a href="https://blog.csdn.net/yusimiao/article/details/97622666?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-97622666-blog-104575745.235%5Ev35%5Epc_relevant_anti_vip_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-97622666-blog-104575745.235%5Ev35%5Epc_relevant_anti_vip_base&utm_relevant_index=2">(115条消息) @ConfigurationProperties 注解使用姿势，这一篇就够了_configureproperties_yusimiao的博客-CSDN博客</a></p><h2 id="0-1使用介绍"><a href="#0-1使用介绍" class="headerlink" title="0.1使用介绍"></a>0.1使用介绍</h2><p>假设我们正在搭建一个发送邮件的模块。在本地测试，我们不想该模块真的发送邮件，所以我们需要一个参数来「开关」 disable 这个功能。另外，我们希望为这些邮件配置一个默认的主题，这样，当我们查看邮件收件箱，通过邮件主题可以快速判断出这是测试邮件</p><p>在 application.properties 文件中创建这些参数:</p><p>我们可以使用 @Value 注解或着使用 Spring Environment bean 访问这些属性，是这种注入配置方式有时显得很笨重。我们将使用更安全的方式(@ConfigurationProperties )来获取这些属性</p><p><strong>意思就是我们常见的可维护性和可拓展性</strong></p><p>@Value的简单介绍</p><blockquote><p>该注解的作用是将我们配置文件的属性读出来，有**@Value(“${}”)<strong>和</strong>@Value(“#{}”)**两种方式</p></blockquote><p>① ${ property : default_value }<br>② #{ obj.property? :default_value }<br>第一个注入的是外部配置文件对应的property</p><p>第二个则是SpEL表达式对应的内容。 那个<br>default_value，就是前面的值为空时的默认值。注意二者的不同，#{}里面那个obj代表对象</p><h2 id="0-2注意事项"><a href="#0-2注意事项" class="headerlink" title="0.2注意事项"></a>0.2注意事项</h2><p>@ConfigurationProperties 的基本用法非常简单:我们为每个要捕获的外部属性提供一个带有字段的类。请注意以下几点:</p><ul><li><p>前缀定义了哪些外部属性将绑定到类的字段上（就是类似yml的第一个字符或者properties的第一个字符）</p></li><li><p>根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配（配置文件的除前缀名和字段对应）</p></li><li><p>我们可以简单地用一个值初始化一个字段来定义一个默认值</p></li><li><p>类本身可以是包私有的</p></li><li><p>类的字段必须有公共 setter 方法</p></li></ul><h2 id="0-3激活配置类"><a href="#0-3激活配置类" class="headerlink" title="0.3激活配置类"></a>0.3激活配置类</h2><p>对于 Spring Boot，创建一个 MainProperties 类型的 bean，我们可以通过下面几种方式将其添加到应用上下文中</p><p>首先，我们可以通过添加 @Component 注解让 Component Scan 扫描到</p><p>很显然，只有当类所在的包被 Spring @ComponentScan 注解扫描到才会生效，默认情况下，该注解会扫描在主应用类下的所有包结构</p><p>我们也可以通过 Spring 的 Java Configuration 特性实现同样的效果:</p><p>只要 MailModuleConfiguration 类被 Spring Boot 应用扫描到，我们就可以在应用上下文中访问 MainProperties bean</p><p>我们还可以使用 @EnableConfigurationProperties 注解让我们的类被 Spring Boot 所知道，在该注解中其实是用了@Import(EnableConfigurationPropertiesImportSelector.class) 实现，大家可以看一下</p><h2 id="1-1配置codeMessage-properties"><a href="#1-1配置codeMessage-properties" class="headerlink" title="1.1配置codeMessage.properties"></a>1.1配置codeMessage.properties</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"># 消息码配置文件# 格式：消息码 -> 消息lin.code-message[0]=成功lin.code-message[1]=创建成功lin.code-message[2]=更新成功lin.code-message[3]=删除成功lin.code-message[4]=密码修改成功lin.code-message[5]=删除用户成功lin.code-message[6]=更新用户成功lin.code-message[7]=更新分组成功lin.code-message[8]=删除分组成功lin.code-message[9]=添加权限成功lin.code-message[10]=删除权限成功lin.code-message[11]=注册成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2配置映射"><a href="#1-2配置映射" class="headerlink" title="1.2配置映射"></a>1.2配置映射</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"lin"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:code-message.properties"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionCodeConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> codeMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//拿到数据，数组对应</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> codeMessage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回map</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getCodeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> codeMessage<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//设置一对</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCodeMessage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> codeMessage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExceptionCodeConfiguration</span><span class="token punctuation">.</span>codeMessage <span class="token operator">=</span> codeMessage<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3使用"><a href="#1-3使用" class="headerlink" title="1.3使用"></a>1.3使用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> errorMessage <span class="token operator">=</span> <span class="token class-name">ExceptionCodeConfiguration</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登录校验流程</title>
      <link href="/2022/05/11/deng-lu-xiao-yan-liu-cheng/"/>
      <url>/2022/05/11/deng-lu-xiao-yan-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1.前期准备"></a>1.前期准备</h2><h3 id="1-1配置ThreadLocal存储用户信息"><a href="#1-1配置ThreadLocal存储用户信息" class="headerlink" title="1.1配置ThreadLocal存储用户信息"></a>1.1配置ThreadLocal存储用户信息</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserHolder</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span> threadlocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token class-name">UserDto</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        threadlocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UserDto</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> threadlocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        threadlocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2配置Redis的前缀"><a href="#1-2配置Redis的前缀" class="headerlink" title="1.2配置Redis的前缀"></a>1.2配置Redis的前缀</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConstants</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LOGIN_CODE_KEY</span> <span class="token operator">=</span> <span class="token string">"login:code:"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> <span class="token constant">LOGIN_CODE_TTL</span> <span class="token operator">=</span> <span class="token number">2L</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LOGIN_USER_KEY</span> <span class="token operator">=</span> <span class="token string">"login:token:"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> <span class="token constant">LOGIN_USER_TTL</span> <span class="token operator">=</span> <span class="token number">36000L</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> <span class="token constant">CACHE_NULL_TTL</span> <span class="token operator">=</span> <span class="token number">2L</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> <span class="token constant">CACHE_SHOP_TTL</span> <span class="token operator">=</span> <span class="token number">30L</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CACHE_SHOP_KEY</span> <span class="token operator">=</span> <span class="token string">"cache:shop:"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LOCK_SHOP_KEY</span> <span class="token operator">=</span> <span class="token string">"lock:shop:"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> <span class="token constant">LOCK_SHOP_TTL</span> <span class="token operator">=</span> <span class="token number">10L</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SECKILL_STOCK_KEY</span> <span class="token operator">=</span> <span class="token string">"seckill:stock:"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BLOG_LIKED_KEY</span> <span class="token operator">=</span> <span class="token string">"blog:liked:"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">FEED_KEY</span> <span class="token operator">=</span> <span class="token string">"feed:"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SHOP_GEO_KEY</span> <span class="token operator">=</span> <span class="token string">"shop:geo:"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">USER_SIGN_KEY</span> <span class="token operator">=</span> <span class="token string">"sign:"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2.具体实现"></a>2.具体实现</h2><h3 id="2-1用户点击校验码"><a href="#2-1用户点击校验码" class="headerlink" title="2.1用户点击校验码"></a>2.1用户点击校验码</h3><p>后台根据发送的手机进行校验是否符合格式并生成随机的6位密码，利用stringRedisTemplate自动注入的类设置数据并预定超时时间2min</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">sendCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">RegexUtils</span><span class="token punctuation">.</span><span class="token function">isPhoneInvalid</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"手机号格式不正确!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomNumbers</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.保存验证码到session</span><span class="token comment">//        session.setAttribute("code",code);</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">RedisConstants</span><span class="token punctuation">.</span><span class="token constant">LOGIN_CODE_KEY</span> <span class="token operator">+</span>phone<span class="token punctuation">,</span>code<span class="token punctuation">,</span><span class="token class-name">RedisConstants</span><span class="token punctuation">.</span><span class="token constant">LOGIN_CODE_TTL</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//有效期2mins</span>        <span class="token comment">//4.发送验证码;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"发送短信验证码成功!"</span> <span class="token operator">+</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2用户点击登录"><a href="#2-2用户点击登录" class="headerlink" title="2.2用户点击登录"></a>2.2用户点击登录</h3><p>前端传入手机号和验证码后，对手机号格式进行校验，同时对Redis中存的验证码进行验正。对传入的手机号进行查询是否存在，如果存在就正常流程，不存在就创建新的对象。</p><p>通过UUID创建一个唯一的token, 为了对用户信息进行脱敏 ，应用BeanUtil.copyProperties(user1, UserDTO.class);进行解决，利用Redis的HashMap数据结构，对用户的信息进行处理后利用stringRedisTemplate.opsForHash().putAll(tokenKey,userMap);进行执行，同时设置有效期<strong>，并返回token给前端</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA"> public Result login(LoginFormDTO loginForm, HttpSession session) &#123;        String phone &#x3D; loginForm.getPhone();        if(RegexUtils.isPhoneInvalid(phone))&#123;            return Result.fail(&quot;手机号格式错误!&quot;);        &#125;        &#x2F;&#x2F;2.校验验证码&#x2F;&#x2F;        Object cacheCode &#x3D; session.getAttribute(&quot;code&quot;);        String cacheCode &#x3D; stringRedisTemplate.opsForValue().get(RedisConstants.LOGIN_CODE_KEY+phone);        String code &#x3D; loginForm.getCode();        if(code&#x3D;&#x3D;null||!cacheCode.toString().equals(code))&#123;            &#x2F;&#x2F;3.不一致，报错            return Result.fail(&quot;验证码错误!&quot;);        &#125;        User user &#x3D; query().eq(&quot;phone&quot;, phone).one();        User user1 &#x3D; new User();        if(user&#x3D;&#x3D;null)&#123;            &#x2F;&#x2F;5.注册用户            user1.setPhone(phone);            user1.setNickName(&quot;user_&quot;+RandomUtil.randomString(10));            &#x2F;&#x2F;保存用户            save(user1);        &#125;        &#x2F;&#x2F;6.存入session        String token &#x3D; UUID.randomUUID().toString(true);&#x2F;&#x2F;hutools        UserDTO userDTO &#x3D; BeanUtil.copyProperties(user1, UserDTO.class);        HashMap&lt;Object, Object&gt; userMap &#x3D; new HashMap&lt;&gt;();        userMap.put(&quot;id&quot;, userDTO.getId().toString());        userMap.put(&quot;nickName&quot;, userDTO.getNickName());        userMap.put(&quot;icon&quot;, userDTO.getIcon());        &#x2F;&#x2F;存储用户信息到Redis里        String tokenKey &#x3D; RedisConstants.LOGIN_USER_KEY + token;        stringRedisTemplate.opsForHash().putAll(tokenKey,userMap);        &#x2F;&#x2F;设置有效期        stringRedisTemplate.expire(tokenKey,RedisConstants.LOGIN_USER_TTL,TimeUnit.MINUTES);        return Result.ok(token);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3配置拦截器"><a href="#2-3配置拦截器" class="headerlink" title="2.3配置拦截器"></a>2.3配置拦截器</h3><p>采用了双token校验机制的思想，对所有来的请求进行一次token刷新，对登录进行拦截，order越小先执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MVCConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//登录拦截器</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>                        <span class="token string">"/user/code"</span><span class="token punctuation">,</span>                        <span class="token string">"/user/login"</span><span class="token punctuation">,</span>                        <span class="token string">"/blog/hot"</span><span class="token punctuation">,</span>                        <span class="token string">"/shop/**"</span><span class="token punctuation">,</span>                        <span class="token string">"/shop-type/**"</span><span class="token punctuation">,</span>                        <span class="token string">"/upload/**"</span><span class="token punctuation">,</span>                        <span class="token string">"/voucher/**"</span>                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//token刷新器</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefreshTokenInterceptor</span><span class="token punctuation">(</span>stringRedisTemplate<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>                        <span class="token string">"/user/code"</span><span class="token punctuation">,</span>                        <span class="token string">"/user/login"</span>                <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认拦截所有请求</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4token刷新器"><a href="#2-4token刷新器" class="headerlink" title="2.4token刷新器"></a>2.4token刷新器</h3><p>根据请求头的字段进行拦截校验，根据key获取HashMap数据并进行转换 BeanUtil.fillBeanWithMap(userMap,userDTO, false);，并把这个对象保存到ThreadLocal这个线程变量中，根据key设置超时时间，记得remove</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RefreshTokenInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RefreshTokenInterceptor</span><span class="token punctuation">(</span><span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stringRedisTemplate <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//不存在，拦截 设置响应状态吗为401（未授权）</span>            response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">RedisConstants</span><span class="token punctuation">.</span><span class="token constant">LOGIN_USER_KEY</span> <span class="token operator">+</span> token<span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> userMap <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//4.不存在则拦截，设置响应状态吗为401（未授权）</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">UserDTO</span> userDTO<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">fillBeanWithMap</span><span class="token punctuation">(</span>userMap<span class="token punctuation">,</span>userDTO<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>userDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">RedisConstants</span><span class="token punctuation">.</span><span class="token constant">LOGIN_USER_TTL</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//移除用户</span>        <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">removeUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5全局拦截器"><a href="#2-5全局拦截器" class="headerlink" title="2.5全局拦截器"></a>2.5全局拦截器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断是否需要拦截</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"用户未登录!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//销毁，以免内存泄漏</span>        <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">removeUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端开发应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git简记</title>
      <link href="/2022/04/14/git/"/>
      <url>/2022/04/14/git/</url>
      
        <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>摆烂的一天，不怎么想写代码，索性看看廖雪峰的Git顺便记录下一些有帮助的东西，以便于自己回忆和查找相关的Git命令</p><p>廖雪峰的官方网站:<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496">https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496</a></p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h4><p><strong>个人理解</strong></p><p>Git是分布式版本控制系统，在我的理解之中，可以这样理解如果一个系统被git管理了，就相当于所有参与此系统的工作人员的所有修改记录都会被记录到git之中，并且保存每一个版本，当我们系统想要去推倒重建时，可以退回版本。当然如果我们参与系统不同模块构建的工作人员也可以通过git进行工作模块的合并，使之真正成为一个系统。</p><p>开发者</p><p>Linus，同时也是Linux开发者，git是他花了2 weeks的产品</p><p>CVS及SVN都是集中式的版本控制系统，而Git是分布式版本控制系统</p><p>大致看下截取的一段</p><p>集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p><p>分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p><p><strong>安装Git</strong></p><p>根据教程网站装下就行</p><p>安装后的配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">git config --global user.name "username"git config --global user.emial "you email for github or others"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">git config user.namegit config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>出现你相关信息正确即可</p><p><strong>版本库</strong></p><p>你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”</p><p>linux就用相关指令创建仓库，windows就图形化界面操作，在文件目录下输入如下(windows就git bush)</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>.git文件</code>这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了</p><p>所有的版本变动都是针对文本文件，而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p><p><strong>千万不要使用Windows自带的记事本编辑任何文本文件</strong>，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题</p><p><strong>提交到仓库</strong></p><p>1.新建redme.md，内容如下,位置在.git痛击目录或者子目录</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Git is version control systemGit is fress software<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.<code>git add</code>添加到仓库</p><pre class="line-numbers language-axml" data-language="axml"><code class="language-axml">git add readme.mdgit add . &#x2F;&#x2F;添加所有文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.用命令<code>git commit</code>告诉Git，把文件提交到仓库</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">git commit -m "first try to commit"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的</p><p>ERROR</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Q：输入git add readme.txt，得到错误：fatal: not a git repository (or any of the parent directories)。A：Git命令必须在Git仓库目录内执行（git init除外），在仓库目录外执行是没有意义的。Q：输入git add readme.txt，得到错误fatal: pathspec 'readme.txt' did not match any files。A：添加某个文件时，该文件必须在当前目录下存在，用ls或者dir命令查看当前目录的文件，看看文件是否存在，或者是否写错了文件名。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相关核心操作"><a href="#相关核心操作" class="headerlink" title="相关核心操作"></a>相关核心操作</h4><p>版本回退</p><p>git log查看提交日志</p><p><img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20221002170851.png"></p><p>回退版本</p><p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">git reset --hard HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看所有版本id</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">git reflogJack@LAPTOP-456PN4D3 MINGW64 &#x2F;f&#x2F;酸菜鱼&#x2F;Test_Git (master)$ git reflog0e59a6a (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: Third5dc3797 HEAD@&#123;1&#125;: commit: Secondfa01484 HEAD@&#123;2&#125;: commit (initial): first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回指定版本</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">git reset --hard 1094a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>老师总结</p><ul><li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul><p><strong>工作区和暂存区概念</strong></p><p><img src="https://www.liaoxuefeng.com/files/attachments/919020037470528/0" alt="git-repo"></p><p><strong>其他信息</strong></p><p>管理修改</p><p>Git跟踪并管理的是修改，而非文件，所以每次修改都需要先git add后再考虑commit</p><p>撤销修改</p><p><code>git checkout -- file</code>可以丢弃工作区的修改</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">$ git checkout -- readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><p>用命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">$ git reset HEAD readme.txtUnstaged changes after reset:Mreadme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>作者总结</p><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>一节，不过前提是没有推送到远程库。</p><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>1.github创建一个仓库</p><p>2.本地仓库关联远程仓库</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">git remote add origin git@github.com:michaelliao/learngit.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.提交仓库</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">git push <span class="token operator">-</span>u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.删除远程仓库</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">$ git remote -vorigin  git@github.com:michaelliao/learn-git.git (fetch)origin  git@github.com:michaelliao/learn-git.git (push)git remote rm origin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.克隆仓库</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">$ git clone git@github.com:michaelliao/gitskills.gitCloning into 'gitskills'...remote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3Receiving objects: 100% (3/3), done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><p>创建并切换到新的<code>dev</code>分支，可以使用：</p><pre class="line-numbers language-none"><code class="language-none">$ git switch -c dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接切换到已有的<code>master</code>分支，可以使用：</p><pre class="line-numbers language-none"><code class="language-none">$ git switch master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.liaoxuefeng.com/files/attachments/919022325462368/0" alt="git-br-initial"></p><p><img src="https://www.liaoxuefeng.com/files/attachments/919022533080576/0" alt="git-br-on-master"></p><p><img src="https://www.liaoxuefeng.com/files/attachments/919022479428512/0" alt="git-br-rm"></p><p>实现上图的合并</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">1$ git checkout -b devSwitched to a new branch &#39;dev&#39;2$ git branch* dev  master3$ git add readme.txt 4$ git commit -m &quot;branch test&quot;[dev b17d20e] branch test 1 file changed, 1 insertion(+)5$ git checkout masterSwitched to branch &#39;master&#39;6$ git merge devUpdating d46f35e..b17d20eFast-forward readme.txt | 1 + 1 file changed, 1 insertion(7$ git branch -d devDeleted branch dev (was b17d20e).8$ git branch* master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本概念就这些，剩下的可以直接去看git实操</p><h1 id="1-二次总结"><a href="#1-二次总结" class="headerlink" title="1.二次总结"></a>1.二次总结</h1><h2 id="1概念介绍"><a href="#1概念介绍" class="headerlink" title="1概念介绍"></a>1概念介绍</h2><p>1.GIT介绍和主要作用</p><p>GIT是一个开源的分布式版本控制系统</p><p>作用是代码共享,回溯版本,追踪信息</p><p>GIT和SVN区别 -&gt; 面试题</p><p>2.GIT概念</p><p>工作区(.git不属于工作区)，（缓存区，本地仓库）（版本库），远程仓库</p><ol><li>工作区：就是你平时存放项目代码的地方。</li></ol><p>位置：一个文件夹通过git init设置成一个git可以管理的文件夹时，这个文件夹里的内</p><p>容（除去.git文件夹）就是工作区</p><ol start="2"><li><p>仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最 新放入仓库的版本。就是工作区有一个隐藏目录.git它不算工作区，而是Git的版本库</p></li><li><p>暂存区：英文叫 stage 或 index。是用来暂时存放工作区中修改的内容，可以理解为一个中转站。</p></li></ol><p>1）位置：一般存放在 .git 目录下的 index 文件（.git&#x2F;index）中，所以我们把暂存区有时也叫 作索引（index）。 </p><p>2）只是一个文件</p><p>3）包含在版本库中</p><p>4）为什么需要暂存区：</p><p>1.如果没有暂存区，如果想要提交文件就需要一个个修改然后，提交，比较麻烦，但是有了暂存区 就可以一次性将所需要的文件从暂存区 直接修改后提交。 </p><p>2.如果没有暂存区，你修改的文件只可以立刻保存到版本库中，但是这样很容易对别人的工作造成影响</p><ol start="4"><li><p>Head :指向最新放入仓库的版本 </p></li><li><p>master:是我们的主分支。当我们git init后，并不会立刻产生分支。而是我们添加了一个文件，并 git add, git commit后这时我们查看分支情况便可以看到master分支了。是本地仓库一部分。 </p></li><li><p>objects:是git对象库，是用来存储各种创建的对象以及内容. </p></li><li><p>远程仓库:托管代码的服务器，常用github 码云 gitlab</p></li></ol><p>3.Git安装</p><p>依照网上教程无脑安装</p><h2 id="2-具体操作"><a href="#2-具体操作" class="headerlink" title="2.具体操作"></a>2.具体操作</h2><ol><li>GIT本地操作-初始化工作区</li></ol><p>1.1初始化当前的文件夹为工作区：git init</p><p>1.2如何查看文件状态：git status -&gt; 红色代表当前没有提交到缓存区</p><p>1.3进入文件编辑模式 linux系统</p><p>vim文件名，然后按字i(前) a(后) o(下一行)插入数据，然后按esc退出吗，最后按:wq保存退出。</p><p>1.4查看文件内容：cat文件名(linux系统)</p><ol start="2"><li>GIT本地操作add与commit</li></ol><p>2.1工作区提交缓存区git add readme.txt -&gt;发现这时文件变成绿色，可以提交到本地仓库</p><p>2.2缓存区提交本地仓库git commit -m第一次提交’后面提交的内容规范后面会有总结</p><p>2.3第一次提交需要填写如下信息</p><p>命令git config –global user.email ‘<a href="mailto:&#x31;&#50;&#x33;&#52;&#53;&#x36;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;">&#x31;&#50;&#x33;&#52;&#53;&#x36;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;</a>‘ -&gt; 说明:指定邮箱 </p><p>命令:git config –global user.name ‘suoge’ -&gt; 说明:指定操作者</p><p>2.4其他总结</p><p>添加多个文件 git add [file1] [file2] …</p><p>添加指定目录到暂存区，包括子目录 git add [dir]</p><p>添加当前目录下的所有文件到暂存区，不包括被删除的文件 git add .</p><p>add时，一个个文件加比较麻烦，可以用下面的命令将所有变动的文件同步至暂存区（新增，修改，删，除）-&gt; git add -A</p><p>下面的命令是将所有修改和删除的文件同步至暂存区，不包括新增文件 -&gt; git add -u</p><ol start="3"><li>GIT本地操作-差异比较</li></ol><p>3.1工作区暂存区比较 -&gt; git diff readme.txt</p><p>3,2工作区本地库比较 -&gt; git diff HEAD readme.txt </p><p>3.3暂存区本地库比较 -&gt; git diff –cached readme.txt </p><ol start="4"><li>GIT本地操作-版本回退</li></ol><p>4.0每一个版本的前面，都有一长串随即数字，这是每次提交的commit id</p><p>4.1查看当前提交日志 -&gt; git log</p><p>4.2查看当前提交日志，且显示当前分支的当前版本所在位置 -&gt; git log –decorate</p><p>4.3回退到之前版本 -&gt; git reset –hard HEAD^回退一个版本( git reset –hard HEAD~100回退100版本)，此时使用git log发现只有此版本之前的版本</p><p>4.4查看所有操作 -&gt; git reflog</p><p>4.5版本号 回退到指定版本 -&gt; git reset –hard 版本号</p><ol start="5"><li>GIT本地操作-修改撤消</li></ol><p>5.1在你提交缓存区前，你突然发现这个修改是有问题的，你打算恢复到原来的样子</p><p>撤销工作区修改 -&gt; git checkout 文件名称</p><p>撤销缓存区到工作区 -&gt; git reset HEAD readme.txt</p><h2 id="3-分支操作"><a href="#3-分支操作" class="headerlink" title="3.分支操作"></a>3.分支操作</h2><p>提交的本质：记录仓库中一组文件的变化信息（增、删、改）</p><p>分支是什么：分支就是多次提交串起来的一条线 </p><p>!<img src="https://cdn.jsdelivr.net/gh/Shirasawa-zs/BlogImage@main/img/20230416171625.png"></p><p>1   分支操作-分支创建与切换</p><p>1.1创建dev分支 -&gt; git branch dev</p><p>1.2切换dev分支 -&gt; git checkout dev</p><p>1.3查看分支 git branch</p><p>1.4 当前在master分支，创建并转到dev分支，在dev分支进行修改文件并提交到缓存区推到本地仓库，dev分支显示文件内容已经被修改，转换到master分支，发现master分支的文件内容未被修改</p><p>\2.  分支操作-分支合并与删除</p><p>2.1合并dev分支 git merge dev -&gt; git merge 分支名</p><p>2.2 查看分支情况 git branch</p><p>2.3 删除dev分支 -&gt; git branch -d 分支名</p><h1 id="4-GIT远程仓库介绍"><a href="#4-GIT远程仓库介绍" class="headerlink" title="4.GIT远程仓库介绍"></a>4.GIT远程仓库介绍</h1><p>Github&#x2F;Gitee&#x2F;Gitlib</p><p>码云 -&gt; 随便找个教程注册就行</p><h1 id="5．GIT远程仓库操作-关联、拉取、推送、克隆"><a href="#5．GIT远程仓库操作-关联、拉取、推送、克隆" class="headerlink" title="5．GIT远程仓库操作-关联、拉取、推送、克隆"></a>5．GIT远程仓库操作-关联、拉取、推送、克隆</h1><p>0. </p><p><em>本地分支和远程分支的关联关系 -&gt;</em> git branch -v </p><p><em>查看远程仓库</em> -&gt; git remote -v </p><ol><li>我们需要先建立本地仓库 与远程仓库的关系</li></ol><p>git remote add origin 远程仓库地址 关联远程仓库</p><ol start="2"><li>拉取：从码云仓库拉取到本地仓库</li></ol><p> 《在推送代码前必须先拉取代码，否则无法推送本地仓库代码到码云仓库 》</p><p>git pull origin master –allow-unrelated-histories </p><p>首次拉取需要添加:–allow-unrelated-histories </p><p>git pull 后续拉取</p><ol start="3"><li>推送：本地仓库推送到码云仓库</li></ol><p>首次推送 -&gt; git push -u origin master</p><p>后续推送 -&gt; git push </p><p>强制push -&gt; git push -u origin master <strong>-f</strong></p><p>4.克隆</p><p>克隆到本地 -git clone <a href="https://gitee.com/tiansuo123456/itheim-heima141.git">https://gitee.com/tiansuo123456/itheim-heima141.git</a></p><h1 id="6-IDEA中使用GIT-集成GIT"><a href="#6-IDEA中使用GIT-集成GIT" class="headerlink" title="6. .IDEA中使用GIT-集成GIT"></a>6. .IDEA中使用GIT-集成GIT</h1><p>1.额，我一般创建仓库，本地关联远程仓库，然后add, commit, push解决</p><p>红色 -&gt; 没添加到缓存区</p><p>蓝色 -&gt; 没添加到本地仓库</p><p>黑色 -&gt; 同步成功</p><p>2.重点应该是回退版本</p><p>文件 -&gt; git -&gt; commit file -&gt; log下的历史提交记录选择 -&gt; Reset开头的 -&gt; 选择hard -&gt; 版本回退成功</p><p>3.工作区撤销</p><p>当我们在工作区编辑代码时候，希望撤销未提交本地仓库的代码时候,在Git中右键 Rollback</p><p>4.在IDEA中完成分支创建、合并、删除操作</p><p>首先克隆文件，软件右侧手动创建新分支，并切换到这个分支进行编码，编码成功后提交到本地仓库，切换成master分支。在当前分支合并新分支（选择新分支合并）删除新分支</p><p>5.版本冲突</p><p>但是当多个用户对同一个文件交叉修改的时候就尴尬了。A修改完提交一个，B修改完又提交一个，这个 时候A修改完提交，问题来了，如果A提交成功，那么就相当于忽略了B提交的内容。这个时候就要强制 你去处理一下这个问题，这就是我们所说的冲突问题。</p><p>比如仓库代码和本地代码冲突</p><p>解决冲突：X放弃 &gt;&gt;采用，在主干代码进行选择后，重新提交</p><ol start="7"><li>IDEA git拉取项目时报 No tracked branch configured for branch master or the branch doesn’t exist的提示</li></ol><p>选择本地工作空间右键 输入git branch –set-upstream-to&#x3D;origin&#x2F;master，再次拉去合并</p><ol start="8"><li>多人共享git项目</li></ol><p>分为项目，用户，组</p><p>新建用户，并加入组中，根据组分配权限，创建并关联项目。</p><p>组长对master分支进行保护，组长创建dev分支，实际开发中，组员在dev分支开发，开发完毕由组长进行合并。设置master分支不被允许合并，设置其他分支可以合并和推送。</p><p>VCS关联地址。组员切换到dev分支，并在dev分支编码提交到本地仓库。组长在master分支合并。</p>]]></content>
      
      
      <categories>
          
          <category> 其他开发加点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
